events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # CORS whitelist (echo back only trusted origins)
    map $http_origin $cors_origin {
        default "";
        "https://verbfy.com" "https://verbfy.com";
        "https://www.verbfy.com" "https://www.verbfy.com";
        "https://verbfy.pages.dev" "https://verbfy.pages.dev";
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' https://fonts.gstatic.com; connect-src 'self' wss: https:; frame-src 'none';" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

    # Upstream servers
    upstream backend {
        server verbfy-backend:5000 max_fails=3 fail_timeout=30s;
    }

    # HTTP redirect to HTTPS for API and ACME support
    server {
        listen 80;
        server_name api.verbfy.com;
        
        # Let's Encrypt challenge (webroot)
        location /.well-known/acme-challenge {
            default_type text/plain;
            alias /var/www/html/.well-known/acme-challenge;
            try_files $uri =404;
        }
        
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # API server (HTTPS)
    server {
        listen 443 ssl;
        http2 on;
        server_name api.verbfy.com;

        ssl_certificate /etc/letsencrypt/live/api.verbfy.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.verbfy.com/privkey.pem;

        # TLS hardening
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # ACME challenge also on HTTPS (to support Cloudflare edge redirects)
        location /.well-known/acme-challenge {
            default_type text/plain;
            alias /var/www/html/.well-known/acme-challenge;
            try_files $uri =404;
        }

        # Rate limiting for API
        location /api/ {
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, x-csrf-token, X-CSRF-Token, Idempotency-Key, idempotency-key, Accept, Origin, User-Agent, Cache-Control" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age 86400 always;
                add_header Vary "Origin" always;
                add_header Content-Length 0;
                add_header Content-Type "text/plain; charset=UTF-8";
                return 204;
            }

            # Ensure CORS headers for non-OPTIONS requests
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Vary "Origin" always;
            add_header Cache-Control "no-store" always;

            limit_req zone=api burst=20 nodelay;
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300;
            proxy_connect_timeout 75;
        }

        # Proxy Socket.IO on API domain (enable sticky by IP)
        location /socket.io/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # Stripe webhooks (raw body passthrough on /api/payments/webhook)
        location = /api/payments/webhook {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

}