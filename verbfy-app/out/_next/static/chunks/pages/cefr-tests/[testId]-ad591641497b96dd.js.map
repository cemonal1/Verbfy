{"version":3,"file":"static/chunks/pages/cefr-tests/[testId]-ad591641497b96dd.js","mappings":"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","sources":["webpack://_N_E/?a021","webpack://_N_E/./src/features/cefrTesting/view/CEFRTestInterface.tsx","webpack://_N_E/./pages/cefr-tests/[testId].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/cefr-tests/[testId]\",\n      function () {\n        return require(\"private-next-pages/cefr-tests/[testId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/cefr-tests/[testId]\"])\n      });\n    }\n  ","import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { CEFRTest, TestAttempt } from '@/types/cefrTests';\nimport { cefrTestsAPI } from '@/lib/api';\nimport { useAuthContext } from '@/context/AuthContext';\n\ninterface CEFRTestInterfaceProps {\n  testId: string;\n  onComplete?: (result: any) => void;\n}\n\nexport const CEFRTestInterface: React.FC<CEFRTestInterfaceProps> = ({\n  testId,\n  onComplete\n}) => {\n  const router = useRouter();\n  const { user } = useAuthContext();\n  const [test, setTest] = useState<CEFRTest | null>(null);\n  const [currentSection, setCurrentSection] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState<{[key: string]: any}>({});\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [timed, setTimed] = useState<boolean>(true);\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [attemptId, setAttemptId] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (testId) {\n      fetchTest();\n    }\n  }, [testId]);\n\n  useEffect(() => {\n    if (!timed) return;\n    if (timeRemaining > 0) {\n      const timer = setTimeout(() => {\n        setTimeRemaining(timeRemaining - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else if (timeRemaining === 0 && test) {\n      handleSubmit();\n    }\n  }, [timeRemaining, test, timed]);\n\n  const fetchTest = async () => {\n    try {\n      setLoading(true);\n      const response = await cefrTestsAPI.getTest(testId);\n      setTest(response);\n      \n      // Start the test\n      const startResponse = await cefrTestsAPI.startTest(testId);\n      setAttemptId(startResponse.attemptId);\n      setTimed(!!startResponse.test.timed);\n      if (startResponse.test.timed) {\n        setTimeRemaining(startResponse.test.totalTime * 60); // Convert to seconds\n      }\n    } catch (error) {\n      console.error('Error fetching test:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAnswer = (answer: any) => {\n    const key = `${currentSection}-${currentQuestion}`;\n    setAnswers(prev => ({\n      ...prev,\n      [key]: answer\n    }));\n  };\n\n  const handleNext = () => {\n    const currentSectionData = test?.sections[currentSection];\n    if (!currentSectionData) return;\n\n    if (currentQuestion < currentSectionData.questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else if (currentSection < test.sections.length - 1) {\n      setCurrentSection(currentSection + 1);\n      setCurrentQuestion(0);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    } else if (currentSection > 0) {\n      setCurrentSection(currentSection - 1);\n      const prevSection = test?.sections[currentSection - 1];\n      setCurrentQuestion(prevSection ? prevSection.questions.length - 1 : 0);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!attemptId || !test) return;\n\n    try {\n      setSubmitting(true);\n      \n      // Convert answers to the expected format\n      const formattedAnswers = Object.entries(answers).map(([key, answer]) => {\n        const [sectionIndex, questionIndex] = key.split('-').map(Number);\n        return {\n          sectionIndex,\n          questionIndex,\n          studentAnswer: answer,\n          timeSpent: 0 // You could track this more precisely\n        };\n      });\n\n      const result = await cefrTestsAPI.submitTest(attemptId, {\n        answers: formattedAnswers,\n        timeSpent: (test.totalTime * 60) - timeRemaining\n      });\n\n      if (onComplete) {\n        onComplete(result);\n      } else {\n        try {\n          if (typeof window !== 'undefined') {\n            window.sessionStorage.setItem(`cefr_result_${attemptId}` as string, JSON.stringify(result));\n          }\n        } catch {}\n        router.push(`/cefr-tests/results/${attemptId}`);\n      }\n    } catch (error) {\n      console.error('Error submitting test:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getProgress = () => {\n    if (!test) return 0;\n    const totalQuestions = test.sections.reduce((sum, section) => sum + section.questions.length, 0);\n    const answeredQuestions = Object.keys(answers).length;\n    return (answeredQuestions / totalQuestions) * 100;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading test...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!test) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-red-600\">Test not found</p>\n        </div>\n      </div>\n    );\n  }\n\n  const currentSectionData = test.sections[currentSection];\n  const currentQuestionData = currentSectionData?.questions[currentQuestion];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-xl font-semibold text-gray-900\">{test.title}</h1>\n              <span className=\"bg-blue-100 text-blue-800 text-sm font-medium px-2 py-1 rounded-full\">\n                {test.cefrLevel}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-sm text-gray-500\">\n                Progress: {getProgress().toFixed(1)}%\n              </div>\n              {timed && (\n                <div className=\"text-sm font-medium text-red-600\">\n                  ⏱️ {formatTime(timeRemaining)}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {test.description && (\n          <div className=\"bg-blue-50 border border-blue-100 text-blue-800 rounded-lg px-4 py-3 mb-6 text-sm\">\n            {test.description}\n          </div>\n        )}\n        <div className=\"bg-white rounded-lg shadow-md\">\n          {/* Progress Bar */}\n          <div className=\"p-6 border-b\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium text-gray-700\">\n                Section {currentSection + 1} of {test.sections.length}: {currentSectionData?.name}\n              </span>\n              <span className=\"text-sm text-gray-500\">\n                Question {currentQuestion + 1} of {currentSectionData?.questions.length}\n              </span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${((currentSection * 100) / test.sections.length) + ((currentQuestion * 100) / (test.sections.length * currentSectionData?.questions.length))}%` }}\n              ></div>\n            </div>\n          </div>\n\n          {/* Question */}\n          <div className=\"p-6\">\n            {currentQuestionData && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n                    {currentQuestionData.question}\n                  </h3>\n                  \n                  {currentQuestionData.imageUrl && (\n                    <img \n                      src={currentQuestionData.imageUrl} \n                      alt=\"Question\" \n                      className=\"max-w-full h-auto rounded-lg mb-4\"\n                    />\n                  )}\n                  \n                  {currentQuestionData.audioUrl && (\n                    <audio controls className=\"w-full mb-4\">\n                      <source src={currentQuestionData.audioUrl} type=\"audio/mpeg\" />\n                      Your browser does not support the audio element.\n                    </audio>\n                  )}\n                </div>\n\n                {/* Answer Options */}\n                <div className=\"space-y-3\">\n                  {currentQuestionData.type === 'multiple-choice' && currentQuestionData.options && (\n                    <div className=\"space-y-3\">\n                      {currentQuestionData.options.map((option, index) => (\n                        <label key={index} className=\"flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                          <input\n                            type=\"radio\"\n                            name={`question-${currentSection}-${currentQuestion}`}\n                            value={option}\n                            checked={answers[`${currentSection}-${currentQuestion}`] === option}\n                            onChange={(e) => handleAnswer(e.target.value)}\n                            className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300\"\n                          />\n                          <span className=\"ml-3 text-gray-900\">{option}</span>\n                        </label>\n                      ))}\n                    </div>\n                  )}\n\n                  {currentQuestionData.type === 'fill-blank' && (\n                    <input\n                      type=\"text\"\n                      value={answers[`${currentSection}-${currentQuestion}`] || ''}\n                      onChange={(e) => handleAnswer(e.target.value)}\n                      placeholder=\"Enter your answer...\"\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  )}\n\n                  {currentQuestionData.type === 'essay' && (\n                    <textarea\n                      value={answers[`${currentSection}-${currentQuestion}`] || ''}\n                      onChange={(e) => handleAnswer(e.target.value)}\n                      placeholder=\"Write your answer...\"\n                      rows={6}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Navigation */}\n          <div className=\"p-6 border-t bg-gray-50\">\n            <div className=\"flex items-center justify-between\">\n              <button\n                onClick={handlePrevious}\n                disabled={currentSection === 0 && currentQuestion === 0}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Previous\n              </button>\n\n              <div className=\"flex items-center space-x-3\">\n                <button\n                  onClick={handleSubmit}\n                  disabled={submitting}\n                  className=\"px-6 py-2 bg-red-600 text-white text-sm font-medium rounded-md hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {submitting ? 'Submitting...' : 'Submit Test'}\n                </button>\n\n                {currentSection < test.sections.length - 1 || currentQuestion < currentSectionData?.questions.length - 1 ? (\n                  <button\n                    onClick={handleNext}\n                    className=\"px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700\"\n                  >\n                    Next\n                  </button>\n                ) : null}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}; ","import React from 'react';\nimport Head from 'next/head';\nimport { CEFRTestInterface } from '../../src/features/cefrTesting/view/CEFRTestInterface';\nimport { useAuthContext } from '@/context/AuthContext';\nimport { useRouter } from 'next/router';\nimport { useEffect } from 'react';\n\nexport default function CEFRTestPage() {\n  const { user, loading } = useAuthContext();\n  const router = useRouter();\n  const { testId } = router.query;\n\n  useEffect(() => {\n    if (!loading && !user) {\n      router.push('/login');\n    }\n  }, [user, loading, router]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  if (!testId || typeof testId !== 'string') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-red-600\">Invalid test ID</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Taking CEFR Test - Verbfy</title>\n        <meta name=\"description\" content=\"Complete your CEFR English proficiency test\" />\n      </Head>\n\n      <CEFRTestInterface \n        testId={testId}\n        onComplete={(result: any) => {\n          console.log('Test completed:', result);\n          // The interface will handle navigation to results\n        }}\n      />\n    </>\n  );\n} "],"names":["window","__NEXT_P","push","__webpack_require__","CEFRTestInterface","testId","onComplete","param","router","useRouter","user","useAuthContext","test","setTest","useState","currentSection","setCurrentSection","currentQuestion","setCurrentQuestion","answers","setAnswers","timeRemaining","setTimeRemaining","timed","setTimed","loading","setLoading","submitting","setSubmitting","attemptId","setAttemptId","useEffect","fetchTest","timer","setTimeout","clearTimeout","handleSubmit","response","cefrTestsAPI","getTest","startResponse","startTest","totalTime","error","console","handleAnswer","key","concat","prev","answer","formattedAnswers","Object","entries","map","sectionIndex","questionIndex","split","Number","studentAnswer","timeSpent","result","submitTest","sessionStorage","setItem","JSON","stringify","e","jsx_runtime","jsx","div","className","jsxs","p","currentSectionData","sections","currentQuestionData","questions","h1","title","span","cefrLevel","getProgress","totalQuestions","reduce","sum","section","length","answeredQuestions","keys","toFixed","formatTime","hours","Math","floor","seconds","minutes","secs","toString","padStart","description","name","style","width","h3","question","imageUrl","img","src","alt","audioUrl","audio","controls","source","type","options","option","index","label","input","value","checked","onChange","target","placeholder","textarea","rows","button","onClick","prevSection","disabled","CEFRTestPage","query","Fragment","Head","meta","content","log"],"sourceRoot":""}