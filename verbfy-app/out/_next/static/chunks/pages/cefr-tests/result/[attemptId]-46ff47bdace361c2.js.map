{"version":3,"file":"static/chunks/pages/cefr-tests/result/[attemptId]-46ff47bdace361c2.js","mappings":"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","sources":["webpack://_N_E/?62cc","webpack://_N_E/./src/features/cefrTesting/view/CEFRTestResults.tsx","webpack://_N_E/./pages/cefr-tests/result/[attemptId].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/cefr-tests/result/[attemptId]\",\n      function () {\n        return require(\"private-next-pages/cefr-tests/result/[attemptId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/cefr-tests/result/[attemptId]\"])\n      });\n    }\n  ","import React, { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { TestAttempt, CEFRTest } from '@/types/cefrTests';\r\nimport { cefrTestsAPI } from '@/lib/api';\r\n\r\ninterface CEFRTestResultsProps {\r\n  attemptId: string;\r\n  onRetake?: () => void;\r\n}\r\n\r\nexport const CEFRTestResults: React.FC<CEFRTestResultsProps> = ({\r\n  attemptId,\r\n  onRetake\r\n}) => {\r\n  const router = useRouter();\r\n  const [attempt, setAttempt] = useState<TestAttempt | null>(null);\r\n  const [test, setTest] = useState<CEFRTest | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (attemptId) {\r\n      fetchResults();\r\n    }\r\n  }, [attemptId]);\r\n\r\n  const fetchResults = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const [attemptResponse, testResponse] = await Promise.all([\r\n        cefrTestsAPI.getTestAttempt(attemptId),\r\n        cefrTestsAPI.getTest(attemptId.split('-')[0]) // Assuming attemptId format: testId-attemptId\r\n      ]);\r\n      setAttempt(attemptResponse);\r\n      setTest(testResponse);\r\n    } catch (error) {\r\n      console.error('Error fetching results:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getScoreColor = (score: number) => {\r\n    if (score >= 80) return 'text-green-600';\r\n    if (score >= 60) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  };\r\n\r\n  const getLevelColor = (level: string) => {\r\n    const colors = {\r\n      A1: 'bg-red-100 text-red-800',\r\n      A2: 'bg-orange-100 text-orange-800',\r\n      B1: 'bg-yellow-100 text-yellow-800',\r\n      B2: 'bg-green-100 text-green-800',\r\n      C1: 'bg-blue-100 text-blue-800',\r\n      C2: 'bg-purple-100 text-purple-800'\r\n    };\r\n    return colors[level as keyof typeof colors] || 'bg-gray-100 text-gray-800';\r\n  };\r\n\r\n  const getSkillIcon = (skill: string) => {\r\n    const icons = {\r\n      grammar: '📝',\r\n      reading: '📖',\r\n      writing: '✍️',\r\n      speaking: '🗣️',\r\n      listening: '👂',\r\n      vocabulary: '📚'\r\n    };\r\n    return icons[skill as keyof typeof icons] || '📊';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Loading results...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!attempt || !test) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-red-600\">Results not found</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const scorePercentage = (attempt.score / attempt.maxScore) * 100;\r\n  const isPassed = attempt.isPassed;\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8\">\r\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        {/* Header */}\r\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n          <div className=\"text-center\">\r\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Test Results</h1>\r\n            <p className=\"text-gray-600 mb-4\">{test.title}</p>\r\n            \r\n            <div className=\"flex items-center justify-center space-x-4 mb-6\">\r\n              <span className={`px-3 py-1 text-sm font-medium rounded-full ${getLevelColor(test.cefrLevel)}`}>\r\n                {test.cefrLevel}\r\n              </span>\r\n              <span className=\"text-sm text-gray-500\">\r\n                {new Date(attempt.completedAt || '').toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n\r\n            {/* Overall Score */}\r\n            <div className=\"mb-6\">\r\n              <div className=\"text-6xl font-bold mb-2\">\r\n                <span className={getScoreColor(scorePercentage)}>\r\n                  {scorePercentage.toFixed(1)}%\r\n                </span>\r\n              </div>\r\n              <div className=\"text-2xl font-semibold text-gray-700 mb-2\">\r\n                {attempt.score} / {attempt.maxScore} points\r\n              </div>\r\n              <div className={`text-lg font-medium ${isPassed ? 'text-green-600' : 'text-red-600'}`}>\r\n                {isPassed ? '✅ Passed' : '❌ Not Passed'}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Time and Progress */}\r\n            <div className=\"grid grid-cols-2 gap-4 text-sm text-gray-600\">\r\n              <div>\r\n                <span className=\"font-medium\">Time Spent:</span> {Math.floor(attempt.timeSpent / 60)}m {attempt.timeSpent % 60}s\r\n              </div>\r\n              <div>\r\n                <span className=\"font-medium\">Questions Answered:</span> {attempt.answers.length}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Skill Breakdown */}\r\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Skill Breakdown</h2>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\r\n            {Object.entries(attempt.skills).map(([skill, score]) => (\r\n              <div key={skill} className=\"text-center p-4 border border-gray-200 rounded-lg\">\r\n                <div className=\"text-2xl mb-2\">{getSkillIcon(skill)}</div>\r\n                <div className=\"font-medium text-gray-900 capitalize\">{skill}</div>\r\n                <div className={`text-lg font-bold ${getScoreColor(score)}`}>\r\n                  {score}%\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Feedback */}\r\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Detailed Feedback</h2>\r\n          \r\n          <div className=\"space-y-6\">\r\n            {/* Overall Feedback */}\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Overall Assessment</h3>\r\n              <p className=\"text-gray-700\">{attempt.feedback.overall}</p>\r\n            </div>\r\n\r\n            {/* Strengths */}\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-green-700 mb-2\">✅ Your Strengths</h3>\r\n              <ul className=\"list-disc list-inside space-y-1 text-gray-700\">\r\n                {attempt.feedback.strengths.map((strength, index) => (\r\n                  <li key={index}>{strength}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n\r\n            {/* Areas for Improvement */}\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-orange-700 mb-2\">🔧 Areas for Improvement</h3>\r\n              <ul className=\"list-disc list-inside space-y-1 text-gray-700\">\r\n                {attempt.feedback.areasForImprovement.map((area, index) => (\r\n                  <li key={index}>{area}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n\r\n            {/* Recommendations */}\r\n            <div>\r\n              <h3 className=\"text-lg font-medium text-blue-700 mb-2\">💡 Recommendations</h3>\r\n              <ul className=\"list-disc list-inside space-y-1 text-gray-700\">\r\n                {attempt.feedback.recommendations.map((recommendation, index) => (\r\n                  <li key={index}>{recommendation}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Question Review */}\r\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Question Review</h2>\r\n          <div className=\"space-y-4\">\r\n            {attempt.answers.map((answer, index) => (\r\n              <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\r\n                <div className=\"flex items-start justify-between mb-2\">\r\n                  <span className=\"font-medium text-gray-900\">Question {index + 1}</span>\r\n                  <span className={`text-sm font-medium ${answer.isCorrect ? 'text-green-600' : 'text-red-600'}`}>\r\n                    {answer.isCorrect ? '✅ Correct' : '❌ Incorrect'}\r\n                  </span>\r\n                </div>\r\n                <p className=\"text-gray-700 mb-2\">{answer.question}</p>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\r\n                  <div>\r\n                    <span className=\"font-medium text-gray-600\">Your Answer:</span>\r\n                    <p className=\"text-gray-900\">{Array.isArray(answer.studentAnswer) ? answer.studentAnswer.join(', ') : answer.studentAnswer}</p>\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"font-medium text-gray-600\">Correct Answer:</span>\r\n                    <p className=\"text-gray-900\">{Array.isArray(answer.correctAnswer) ? answer.correctAnswer.join(', ') : answer.correctAnswer}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-2 text-sm text-gray-500\">\r\n                  Points: {answer.points} / {answer.maxPoints}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Action Buttons */}\r\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\r\n            <button\r\n              onClick={() => router.push('/cefr-tests')}\r\n              className=\"px-6 py-3 bg-gray-600 text-white font-medium rounded-md hover:bg-gray-700 transition-colors\"\r\n            >\r\n              Browse More Tests\r\n            </button>\r\n            \r\n            {onRetake && (\r\n              <button\r\n                onClick={onRetake}\r\n                className=\"px-6 py-3 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-colors\"\r\n              >\r\n                Retake Test\r\n              </button>\r\n            )}\r\n            \r\n            <button\r\n              onClick={() => router.push('/dashboard')}\r\n              className=\"px-6 py-3 bg-green-600 text-white font-medium rounded-md hover:bg-green-700 transition-colors\"\r\n            >\r\n              Go to Dashboard\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}; ","import React from 'react';\r\nimport { CEFRTestResults } from '../../../src/features/cefrTesting/view/CEFRTestResults';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { useRouter } from 'next/router';\r\n\r\nexport default function CEFRTestResultPage() {\r\n  const router = useRouter();\r\n  const { attemptId } = router.query;\r\n\r\n  if (!attemptId || typeof attemptId !== 'string') {\r\n    return (\r\n      <DashboardLayout title=\"Invalid Attempt\">\r\n        <div className=\"text-center py-12\">\r\n          <p className=\"text-red-600 text-lg\">Invalid attempt ID</p>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DashboardLayout title=\"Test Results\">\r\n      <CEFRTestResults \r\n        attemptId={attemptId}\r\n        onRetake={() => {\r\n          // Navigate back to the test\r\n          router.push('/cefr-tests');\r\n        }}\r\n      />\r\n    </DashboardLayout>\r\n  );\r\n} "],"names":["window","__NEXT_P","push","__webpack_require__","CEFRTestResults","attemptId","onRetake","param","router","useRouter","attempt","setAttempt","useState","test","setTest","loading","setLoading","useEffect","fetchResults","attemptResponse","testResponse","Promise","all","cefrTestsAPI","getTestAttempt","getTest","split","error","console","getScoreColor","score","getSkillIcon","icons","grammar","reading","writing","speaking","listening","vocabulary","skill","jsx_runtime","jsx","div","className","jsxs","p","scorePercentage","maxScore","isPassed","h1","title","span","concat","colors","A1","A2","B1","B2","C1","C2","cefrLevel","Date","completedAt","toLocaleDateString","toFixed","Math","floor","timeSpent","answers","length","h2","Object","entries","skills","map","h3","feedback","overall","ul","strengths","strength","index","li","areasForImprovement","area","recommendations","recommendation","answer","isCorrect","question","Array","isArray","studentAnswer","join","correctAnswer","points","maxPoints","button","onClick","CEFRTestResultPage","query","DashboardLayout"],"sourceRoot":""}