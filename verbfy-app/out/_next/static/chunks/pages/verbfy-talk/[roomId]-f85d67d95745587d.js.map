{"version":3,"file":"static/chunks/pages/verbfy-talk/[roomId]-f85d67d95745587d.js","mappings":"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","sources":["webpack://_N_E/?9c3e","webpack://_N_E/./src/hooks/useVerbfyTalk.ts","webpack://_N_E/./src/components/voiceChat/VoiceChatRoom.tsx","webpack://_N_E/./pages/verbfy-talk/[roomId].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/verbfy-talk/[roomId]\",\n      function () {\n        return require(\"private-next-pages/verbfy-talk/[roomId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/verbfy-talk/[roomId]\"])\n      });\n    }\n  ","import { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\n\r\ninterface VerbfyTalkRoom {\r\n  _id: string;\r\n  id?: string; // For backward compatibility\r\n  name: string;\r\n  description?: string;\r\n  topic?: string;\r\n  level?: string;\r\n  isPrivate?: boolean;\r\n  maxParticipants: number;\r\n  participants?: any[];\r\n  isActive: boolean;\r\n  createdBy?: any;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\ninterface VerbfyTalkParticipant {\r\n  id: string;\r\n  name: string;\r\n  isSpeaking: boolean;\r\n  isMuted: boolean;\r\n  isSpeaker: boolean;\r\n}\r\n\r\ninterface VerbfyTalkMessage {\r\n  id: string;\r\n  content: string;\r\n  sender: string;\r\n  senderName: string;\r\n  timestamp: number;\r\n}\r\n\r\ninterface UseVerbfyTalkReturn {\r\n  // Room management\r\n  rooms: VerbfyTalkRoom[];\r\n  currentRoom: VerbfyTalkRoom | null;\r\n  joinRoom: (roomId: string) => Promise<boolean>;\r\n  leaveRoom: () => void;\r\n  createRoom: (name: string) => Promise<string | null>;\r\n  \r\n  // Audio controls\r\n  isMuted: boolean;\r\n  isSpeaker: boolean;\r\n  isConnected: boolean;\r\n  toggleMute: () => void;\r\n  toggleSpeaker: () => void;\r\n  requestMicrophone: () => Promise<boolean>;\r\n  \r\n  // Media streams\r\n  localStream: MediaStream | null;\r\n  remoteStreams: { [peerId: string]: MediaStream };\r\n  \r\n  // Participants and messages\r\n  participants: VerbfyTalkParticipant[];\r\n  messages: VerbfyTalkMessage[];\r\n  sendMessage: (content: string) => void;\r\n  \r\n  // Connection status\r\n  isConnecting: boolean;\r\n  connectionError: string | null;\r\n  reconnectionAttempts: number;\r\n  status: 'disconnected' | 'connecting' | 'connected' | 'error';\r\n  isInitialized: boolean;\r\n  \r\n  // Socket instance\r\n  socket: Socket | null;\r\n  \r\n  // Cleanup\r\n  disconnect: () => void;\r\n}\r\n\r\n// WebRTC Configuration\r\nconst WEBRTC_CONFIG: RTCConfiguration = {\r\n  iceServers: [\r\n    { urls: 'stun:stun.l.google.com:19302' },\r\n    { urls: 'stun:stun1.l.google.com:19302' },\r\n    { urls: 'stun:stun2.l.google.com:19302' },\r\n    { urls: 'stun:stun3.l.google.com:19302' },\r\n    { urls: 'stun:stun4.l.google.com:19302' }\r\n  ],\r\n  iceCandidatePoolSize: 10\r\n};\r\n\r\n// Microphone error types\r\nconst MICROPHONE_ERRORS = {\r\n  NotAllowedError: 'Microphone permission denied. Please allow microphone access in your browser settings.',\r\n  NotFoundError: 'No microphone found. Please connect a microphone and try again.',\r\n  NotSupportedError: 'Microphone not supported in this browser.',\r\n  NotReadableError: 'Microphone is already in use by another application.',\r\n  AbortError: 'Microphone access was aborted.',\r\n  SecurityError: 'Microphone access blocked due to security restrictions.',\r\n  InvalidStateError: 'Microphone is in an invalid state.',\r\n  UnknownError: 'Unknown microphone error occurred.'\r\n} as const;\r\n\r\nexport const useVerbfyTalk = (token: string): UseVerbfyTalkReturn => {\r\n  const [rooms, setRooms] = useState<VerbfyTalkRoom[]>([]);\r\n  const [currentRoom, setCurrentRoom] = useState<VerbfyTalkRoom | null>(null);\r\n  const [participants, setParticipants] = useState<VerbfyTalkParticipant[]>([]);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isSpeaker, setIsSpeaker] = useState(false);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [connectionError, setConnectionError] = useState<string | null>(null);\r\n  const [reconnectionAttempts, setReconnectionAttempts] = useState(0);\r\n  const [remoteStreams, setRemoteStreams] = useState<{ [peerId: string]: MediaStream }>({});\r\n  const [status, setStatus] = useState<'disconnected' | 'connecting' | 'connected' | 'error'>('disconnected');\r\n  const [messages, setMessages] = useState<VerbfyTalkMessage[]>([]);\r\n  \r\n  // Refs\r\n  const socketRef = useRef<Socket | null>(null);\r\n  const localStreamRef = useRef<MediaStream | null>(null);\r\n  const peerConnectionsRef = useRef<Map<string, RTCPeerConnection>>(new Map());\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const gainNodeRef = useRef<GainNode | null>(null);\r\n  const sourceNodeRef = useRef<MediaStreamAudioSourceNode | null>(null);\r\n  const iceCandidateBufferRef = useRef<Map<string, RTCIceCandidateInit[]>>(new Map());\r\n  const vadIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const isInitializedRef = useRef(false);\r\n\r\n  // Voice Activity Detection\r\n  const startVAD = useCallback(() => {\r\n    if (!localStreamRef.current || vadIntervalRef.current) return;\r\n\r\n    const audioTrack = localStreamRef.current.getAudioTracks()[0];\r\n    if (!audioTrack) return;\r\n\r\n    // Simple VAD using audio levels\r\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n    const source = audioContext.createMediaStreamSource(localStreamRef.current);\r\n    const analyser = audioContext.createAnalyser();\r\n    const dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n    source.connect(analyser);\r\n    analyser.fftSize = 256;\r\n\r\n    vadIntervalRef.current = setInterval(() => {\r\n      analyser.getByteFrequencyData(dataArray);\r\n      const average = dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;\r\n      const isSpeaking = average > 30; // Threshold for voice activity\r\n\r\n             // Update local speaking state\r\n       if (socketRef.current?.connected && currentRoom) {\r\n         socketRef.current.emit('participant:speaking', {\r\n           roomId: currentRoom._id,\r\n           isSpeaking\r\n         });\r\n       }\r\n    }, 100);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (vadIntervalRef.current) {\r\n        clearInterval(vadIntervalRef.current);\r\n        vadIntervalRef.current = null;\r\n      }\r\n      source.disconnect();\r\n      analyser.disconnect();\r\n      audioContext.close();\r\n    };\r\n  }, [currentRoom]);\r\n\r\n  // Stop VAD\r\n  const stopVAD = useCallback(() => {\r\n    if (vadIntervalRef.current) {\r\n      clearInterval(vadIntervalRef.current);\r\n      vadIntervalRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Initialize Socket.IO connection\r\n  const initializeSocket = useCallback(async () => {\r\n    if (!token || isInitializedRef.current || socketRef.current?.connected) return;\r\n    \r\n    try {\r\n      setIsConnecting(true);\r\n      setStatus('connecting');\r\n      setConnectionError(null);\r\n      setReconnectionAttempts(0);\r\n      \r\n      // Cleanup existing socket if any\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n      }\r\n      \r\n      const socket = io(`${process.env.NEXT_PUBLIC_BACKEND_URL || 'https://api.verbfy.com'}/verbfy-talk`, {\r\n        path: '/socket.io',\r\n        transports: ['polling', 'websocket'], // Start with polling, upgrade to websocket\r\n        forceNew: true, // Force new connection for VerbfyTalk\r\n        withCredentials: true,\r\n        auth: { token },\r\n        timeout: 20000,\r\n        reconnectionAttempts: 5,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        upgrade: true,\r\n        rememberUpgrade: true\r\n      });\r\n      \r\n                   socket.on('connect', () => {\r\n        setIsConnected(true);\r\n        setIsConnecting(false);\r\n        setStatus('connected');\r\n        setConnectionError(null);\r\n        setReconnectionAttempts(0);\r\n        isInitializedRef.current = true;\r\n      });\r\n      \r\n                   socket.on('disconnect', (reason) => {\r\n        setIsConnected(false);\r\n        setStatus('disconnected');\r\n        setCurrentRoom(null);\r\n        setParticipants([]);\r\n        stopVAD();\r\n        \r\n        // Cleanup peer connections on disconnect\r\n        peerConnectionsRef.current.forEach(connection => connection.close());\r\n        peerConnectionsRef.current.clear();\r\n        iceCandidateBufferRef.current.clear();\r\n      });\r\n      \r\n                   socket.on('connect_error', (error) => {\r\n        setStatus('error');\r\n        setConnectionError(`Connection failed: ${error.message}`);\r\n        setIsConnecting(false);\r\n      });\r\n\r\n      socket.on('reconnect_attempt', (attemptNumber) => {\r\n        setStatus('connecting');\r\n        setReconnectionAttempts(attemptNumber);\r\n        setConnectionError(`Reconnecting... (Attempt ${attemptNumber}/5)`);\r\n      });\r\n\r\n      socket.on('reconnect', (attemptNumber) => {\r\n        setStatus('connected');\r\n        setConnectionError(null);\r\n        setReconnectionAttempts(0);\r\n      });\r\n\r\n      socket.on('reconnect_failed', () => {\r\n        setStatus('error');\r\n        setConnectionError('Failed to reconnect. Please refresh the page.');\r\n        setIsConnecting(false);\r\n      });\r\n      \r\n      // Room events\r\n      socket.on('rooms:list', (roomsList: VerbfyTalkRoom[]) => {\r\n        setRooms(roomsList);\r\n      });\r\n      \r\n      socket.on('room:joined', (room: VerbfyTalkRoom) => {\r\n        setCurrentRoom(room);\r\n      });\r\n      \r\n      socket.on('room:left', () => {\r\n        setCurrentRoom(null);\r\n        setParticipants([]);\r\n        stopVAD();\r\n      });\r\n      \r\n      // Participant events with proper state management\r\n      socket.on('participants:update', (participantsList: VerbfyTalkParticipant[]) => {\r\n        setParticipants(participantsList);\r\n      });\r\n      \r\n      socket.on('participant:joined', (participant: VerbfyTalkParticipant) => {\r\n        setParticipants(prev => [...prev, participant]);\r\n      });\r\n      \r\n      socket.on('participant:left', (participantId: string) => {\r\n        setParticipants(prev => prev.filter(p => p.id !== participantId));\r\n        \r\n        // Cleanup peer connection for this participant\r\n        const peerConnection = peerConnectionsRef.current.get(participantId);\r\n        if (peerConnection) {\r\n          peerConnection.close();\r\n          peerConnectionsRef.current.delete(participantId);\r\n        }\r\n        \r\n        // Clear ICE candidate buffer for this participant\r\n        iceCandidateBufferRef.current.delete(participantId);\r\n        \r\n        // Remove remote stream for this participant\r\n        setRemoteStreams(prev => {\r\n          const newStreams = { ...prev };\r\n          delete newStreams[participantId];\r\n          return newStreams;\r\n        });\r\n      });\r\n\r\n      socket.on('participant:mute', (data: { participantId: string; isMuted: boolean }) => {\r\n        setParticipants(prev => \r\n          prev.map(p => \r\n            p.id === data.participantId \r\n              ? { ...p, isMuted: data.isMuted }\r\n              : p\r\n          )\r\n        );\r\n      });\r\n\r\n      socket.on('participant:speaking', (data: { participantId: string; isSpeaking: boolean }) => {\r\n        setParticipants(prev => \r\n          prev.map(p => \r\n            p.id === data.participantId \r\n              ? { ...p, isSpeaking: data.isSpeaking }\r\n              : p\r\n          )\r\n        );\r\n      });\r\n      \r\n      // WebRTC signaling with error handling\r\n      socket.on('webrtc:offer', async (data: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n        try {\r\n          await handleWebRTCOffer(data.from, data.offer);\r\n        } catch (error) {\r\n          console.error('❌ WebRTC offer handling failed:', error);\r\n          setConnectionError('Failed to establish voice connection');\r\n        }\r\n      });\r\n      \r\n      socket.on('webrtc:answer', async (data: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n        try {\r\n          await handleWebRTCAnswer(data.from, data.answer);\r\n        } catch (error) {\r\n          console.error('❌ WebRTC answer handling failed:', error);\r\n          setConnectionError('Failed to complete voice connection');\r\n        }\r\n      });\r\n      \r\n      socket.on('webrtc:ice-candidate', async (data: { from: string; candidate: RTCIceCandidateInit }) => {\r\n        try {\r\n          await handleICECandidate(data.from, data.candidate);\r\n        } catch (error) {\r\n          console.error('❌ ICE candidate handling failed:', error);\r\n          // Buffer the candidate for later if connection not ready\r\n          const buffer = iceCandidateBufferRef.current.get(data.from) || [];\r\n          buffer.push(data.candidate);\r\n          iceCandidateBufferRef.current.set(data.from, buffer);\r\n        }\r\n      });\r\n      \r\n      socketRef.current = socket;\r\n      \r\n      // Request rooms list\r\n      socket.emit('rooms:get');\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Failed to initialize VerbfyTalk:', error);\r\n      setConnectionError(error instanceof Error ? error.message : 'Unknown error');\r\n      setIsConnecting(false);\r\n    }\r\n  }, [token, stopVAD]);\r\n  \r\n  // WebRTC handlers with improved error handling\r\n  const handleWebRTCOffer = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = new RTCPeerConnection(WEBRTC_CONFIG);\r\n      \r\n      peerConnectionsRef.current.set(from, peerConnection);\r\n      \r\n      // Add local stream if available\r\n      if (localStreamRef.current) {\r\n        localStreamRef.current.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, localStreamRef.current!);\r\n        });\r\n      }\r\n      \r\n      // Handle ICE candidates\r\n      peerConnection.onicecandidate = (event) => {\r\n        if (event.candidate && socketRef.current?.connected) {\r\n          socketRef.current.emit('webrtc:ice-candidate', {\r\n            to: from,\r\n            candidate: event.candidate\r\n          });\r\n        }\r\n      };\r\n\r\n      peerConnection.onconnectionstatechange = () => {\r\n        if (peerConnection.connectionState === 'failed') {\r\n          peerConnection.close();\r\n          peerConnectionsRef.current.delete(from);\r\n        }\r\n      };\r\n\r\n      peerConnection.oniceconnectionstatechange = () => {\r\n        // ICE connection state changed\r\n      };\r\n\r\n      // Handle incoming remote streams\r\n      peerConnection.ontrack = (event) => {\r\n        setRemoteStreams(prev => ({\r\n          ...prev,\r\n          [from]: event.streams[0]\r\n        }));\r\n      };\r\n      \r\n      await peerConnection.setRemoteDescription(offer);\r\n      const answer = await peerConnection.createAnswer();\r\n      await peerConnection.setLocalDescription(answer);\r\n      \r\n      socketRef.current?.emit('webrtc:answer', { to: from, answer });\r\n      \r\n      // Process buffered ICE candidates\r\n      const bufferedCandidates = iceCandidateBufferRef.current.get(from) || [];\r\n      for (const candidate of bufferedCandidates) {\r\n        try {\r\n          await peerConnection.addIceCandidate(candidate);\r\n        } catch (error) {\r\n          console.warn('Failed to add buffered ICE candidate:', error);\r\n        }\r\n      }\r\n      iceCandidateBufferRef.current.delete(from);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ WebRTC offer handling failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  const handleWebRTCAnswer = async (from: string, answer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection && peerConnection.signalingState !== 'closed') {\r\n        await peerConnection.setRemoteDescription(answer);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ WebRTC answer handling failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  const handleICECandidate = async (from: string, candidate: RTCIceCandidateInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection && peerConnection.remoteDescription) {\r\n        await peerConnection.addIceCandidate(candidate);\r\n      } else {\r\n        // Buffer candidate if connection not ready\r\n        const buffer = iceCandidateBufferRef.current.get(from) || [];\r\n        buffer.push(candidate);\r\n        iceCandidateBufferRef.current.set(from, buffer);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ ICE candidate handling failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Room management\r\n  const joinRoom = useCallback(async (roomId: string): Promise<boolean> => {\r\n    if (!socketRef.current?.connected) {\r\n      setConnectionError('Not connected to server');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      socketRef.current.emit('room:join', { roomId });\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Failed to join room:', error);\r\n      setConnectionError('Failed to join room');\r\n      return false;\r\n    }\r\n  }, []);\r\n  \r\n  const leaveRoom = useCallback(() => {\r\n    if (!socketRef.current?.connected || !currentRoom) return;\r\n    \r\n         socketRef.current.emit('room:leave', { roomId: currentRoom._id });\r\n    stopVAD();\r\n  }, [currentRoom, stopVAD]);\r\n  \r\n  const createRoom = useCallback(async (name: string): Promise<string | null> => {\r\n    if (!socketRef.current?.connected) {\r\n      setConnectionError('Not connected to server');\r\n      return null;\r\n    }\r\n    \r\n    try {\r\n      return new Promise((resolve) => {\r\n        const timeout = setTimeout(() => {\r\n          resolve(null);\r\n        }, 10000); // 10 second timeout\r\n        \r\n        socketRef.current?.emit('room:create', { name }, (response: { success: boolean; roomId?: string }) => {\r\n          clearTimeout(timeout);\r\n          if (response.success && response.roomId) {\r\n            resolve(response.roomId);\r\n          } else {\r\n            resolve(null);\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('❌ Failed to create room:', error);\r\n      setConnectionError('Failed to create room');\r\n      return null;\r\n    }\r\n  }, []);\r\n  \r\n  // Audio controls with unified mute logic\r\n  const requestMicrophone = useCallback(async (): Promise<boolean> => {\r\n    try {\r\n      // Check if getUserMedia is supported\r\n      if (!navigator.mediaDevices?.getUserMedia) {\r\n        throw new Error('getUserMedia is not supported in this browser');\r\n      }\r\n\r\n      // Check permission status first\r\n      let permissionStatus = 'unknown';\r\n      try {\r\n        if (navigator.permissions?.query) {\r\n          const result = await navigator.permissions.query({ \r\n            name: 'microphone' as PermissionName \r\n          });\r\n          permissionStatus = result.state;\r\n        }\r\n      } catch (error) {\r\n        // Could not check permission status, proceeding with getUserMedia\r\n      }\r\n\r\n      // Request microphone access\r\n      const stream = await navigator.mediaDevices.getUserMedia({ \r\n        audio: {\r\n          echoCancellation: true,\r\n          noiseSuppression: true,\r\n          autoGainControl: true,\r\n          sampleRate: 44100\r\n        }, \r\n        video: false \r\n      });\r\n      \r\n      localStreamRef.current = stream;\r\n      \r\n      // Set up audio context for volume control\r\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      const source = audioContext.createMediaStreamSource(stream);\r\n      const gainNode = audioContext.createGain();\r\n      \r\n      source.connect(gainNode);\r\n      gainNode.connect(audioContext.destination);\r\n      \r\n      // Store references\r\n      audioContextRef.current = audioContext;\r\n      sourceNodeRef.current = source;\r\n      gainNodeRef.current = gainNode;\r\n      \r\n      // Mute initially using gain node\r\n      gainNode.gain.value = 0;\r\n      setIsMuted(true);\r\n      \r\n      return true;\r\n      \r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    } catch (error: any) {\r\n      console.error('❌ Microphone error:', error);\r\n      \r\n      const errorMessage = MICROPHONE_ERRORS[error.name as keyof typeof MICROPHONE_ERRORS] || \r\n                          MICROPHONE_ERRORS.UnknownError;\r\n      \r\n      setConnectionError(errorMessage);\r\n      return false;\r\n    }\r\n  }, []);\r\n  \r\n  const toggleMute = useCallback(() => {\r\n    if (!localStreamRef.current || !gainNodeRef.current) return;\r\n\r\n    const newMutedState = !isMuted;\r\n    setIsMuted(newMutedState);\r\n    \r\n    // Use gain node for mute/unmute (more reliable than track.enabled)\r\n    gainNodeRef.current.gain.value = newMutedState ? 0 : 1;\r\n    \r\n    // Also update track enabled state for WebRTC\r\n    const audioTrack = localStreamRef.current.getAudioTracks()[0];\r\n    if (audioTrack) {\r\n      audioTrack.enabled = !newMutedState;\r\n    }\r\n    \r\n         // Notify other participants\r\n     socketRef.current?.emit('participant:mute', { \r\n       roomId: currentRoom?._id, \r\n       isMuted: newMutedState \r\n     });\r\n  }, [isMuted, currentRoom]);\r\n  \r\n  const toggleSpeaker = useCallback(() => {\r\n    const newSpeakerState = !isSpeaker;\r\n    setIsSpeaker(newSpeakerState);\r\n    \r\n         // Notify other participants\r\n     socketRef.current?.emit('participant:speaker', { \r\n       roomId: currentRoom?._id, \r\n       isSpeaker: newSpeakerState \r\n     });\r\n  }, [isSpeaker, currentRoom]);\r\n  \r\n  const sendMessage = useCallback((content: string) => {\r\n    if (!socketRef.current || !currentRoom) return;\r\n    \r\n    const message: VerbfyTalkMessage = {\r\n      id: Date.now().toString(),\r\n      content,\r\n      sender: 'current-user', // This should be replaced with actual user ID\r\n      senderName: 'You', // This should be replaced with actual user name\r\n      timestamp: Date.now()\r\n    };\r\n    \r\n    // Add message to local state\r\n    setMessages(prev => [...prev, message]);\r\n    \r\n         // Send via socket\r\n     socketRef.current.emit('send-room-message', {\r\n       roomId: currentRoom._id,\r\n       content,\r\n       timestamp: Date.now()\r\n     });\r\n  }, [currentRoom]);\r\n  \r\n  // Comprehensive cleanup\r\n  const disconnect = useCallback(() => {\r\n    \r\n    // Stop VAD\r\n    stopVAD();\r\n    \r\n    // Stop local stream\r\n    if (localStreamRef.current) {\r\n      localStreamRef.current.getTracks().forEach(track => {\r\n        track.stop();\r\n      });\r\n      localStreamRef.current = null;\r\n    }\r\n    \r\n    // Close audio context\r\n    if (audioContextRef.current) {\r\n      audioContextRef.current.close();\r\n      audioContextRef.current = null;\r\n    }\r\n    \r\n    // Disconnect audio nodes\r\n    if (sourceNodeRef.current) {\r\n      sourceNodeRef.current.disconnect();\r\n      sourceNodeRef.current = null;\r\n    }\r\n    gainNodeRef.current = null;\r\n    \r\n    // Close peer connections\r\n    peerConnectionsRef.current.forEach(connection => {\r\n      connection.close();\r\n    });\r\n    peerConnectionsRef.current.clear();\r\n    \r\n    // Clear ICE candidate buffers\r\n    iceCandidateBufferRef.current.clear();\r\n    \r\n    // Disconnect socket\r\n    if (socketRef.current) {\r\n      socketRef.current.disconnect();\r\n      socketRef.current = null;\r\n    }\r\n    \r\n             // Reset state\r\n    setIsConnected(false);\r\n    setIsConnecting(false);\r\n    setStatus('disconnected');\r\n    setCurrentRoom(null);\r\n    setParticipants([]);\r\n    setRemoteStreams({});\r\n    setMessages([]);\r\n    setConnectionError(null);\r\n    setReconnectionAttempts(0);\r\n    setIsMuted(false);\r\n    setIsSpeaker(false);\r\n    isInitializedRef.current = false;\r\n  }, [stopVAD]);\r\n  \r\n  // Initialize on mount\r\n  useEffect(() => {\r\n    if (token && !isInitializedRef.current) {\r\n      initializeSocket();\r\n    }\r\n    \r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [token, initializeSocket, disconnect]);\r\n  \r\n  // Start VAD when microphone is available and in room\r\n  useEffect(() => {\r\n    if (localStreamRef.current && currentRoom && isConnected) {\r\n      const cleanup = startVAD();\r\n      return cleanup;\r\n    }\r\n  }, [currentRoom, isConnected, startVAD]);\r\n  \r\n  return {\r\n    rooms,\r\n    currentRoom,\r\n    joinRoom,\r\n    leaveRoom,\r\n    createRoom,\r\n    isMuted,\r\n    isSpeaker,\r\n    isConnected,\r\n    toggleMute,\r\n    toggleSpeaker,\r\n    requestMicrophone,\r\n    localStream: localStreamRef.current,\r\n    remoteStreams,\r\n    participants,\r\n    messages,\r\n    sendMessage,\r\n    isConnecting,\r\n    connectionError,\r\n    reconnectionAttempts,\r\n    status,\r\n    isInitialized: isInitializedRef.current,\r\n    socket: socketRef.current,\r\n    disconnect\r\n  };\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useVerbfyTalk } from '@/hooks/useVerbfyTalk';\r\nimport { useAuthContext } from '@/context/AuthContext';\r\nimport { toast } from 'react-hot-toast';\r\n// Socket import removed - using from useVerbfyTalk hook\r\nimport {\r\n  MicrophoneIcon,\r\n  SpeakerWaveIcon,\r\n  SpeakerXMarkIcon,\r\n  ChatBubbleLeftRightIcon,\r\n  UsersIcon,\r\n  ArrowLeftIcon\r\n} from '@heroicons/react/24/outline';\r\n\r\ninterface VoiceChatRoomProps {\r\n  roomId: string;\r\n  onLeave: () => void;\r\n}\r\n\r\n\r\n\r\nexport default function VoiceChatRoom({ roomId, onLeave }: VoiceChatRoomProps) {\r\n  const { user } = useAuthContext();\r\n  \r\n  // Voice chat socket (using VerbfyTalk socket)\r\n  // Socket is now provided by useVerbfyTalk hook\r\n  \r\n  // Room state\r\n  const [showChat, setShowChat] = useState(true);\r\n  const [showParticipants, setShowParticipants] = useState(false);\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [roomInfo, setRoomInfo] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // VerbfyTalk setup\r\n  const {\r\n    localStream,\r\n    remoteStreams,\r\n    isMuted,\r\n    isSpeaker,\r\n    toggleMute,\r\n    toggleSpeaker,\r\n    status,\r\n    connectionError,\r\n    isInitialized,\r\n    participants: verbfyParticipants,\r\n    messages: verbfyMessages,\r\n    sendMessage: sendVerbfyMessage,\r\n    joinRoom,\r\n    leaveRoom: leaveVerbfyRoom,\r\n    socket: voiceSocket,\r\n  } = useVerbfyTalk(localStorage.getItem('token') || '');\r\n\r\n  // Refs\r\n  const localVideoRef = useRef<HTMLVideoElement>(null);\r\n  const chatContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Initialize room\r\n  useEffect(() => {\r\n    if (user && roomId) {\r\n      initializeRoom();\r\n    }\r\n  }, [user, roomId]);\r\n\r\n  // Update local video stream\r\n  useEffect(() => {\r\n    if (localVideoRef.current && localStream) {\r\n      localVideoRef.current.srcObject = localStream;\r\n    }\r\n  }, [localStream]);\r\n\r\n  // Auto-scroll chat\r\n  useEffect(() => {\r\n    if (chatContainerRef.current) {\r\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n    }\r\n  }, [verbfyMessages]);\r\n\r\n  const initializeRoom = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Join room via VerbfyTalk\r\n      await joinRoom(roomId);\r\n      \r\n      // Set room info from current room\r\n      if (verbfyParticipants.length > 0) {\r\n        setRoomInfo({ name: `Room ${roomId}`, participants: verbfyParticipants.length });\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Failed to initialize room:', error);\r\n      toast.error('Failed to join room');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (chatMessage.trim()) {\r\n      sendVerbfyMessage(chatMessage);\r\n      setChatMessage('');\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleLeaveRoom = () => {\r\n    leaveVerbfyRoom();\r\n    onLeave();\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"mt-4 text-gray-600\">Joining room...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (connectionError) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-red-500 mb-4\">Failed to join room: {connectionError}</p>\r\n          <button\r\n            onClick={handleLeaveRoom}\r\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg\"\r\n          >\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-screen flex flex-col bg-gray-900\">\r\n      {/* Header */}\r\n      <div className=\"bg-gray-800 p-4 flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <button\r\n            onClick={handleLeaveRoom}\r\n            className=\"text-gray-300 hover:text-white p-2 rounded-lg hover:bg-gray-700\"\r\n          >\r\n            <ArrowLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <div>\r\n            <h1 className=\"text-white font-semibold text-lg\">\r\n              {roomInfo?.name || `Room ${roomId}`}\r\n            </h1>\r\n            <p className=\"text-gray-400 text-sm\">\r\n              {verbfyParticipants.length} participants\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center gap-2\">\r\n          <button\r\n            onClick={() => setShowParticipants(!showParticipants)}\r\n            className={`p-2 rounded-lg ${\r\n              showParticipants ? 'bg-blue-600 text-white' : 'text-gray-300 hover:text-white hover:bg-gray-700'\r\n            }`}\r\n          >\r\n            <UsersIcon className=\"w-5 h-5\" />\r\n          </button>\r\n          <button\r\n            onClick={() => setShowChat(!showChat)}\r\n            className={`p-2 rounded-lg ${\r\n              showChat ? 'bg-blue-600 text-white' : 'text-gray-300 hover:text-white hover:bg-gray-700'\r\n            }`}\r\n          >\r\n            <ChatBubbleLeftRightIcon className=\"w-5 h-5\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex-1 flex\">\r\n        {/* Video Grid */}\r\n        <div className=\"flex-1 p-4\">\r\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 h-full\">\r\n            {/* Local Video */}\r\n            <div className=\"relative bg-gray-800 rounded-lg overflow-hidden\">\r\n              <video\r\n                ref={localVideoRef}\r\n                autoPlay\r\n                muted\r\n                playsInline\r\n                className=\"w-full h-full object-cover\"\r\n              />\r\n              <div className=\"absolute bottom-2 left-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded\">\r\n                {user?.name} (You)\r\n              </div>\r\n              {isMuted && (\r\n                <div className=\"absolute top-2 left-2 bg-red-500 text-white p-1 rounded\">\r\n                  <MicrophoneIcon className=\"w-4 h-4\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Remote Videos */}\r\n            {verbfyParticipants.filter(p => p.id !== user?.id).map((participant) => (\r\n              <div key={participant.id} className=\"relative bg-gray-800 rounded-lg overflow-hidden\">\r\n                <div className=\"w-full h-full flex items-center justify-center\">\r\n                  <div className=\"text-center\">\r\n                    <div className=\"w-16 h-16 bg-gray-600 rounded-full flex items-center justify-center mx-auto mb-2\">\r\n                      <span className=\"text-white text-lg font-semibold\">\r\n                        {participant.name.charAt(0).toUpperCase()}\r\n                      </span>\r\n                    </div>\r\n                    <p className=\"text-white text-sm\">{participant.name}</p>\r\n                    {participant.isSpeaking && (\r\n                      <div className=\"mt-1\">\r\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mx-auto animate-pulse\"></div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                {participant.isMuted && (\r\n                  <div className=\"absolute top-2 left-2 bg-red-500 text-white p-1 rounded\">\r\n                    <MicrophoneIcon className=\"w-4 h-4\" />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Sidebar */}\r\n        <div className=\"w-80 bg-gray-800 border-l border-gray-700\">\r\n          {/* Participants */}\r\n          {showParticipants && (\r\n            <div className=\"p-4 border-b border-gray-700\">\r\n              <h3 className=\"text-white font-semibold mb-3\">Participants</h3>\r\n              <div className=\"space-y-2\">\r\n                {verbfyParticipants.map((participant) => (\r\n                  <div key={participant.id} className=\"flex items-center gap-3 p-2 rounded bg-gray-700\">\r\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\r\n                      <span className=\"text-white text-sm font-semibold\">\r\n                        {participant.name.charAt(0).toUpperCase()}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <p className=\"text-white text-sm\">\r\n                        {participant.name}\r\n                        {participant.id === user?.id && ' (You)'}\r\n                      </p>\r\n                      <p className=\"text-gray-400 text-xs\">\r\n                        {participant.isSpeaker ? 'Speaker' : 'Listener'}\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"flex gap-1\">\r\n                      <MicrophoneIcon className={`w-4 h-4 ${!participant.isMuted ? 'text-green-500' : 'text-red-500'}`} />\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Chat */}\r\n          {showChat && (\r\n            <div className=\"flex-1 flex flex-col h-full\">\r\n              <div className=\"p-4 border-b border-gray-700\">\r\n                <h3 className=\"text-white font-semibold\">Chat</h3>\r\n              </div>\r\n              \r\n              <div className=\"flex-1 overflow-y-auto p-4\" ref={chatContainerRef}>\r\n                <div className=\"space-y-3\">\r\n                  {verbfyMessages.map((message, index) => (\r\n                    <div key={index} className=\"bg-gray-700 rounded-lg p-3\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <span className=\"text-blue-400 text-sm font-semibold\">\r\n                          {message.sender === user?.id ? 'You' : message.senderName}\r\n                        </span>\r\n                        <span className=\"text-gray-400 text-xs\">\r\n                          {new Date(message.timestamp).toLocaleTimeString()}\r\n                        </span>\r\n                      </div>\r\n                      <p className=\"text-white text-sm\">{message.content}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"p-4 border-t border-gray-700\">\r\n                <form onSubmit={handleSendMessage} className=\"flex gap-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={chatMessage}\r\n                    onChange={(e) => setChatMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                    className=\"flex-1 bg-gray-700 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  />\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg\"\r\n                  >\r\n                    Send\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div className=\"bg-gray-800 p-4 flex items-center justify-center gap-4\">\r\n        <button\r\n          onClick={toggleMute}\r\n          className={`p-3 rounded-full ${\r\n            !isMuted ? 'bg-gray-600 text-white' : 'bg-red-500 text-white'\r\n          } hover:opacity-80 transition-colors`}\r\n        >\r\n          <MicrophoneIcon className=\"w-6 h-6\" />\r\n        </button>\r\n\r\n        <button\r\n          onClick={toggleSpeaker}\r\n          className={`p-3 rounded-full ${\r\n            isSpeaker ? 'bg-blue-600 text-white' : 'bg-gray-600 text-white'\r\n          } hover:opacity-80 transition-colors`}\r\n        >\r\n          {isSpeaker ? (\r\n            <SpeakerWaveIcon className=\"w-6 h-6\" />\r\n          ) : (\r\n            <SpeakerXMarkIcon className=\"w-6 h-6\" />\r\n          )}\r\n        </button>\r\n\r\n        <button\r\n          onClick={handleLeaveRoom}\r\n          className=\"bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n        >\r\n          Leave Room\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport VoiceChatRoom from '@/components/voiceChat/VoiceChatRoom';\r\n\r\nexport default function VerbfyTalkRoom() {\r\n  const router = useRouter();\r\n  const { roomId } = router.query as { roomId?: string };\r\n\r\n  const handleLeaveRoom = () => {\r\n    router.push('/verbfy-talk');\r\n  };\r\n\r\n  if (!roomId) {\r\n    return (\r\n      <DashboardLayout title=\"VerbfyTalk\">\r\n        <div className=\"flex items-center justify-center min-h-screen\">\r\n          <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Room Not Found</h1>\r\n            <p className=\"text-gray-600 mb-6\">The room you're looking for doesn't exist.</p>\r\n            <button\r\n              onClick={() => router.push('/verbfy-talk')}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n            >\r\n              Back to Rooms\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>VerbfyTalk Room - {roomId}</title>\r\n        <meta name=\"description\" content=\"Join the conversation in VerbfyTalk\" />\r\n      </Head>\r\n      \r\n      <DashboardLayout title={`VerbfyTalk Room: ${roomId}`}>\r\n        <VoiceChatRoom roomId={roomId} onLeave={handleLeaveRoom} />\r\n      </DashboardLayout>\r\n    </>\r\n  );\r\n}"],"names":["window","__NEXT_P","push","__webpack_require__","WEBRTC_CONFIG","iceServers","urls","iceCandidatePoolSize","MICROPHONE_ERRORS","NotAllowedError","NotFoundError","NotSupportedError","NotReadableError","AbortError","SecurityError","InvalidStateError","UnknownError","useVerbfyTalk","rooms","setRooms","useState","currentRoom","setCurrentRoom","participants","setParticipants","isMuted","setIsMuted","isSpeaker","setIsSpeaker","isConnected","setIsConnected","isConnecting","setIsConnecting","connectionError","setConnectionError","reconnectionAttempts","setReconnectionAttempts","remoteStreams","setRemoteStreams","status","setStatus","messages","setMessages","socketRef","useRef","localStreamRef","peerConnectionsRef","Map","audioContextRef","gainNodeRef","sourceNodeRef","iceCandidateBufferRef","vadIntervalRef","isInitializedRef","startVAD","useCallback","current","getAudioTracks","audioContext","AudioContext","webkitAudioContext","source","createMediaStreamSource","analyser","createAnalyser","dataArray","Uint8Array","frequencyBinCount","connect","fftSize","setInterval","getByteFrequencyData","average","reduce","sum","value","length","connected","emit","roomId","_id","isSpeaking","clearInterval","disconnect","close","stopVAD","initializeSocket","socket","io","concat","process","env","NEXT_PUBLIC_BACKEND_URL","path","transports","forceNew","withCredentials","auth","token","timeout","reconnectionDelay","reconnectionDelayMax","upgrade","rememberUpgrade","on","forEach","connection","clear","error","message","attemptNumber","roomsList","room","participantsList","prev","participant","filter","p","id","participantId","peerConnection","get","delete","newStreams","map","data","handleWebRTCOffer","from","offer","console","handleWebRTCAnswer","answer","handleICECandidate","candidate","buffer","set","Error","RTCPeerConnection","getTracks","track","addTrack","onicecandidate","event","to","onconnectionstatechange","connectionState","oniceconnectionstatechange","ontrack","streams","setRemoteDescription","createAnswer","setLocalDescription","addIceCandidate","warn","signalingState","remoteDescription","joinRoom","leaveRoom","createRoom","name","Promise","setTimeout","resolve","clearTimeout","response","success","requestMicrophone","navigator","mediaDevices","getUserMedia","permissions","query","result","state","stream","audio","echoCancellation","noiseSuppression","autoGainControl","sampleRate","video","gainNode","createGain","destination","gain","toggleMute","newMutedState","audioTrack","enabled","toggleSpeaker","newSpeakerState","sendMessage","Date","now","toString","content","sender","senderName","timestamp","stop","useEffect","localStream","isInitialized","VoiceChatRoom","param","onLeave","user","useAuthContext","showChat","setShowChat","showParticipants","setShowParticipants","chatMessage","setChatMessage","roomInfo","setRoomInfo","isLoading","setIsLoading","verbfyParticipants","verbfyMessages","sendVerbfyMessage","leaveVerbfyRoom","voiceSocket","localStorage","getItem","localVideoRef","chatContainerRef","initializeRoom","srcObject","scrollTop","scrollHeight","toast","handleLeaveRoom","jsx_runtime","jsx","div","className","jsxs","button","onClick","ArrowLeftIcon","h1","UsersIcon","ChatBubbleLeftRightIcon","ref","autoPlay","muted","playsInline","MicrophoneIcon","span","charAt","toUpperCase","h3","index","toLocaleTimeString","form","onSubmit","e","preventDefault","trim","input","type","onChange","target","placeholder","SpeakerWaveIcon","SpeakerXMarkIcon","VerbfyTalkRoom","router","useRouter","Fragment","Head","title","meta","DashboardLayout"],"sourceRoot":""}