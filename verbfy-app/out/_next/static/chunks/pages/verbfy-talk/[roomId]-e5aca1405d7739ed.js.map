{"version":3,"file":"static/chunks/pages/verbfy-talk/[roomId]-e5aca1405d7739ed.js","mappings":"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","sources":["webpack://_N_E/?9c3e","webpack://_N_E/./src/hooks/useVerbfyTalk.ts","webpack://_N_E/./src/components/voiceChat/VoiceChatRoom.tsx","webpack://_N_E/./pages/verbfy-talk/[roomId].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/verbfy-talk/[roomId]\",\n      function () {\n        return require(\"private-next-pages/verbfy-talk/[roomId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/verbfy-talk/[roomId]\"])\n      });\n    }\n  ","import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { tokenStorage } from '@/utils/secureStorage';\r\n\r\ninterface VerbfyTalkRoom {\r\n  _id: string;\r\n  name: string;\r\n  description: string;\r\n  createdBy: {\r\n    _id: string;\r\n    name: string;\r\n    email: string;\r\n  };\r\n  participants: Array<{\r\n    userId: {\r\n      _id: string;\r\n      name: string;\r\n      email: string;\r\n    };\r\n    joinedAt: string;\r\n    isActive: boolean;\r\n  }>;\r\n  isPrivate: boolean;\r\n  maxParticipants: number;\r\n  level: string;\r\n  topic: string;\r\n}\r\n\r\ninterface Participant {\r\n  id: string;\r\n  name: string;\r\n  isSpeaking: boolean;\r\n  isMuted: boolean;\r\n  isSpeaker: boolean;\r\n}\r\n\r\ninterface Message {\r\n  id: string;\r\n  userId: string;\r\n  userName: string;\r\n  message: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport const useVerbfyTalk = () => {\r\n  const { user } = useAuth();\r\n  const token = tokenStorage.getToken();\r\n  const [socket, setSocket] = useState<Socket | null>(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [currentRoom, setCurrentRoom] = useState<VerbfyTalkRoom | null>(null);\r\n  const [participants, setParticipants] = useState<Participant[]>([]);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  \r\n  const socketRef = useRef<Socket | null>(null);\r\n  const localStreamRef = useRef<MediaStream | null>(null);\r\n  const peerConnectionsRef = useRef<Map<string, RTCPeerConnection>>(new Map());\r\n\r\n  // WebRTC Configuration\r\n  const WEBRTC_CONFIG = {\r\n    iceServers: [\r\n      { urls: 'stun:stun.l.google.com:19302' },\r\n      { urls: 'stun:stun1.l.google.com:19302' }\r\n    ]\r\n  };\r\n\r\n  // Initialize Socket Connection\r\n  useEffect(() => {\r\n    if (!user || !token) return;\r\n\r\n    const newSocket = io(`${process.env.NEXT_PUBLIC_BACKEND_URL || 'https://api.verbfy.com'}`, {\r\n      auth: {\r\n        token: token\r\n      },\r\n      transports: ['polling', 'websocket']\r\n    });\r\n\r\n    socketRef.current = newSocket;\r\n    setSocket(newSocket);\r\n\r\n    // Connection events\r\n    newSocket.on('connect', () => {\r\n      console.log('✅ Connected to VerbfyTalk server');\r\n      setIsConnected(true);\r\n      setError(null);\r\n    });\r\n\r\n    newSocket.on('disconnect', (reason) => {\r\n      console.log('❌ Disconnected from VerbfyTalk server:', reason);\r\n      setIsConnected(false);\r\n    });\r\n\r\n    newSocket.on('connect_error', (error) => {\r\n      console.error('❌ Connection error:', error);\r\n      setError('Failed to connect to server');\r\n    });\r\n\r\n    // Room events\r\n    newSocket.on('room:joined', (room: VerbfyTalkRoom) => {\r\n      console.log('✅ Joined room:', room.name);\r\n      setCurrentRoom(room);\r\n      setParticipants(room.participants.map(p => ({\r\n        id: p.userId._id,\r\n        name: p.userId.name,\r\n        isSpeaking: false,\r\n        isMuted: false,\r\n        isSpeaker: false\r\n      })));\r\n      setError(null);\r\n      setIsLoading(false);\r\n      \r\n      // Initialize WebRTC connections with existing participants\r\n      setTimeout(() => {\r\n        if (localStreamRef.current && room.participants.length > 0) {\r\n          console.log('🔗 Initializing WebRTC connections with', room.participants.length, 'participants');\r\n          room.participants.forEach(participant => {\r\n            if (participant.userId._id !== user?.id) {\r\n              createPeerConnection(participant.userId._id);\r\n            }\r\n          });\r\n        }\r\n      }, 1000);\r\n    });\r\n\r\n    newSocket.on('room:error', (data: { message: string }) => {\r\n      console.error('❌ Room error:', data.message);\r\n      setError(data.message);\r\n    });\r\n\r\n    newSocket.on('participant:joined', (participant: Participant) => {\r\n      console.log('👤 Participant joined:', participant.name);\r\n      setParticipants(prev => [...prev, participant]);\r\n      \r\n      // Create WebRTC connection with new participant\r\n      if (localStreamRef.current && participant.id !== user?.id) {\r\n        setTimeout(() => {\r\n          createPeerConnection(participant.id);\r\n        }, 500);\r\n      }\r\n    });\r\n\r\n    newSocket.on('participant:left', (participantId: string) => {\r\n      console.log('👋 Participant left:', participantId);\r\n      setParticipants(prev => prev.filter(p => p.id !== participantId));\r\n      \r\n      // Close peer connection\r\n      const peerConnection = peerConnectionsRef.current.get(participantId);\r\n      if (peerConnection) {\r\n        peerConnection.close();\r\n        peerConnectionsRef.current.delete(participantId);\r\n        console.log('🔌 Closed peer connection for:', participantId);\r\n      }\r\n    });\r\n\r\n    newSocket.on('message:received', (message: Message) => {\r\n      console.log('💬 Message received:', message.message);\r\n      setMessages(prev => [...prev, message]);\r\n    });\r\n\r\n    // WebRTC events\r\n    newSocket.on('webrtc:offer', async (data: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n      await handleOffer(data.from, data.offer);\r\n    });\r\n\r\n    newSocket.on('webrtc:answer', async (data: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n      await handleAnswer(data.from, data.answer);\r\n    });\r\n\r\n    newSocket.on('webrtc:ice-candidate', async (data: { from: string; candidate: RTCIceCandidateInit }) => {\r\n      await handleICECandidate(data.from, data.candidate);\r\n    });\r\n\r\n    return () => {\r\n      newSocket.disconnect();\r\n      socketRef.current = null;\r\n    };\r\n  }, [user, token]);\r\n\r\n  // Get user's microphone stream\r\n  const getLocalStream = useCallback(async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: true,\r\n        video: false\r\n      });\r\n      localStreamRef.current = stream;\r\n      return stream;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get microphone access:', error);\r\n      setError('Microphone access denied');\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  // Join room\r\n  const joinRoom = useCallback(async (roomId: string, password?: string) => {\r\n    if (!socketRef.current?.connected) {\r\n      setError('Not connected to server');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      // Get microphone access\r\n      const stream = await getLocalStream();\r\n      if (!stream) {\r\n        setIsLoading(false);\r\n        return false;\r\n      }\r\n\r\n      // First, join room via HTTP API\r\n      const response = await fetch(`/api/verbfy-talk/${roomId}/join`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify({ password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to join room');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('✅ HTTP API join successful:', result.data.name);\r\n\r\n      // Then, join room via Socket.IO\r\n      socketRef.current.emit('room:join', { roomId, password });\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Failed to join room:', error);\r\n      setError(error instanceof Error ? error.message : 'Failed to join room');\r\n      setIsLoading(false);\r\n      return false;\r\n    }\r\n  }, [getLocalStream, token]);\r\n\r\n  // Leave room\r\n  const leaveRoom = useCallback(() => {\r\n    if (socketRef.current?.connected && currentRoom) {\r\n      socketRef.current.emit('room:leave', { roomId: currentRoom._id });\r\n    }\r\n    \r\n    // Clean up\r\n    setCurrentRoom(null);\r\n    setParticipants([]);\r\n    setMessages([]);\r\n    \r\n    // Stop local stream\r\n    if (localStreamRef.current) {\r\n      localStreamRef.current.getTracks().forEach(track => track.stop());\r\n      localStreamRef.current = null;\r\n    }\r\n    \r\n    // Close peer connections\r\n    peerConnectionsRef.current.forEach(pc => pc.close());\r\n    peerConnectionsRef.current.clear();\r\n  }, [currentRoom]);\r\n\r\n  // Send message\r\n  const sendMessage = useCallback((message: string) => {\r\n    if (socketRef.current?.connected && currentRoom) {\r\n      socketRef.current.emit('message:send', {\r\n        roomId: currentRoom._id,\r\n        message: message.trim()\r\n      });\r\n    }\r\n  }, [currentRoom]);\r\n\r\n  // Toggle mute\r\n  const toggleMute = useCallback(() => {\r\n    if (localStreamRef.current) {\r\n      const audioTrack = localStreamRef.current.getAudioTracks()[0];\r\n      if (audioTrack) {\r\n        audioTrack.enabled = !audioTrack.enabled;\r\n        setIsMuted(!audioTrack.enabled);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Create peer connection\r\n  const createPeerConnection = useCallback(async (participantId: string) => {\r\n    try {\r\n      const peerConnection = new RTCPeerConnection(WEBRTC_CONFIG);\r\n      peerConnectionsRef.current.set(participantId, peerConnection);\r\n\r\n      // Add local stream\r\n      if (localStreamRef.current) {\r\n        localStreamRef.current.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, localStreamRef.current!);\r\n        });\r\n      }\r\n\r\n      // Handle ICE candidates\r\n      peerConnection.onicecandidate = (event) => {\r\n        if (event.candidate && socketRef.current?.connected) {\r\n          socketRef.current.emit('webrtc:ice-candidate', {\r\n            to: participantId,\r\n            candidate: event.candidate\r\n          });\r\n        }\r\n      };\r\n\r\n      // Handle remote stream\r\n      peerConnection.ontrack = (event) => {\r\n        console.log('🎵 Remote audio stream received from:', participantId);\r\n        // You can add audio element here to play remote audio\r\n      };\r\n\r\n      // Create and send offer\r\n      const offer = await peerConnection.createOffer();\r\n      await peerConnection.setLocalDescription(offer);\r\n\r\n      if (socketRef.current?.connected) {\r\n        socketRef.current.emit('webrtc:offer', {\r\n          to: participantId,\r\n          offer: offer\r\n        });\r\n      }\r\n\r\n      console.log('🔗 Peer connection created for:', participantId);\r\n    } catch (error) {\r\n      console.error('❌ Failed to create peer connection:', error);\r\n    }\r\n  }, []);\r\n\r\n  // WebRTC handlers\r\n  const handleOffer = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = new RTCPeerConnection(WEBRTC_CONFIG);\r\n      peerConnectionsRef.current.set(from, peerConnection);\r\n\r\n      // Add local stream\r\n      if (localStreamRef.current) {\r\n        localStreamRef.current.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, localStreamRef.current!);\r\n        });\r\n      }\r\n\r\n      // Handle ICE candidates\r\n      peerConnection.onicecandidate = (event) => {\r\n        if (event.candidate && socketRef.current?.connected) {\r\n          socketRef.current.emit('webrtc:ice-candidate', {\r\n            to: from,\r\n            candidate: event.candidate\r\n          });\r\n        }\r\n      };\r\n\r\n      // Handle remote stream\r\n      peerConnection.ontrack = (event) => {\r\n        console.log('🎵 Remote audio stream received from:', from);\r\n      };\r\n\r\n      await peerConnection.setRemoteDescription(offer);\r\n      const answer = await peerConnection.createAnswer();\r\n      await peerConnection.setLocalDescription(answer);\r\n\r\n      if (socketRef.current?.connected) {\r\n        socketRef.current.emit('webrtc:answer', {\r\n          to: from,\r\n          answer: answer\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to handle offer:', error);\r\n    }\r\n  };\r\n\r\n  const handleAnswer = async (from: string, answer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection) {\r\n        await peerConnection.setRemoteDescription(answer);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to handle answer:', error);\r\n    }\r\n  };\r\n\r\n  const handleICECandidate = async (from: string, candidate: RTCIceCandidateInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection && peerConnection.remoteDescription) {\r\n        await peerConnection.addIceCandidate(candidate);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to handle ICE candidate:', error);\r\n    }\r\n  };\r\n\r\n  return {\r\n    // Connection state\r\n    isConnected,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Room state\r\n    currentRoom,\r\n    participants,\r\n    messages,\r\n    \r\n    // Audio state\r\n    isMuted,\r\n    isSpeaking,\r\n    \r\n    // Actions\r\n    joinRoom,\r\n    leaveRoom,\r\n    sendMessage,\r\n    toggleMute,\r\n    createPeerConnection,\r\n    \r\n    // Cleanup\r\n    setError\r\n  };\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useVerbfyTalk } from '@/hooks/useVerbfyTalk';\r\nimport { ArrowLeftIcon, MicrophoneIcon } from '@heroicons/react/24/outline';\r\n\r\ninterface VoiceChatRoomProps {\r\n  roomId: string;\r\n  onLeave: () => void;\r\n}\r\n\r\nexport default function VoiceChatRoom({ roomId, onLeave }: VoiceChatRoomProps) {\r\n  const {\r\n    isConnected,\r\n    isLoading,\r\n    error,\r\n    currentRoom,\r\n    participants,\r\n    messages,\r\n    isMuted,\r\n    isSpeaking,\r\n    joinRoom,\r\n    leaveRoom,\r\n    sendMessage,\r\n    toggleMute,\r\n    setError\r\n  } = useVerbfyTalk();\r\n\r\n  const [chatMessage, setChatMessage] = useState('');\r\n\r\n  // Join room when component mounts\r\n  useEffect(() => {\r\n    if (roomId && isConnected) {\r\n      joinRoom(roomId);\r\n    }\r\n  }, [roomId, isConnected, joinRoom]);\r\n\r\n  const handleLeave = () => {\r\n    leaveRoom();\r\n    onLeave();\r\n  };\r\n\r\n  const handleSendMessage = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (chatMessage.trim()) {\r\n      sendMessage(chatMessage);\r\n      setChatMessage('');\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen bg-gray-900\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"mt-4 text-white\">Joining room...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen bg-gray-900\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-red-400 mb-4\">{error}</p>\r\n          <button\r\n            onClick={() => {\r\n              setError(null);\r\n              joinRoom(roomId);\r\n            }}\r\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg mr-4\"\r\n          >\r\n            Retry\r\n          </button>\r\n          <button\r\n            onClick={handleLeave}\r\n            className=\"bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg\"\r\n          >\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-screen flex flex-col bg-gray-900\">\r\n      {/* Header */}\r\n      <div className=\"bg-gray-800 p-4 flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <button\r\n            onClick={handleLeave}\r\n            className=\"text-gray-300 hover:text-white p-2 rounded-lg hover:bg-gray-700\"\r\n          >\r\n            <ArrowLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <div>\r\n            <h1 className=\"text-xl font-bold text-white\">\r\n              {currentRoom?.name || `Room ${roomId}`}\r\n            </h1>\r\n            <p className=\"text-gray-400 text-sm\">\r\n              {participants.length} participant{participants.length !== 1 ? 's' : ''}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center gap-4\">\r\n          <button\r\n            onClick={toggleMute}\r\n            className={`p-3 rounded-full transition-colors relative ${\r\n              isMuted \r\n                ? 'bg-red-600 hover:bg-red-700 text-white' \r\n                : isSpeaking\r\n                ? 'bg-green-600 hover:bg-green-700 text-white animate-pulse'\r\n                : 'bg-green-600 hover:bg-green-700 text-white'\r\n            }`}\r\n          >\r\n            <MicrophoneIcon className={`w-6 h-6 ${isMuted ? 'opacity-50' : ''}`} />\r\n            {isSpeaking && !isMuted && (\r\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse\"></div>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex-1 flex\">\r\n        {/* Participants */}\r\n        <div className=\"w-1/3 bg-gray-800 p-4\">\r\n          <h2 className=\"text-lg font-semibold text-white mb-4\">Participants</h2>\r\n          <div className=\"space-y-2\">\r\n            {participants.map((participant) => (\r\n              <div\r\n                key={participant.id}\r\n                className={`flex items-center gap-3 p-3 rounded-lg transition-colors ${\r\n                  participant.isSpeaking \r\n                    ? 'bg-green-700 border border-green-500' \r\n                    : 'bg-gray-700'\r\n                }`}\r\n              >\r\n                <div className={`w-3 h-3 rounded-full transition-colors ${\r\n                  participant.isSpeaking ? 'bg-green-500 animate-pulse' : 'bg-gray-500'\r\n                }`}></div>\r\n                <span className=\"text-white font-medium\">{participant.name}</span>\r\n                {participant.isMuted && (\r\n                  <MicrophoneIcon className=\"w-4 h-4 text-red-400 opacity-50\" />\r\n                )}\r\n                {participant.isSpeaking && (\r\n                  <div className=\"ml-auto\">\r\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chat */}\r\n        <div className=\"flex-1 flex flex-col\">\r\n          {/* Messages */}\r\n          <div className=\"flex-1 p-4 overflow-y-auto\">\r\n            <div className=\"space-y-4\">\r\n              {messages.map((message) => (\r\n                <div key={message.id} className=\"flex gap-3\">\r\n                  <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold\">\r\n                    {message.userName.charAt(0).toUpperCase()}\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      <span className=\"text-white font-semibold\">{message.userName}</span>\r\n                      <span className=\"text-gray-400 text-sm\">\r\n                        {new Date(message.timestamp).toLocaleTimeString()}\r\n                      </span>\r\n                    </div>\r\n                    <p className=\"text-gray-300\">{message.message}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Message Input */}\r\n          <div className=\"p-4 border-t border-gray-700\">\r\n            <form onSubmit={handleSendMessage} className=\"flex gap-3\">\r\n              <input\r\n                type=\"text\"\r\n                value={chatMessage}\r\n                onChange={(e) => setChatMessage(e.target.value)}\r\n                placeholder=\"Type a message...\"\r\n                className=\"flex-1 bg-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600\"\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                disabled={!chatMessage.trim()}\r\n                className=\"bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white px-6 py-2 rounded-lg transition-colors\"\r\n              >\r\n                Send\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport VoiceChatRoom from '@/components/voiceChat/VoiceChatRoom';\r\n\r\nexport default function VerbfyTalkRoom() {\r\n  const router = useRouter();\r\n  const { roomId } = router.query as { roomId?: string };\r\n\r\n  const handleLeaveRoom = () => {\r\n    router.push('/verbfy-talk');\r\n  };\r\n\r\n  if (!roomId) {\r\n    return (\r\n      <DashboardLayout title=\"VerbfyTalk\">\r\n        <div className=\"flex items-center justify-center min-h-screen\">\r\n          <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Room Not Found</h1>\r\n            <p className=\"text-gray-600 mb-6\">The room you're looking for doesn't exist.</p>\r\n            <button\r\n              onClick={() => router.push('/verbfy-talk')}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n            >\r\n              Back to Rooms\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>VerbfyTalk Room - {roomId}</title>\r\n        <meta name=\"description\" content=\"Join the conversation in VerbfyTalk\" />\r\n      </Head>\r\n      \r\n      <DashboardLayout title={`VerbfyTalk Room: ${roomId}`}>\r\n        <VoiceChatRoom roomId={roomId} onLeave={handleLeaveRoom} />\r\n      </DashboardLayout>\r\n    </>\r\n  );\r\n}\r\n"],"names":["window","__NEXT_P","push","__webpack_require__","useVerbfyTalk","user","useAuth","token","tokenStorage","getToken","socket","setSocket","useState","isConnected","setIsConnected","currentRoom","setCurrentRoom","participants","setParticipants","messages","setMessages","isLoading","setIsLoading","error","setError","isMuted","setIsMuted","isSpeaking","setIsSpeaking","socketRef","useRef","localStreamRef","peerConnectionsRef","Map","WEBRTC_CONFIG","iceServers","urls","useEffect","newSocket","io","concat","process","env","NEXT_PUBLIC_BACKEND_URL","auth","transports","current","on","console","log","reason","room","name","map","p","id","userId","_id","isSpeaker","setTimeout","length","forEach","participant","createPeerConnection","data","message","prev","participantId","filter","peerConnection","get","close","delete","handleOffer","from","offer","handleAnswer","answer","handleICECandidate","candidate","disconnect","getLocalStream","useCallback","stream","navigator","mediaDevices","getUserMedia","audio","video","joinRoom","roomId","password","connected","response","fetch","method","headers","credentials","body","JSON","stringify","ok","errorData","json","result","emit","Error","leaveRoom","getTracks","track","stop","pc","clear","sendMessage","trim","toggleMute","audioTrack","getAudioTracks","enabled","RTCPeerConnection","set","addTrack","onicecandidate","event","to","ontrack","createOffer","setLocalDescription","setRemoteDescription","createAnswer","remoteDescription","addIceCandidate","VoiceChatRoom","param","onLeave","chatMessage","setChatMessage","handleLeave","jsx_runtime","jsx","div","className","jsxs","button","onClick","ArrowLeftIcon","h1","MicrophoneIcon","h2","span","userName","charAt","toUpperCase","Date","timestamp","toLocaleTimeString","form","onSubmit","e","preventDefault","input","type","value","onChange","target","placeholder","disabled","VerbfyTalkRoom","router","useRouter","query","Fragment","Head","title","meta","content","DashboardLayout"],"sourceRoot":""}