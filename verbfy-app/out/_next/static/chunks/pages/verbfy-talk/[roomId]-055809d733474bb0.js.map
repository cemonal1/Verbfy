{"version":3,"file":"static/chunks/pages/verbfy-talk/[roomId]-055809d733474bb0.js","mappings":"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","sources":["webpack://_N_E/?9c3e","webpack://_N_E/./src/hooks/useVerbfyTalk.ts","webpack://_N_E/./src/components/voiceChat/VoiceChatRoom.tsx","webpack://_N_E/./pages/verbfy-talk/[roomId].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/verbfy-talk/[roomId]\",\n      function () {\n        return require(\"private-next-pages/verbfy-talk/[roomId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/verbfy-talk/[roomId]\"])\n      });\n    }\n  ","import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { useAuth } from '@/context/AuthContext';\r\nimport { tokenStorage } from '@/utils/secureStorage';\r\n\r\ninterface VerbfyTalkRoom {\r\n  _id: string;\r\n  name: string;\r\n  description: string;\r\n  createdBy: {\r\n    _id: string;\r\n    name: string;\r\n    email: string;\r\n  };\r\n  participants: Array<{\r\n    userId: {\r\n      _id: string;\r\n      name: string;\r\n      email: string;\r\n    };\r\n    joinedAt: string;\r\n    isActive: boolean;\r\n  }>;\r\n  isPrivate: boolean;\r\n  maxParticipants: number;\r\n  level: string;\r\n  topic: string;\r\n}\r\n\r\ninterface Participant {\r\n  id: string;\r\n  name: string;\r\n  isSpeaking: boolean;\r\n  isMuted: boolean;\r\n  isSpeaker: boolean;\r\n}\r\n\r\ninterface Message {\r\n  id: string;\r\n  userId: string;\r\n  userName: string;\r\n  message: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport const useVerbfyTalk = () => {\r\n  const { user } = useAuth();\r\n  const token = tokenStorage.getToken();\r\n  const [socket, setSocket] = useState<Socket | null>(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [currentRoom, setCurrentRoom] = useState<VerbfyTalkRoom | null>(null);\r\n  const [participants, setParticipants] = useState<Participant[]>([]);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  \r\n  const socketRef = useRef<Socket | null>(null);\r\n  const localStreamRef = useRef<MediaStream | null>(null);\r\n  const peerConnectionsRef = useRef<Map<string, RTCPeerConnection>>(new Map());\r\n\r\n  // WebRTC Configuration\r\n  const WEBRTC_CONFIG = {\r\n    iceServers: [\r\n      { urls: 'stun:stun.l.google.com:19302' },\r\n      { urls: 'stun:stun1.l.google.com:19302' }\r\n    ]\r\n  };\r\n\r\n  // Initialize Socket Connection\r\n  useEffect(() => {\r\n    if (!user || !token) return;\r\n\r\n    const newSocket = io(`${process.env.NEXT_PUBLIC_BACKEND_URL || 'https://api.verbfy.com'}`, {\r\n      auth: {\r\n        token: token\r\n      },\r\n      transports: ['polling', 'websocket']\r\n    });\r\n\r\n    socketRef.current = newSocket;\r\n    setSocket(newSocket);\r\n\r\n    // Connection events\r\n    newSocket.on('connect', () => {\r\n      console.log('✅ Connected to VerbfyTalk server');\r\n      setIsConnected(true);\r\n      setError(null);\r\n    });\r\n\r\n    newSocket.on('disconnect', (reason) => {\r\n      console.log('❌ Disconnected from VerbfyTalk server:', reason);\r\n      setIsConnected(false);\r\n    });\r\n\r\n    newSocket.on('connect_error', (error) => {\r\n      console.error('❌ Connection error:', error);\r\n      setError('Failed to connect to server');\r\n    });\r\n\r\n    // Room events\r\n    newSocket.on('room:joined', (room: VerbfyTalkRoom) => {\r\n      console.log('✅ Joined room:', room.name);\r\n      setCurrentRoom(room);\r\n      setParticipants(room.participants.map(p => ({\r\n        id: p.userId._id,\r\n        name: p.userId.name,\r\n        isSpeaking: false,\r\n        isMuted: false,\r\n        isSpeaker: false\r\n      })));\r\n      setError(null);\r\n    });\r\n\r\n    newSocket.on('room:error', (data: { message: string }) => {\r\n      console.error('❌ Room error:', data.message);\r\n      setError(data.message);\r\n    });\r\n\r\n    newSocket.on('participant:joined', (participant: Participant) => {\r\n      console.log('👤 Participant joined:', participant.name);\r\n      setParticipants(prev => [...prev, participant]);\r\n    });\r\n\r\n    newSocket.on('participant:left', (participantId: string) => {\r\n      console.log('👋 Participant left:', participantId);\r\n      setParticipants(prev => prev.filter(p => p.id !== participantId));\r\n    });\r\n\r\n    newSocket.on('message:received', (message: Message) => {\r\n      console.log('💬 Message received:', message.message);\r\n      setMessages(prev => [...prev, message]);\r\n    });\r\n\r\n    // WebRTC events\r\n    newSocket.on('webrtc:offer', async (data: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n      await handleOffer(data.from, data.offer);\r\n    });\r\n\r\n    newSocket.on('webrtc:answer', async (data: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n      await handleAnswer(data.from, data.answer);\r\n    });\r\n\r\n    newSocket.on('webrtc:ice-candidate', async (data: { from: string; candidate: RTCIceCandidateInit }) => {\r\n      await handleICECandidate(data.from, data.candidate);\r\n    });\r\n\r\n    return () => {\r\n      newSocket.disconnect();\r\n      socketRef.current = null;\r\n    };\r\n  }, [user, token]);\r\n\r\n  // Get user's microphone stream\r\n  const getLocalStream = useCallback(async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: true,\r\n        video: false\r\n      });\r\n      localStreamRef.current = stream;\r\n      return stream;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get microphone access:', error);\r\n      setError('Microphone access denied');\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  // Join room\r\n  const joinRoom = useCallback(async (roomId: string, password?: string) => {\r\n    if (!socketRef.current?.connected) {\r\n      setError('Not connected to server');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      // Get microphone access\r\n      const stream = await getLocalStream();\r\n      if (!stream) {\r\n        setIsLoading(false);\r\n        return false;\r\n      }\r\n\r\n      // Join room via Socket.IO\r\n      socketRef.current.emit('room:join', { roomId, password });\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Failed to join room:', error);\r\n      setError('Failed to join room');\r\n      setIsLoading(false);\r\n      return false;\r\n    }\r\n  }, [getLocalStream]);\r\n\r\n  // Leave room\r\n  const leaveRoom = useCallback(() => {\r\n    if (socketRef.current?.connected && currentRoom) {\r\n      socketRef.current.emit('room:leave', { roomId: currentRoom._id });\r\n    }\r\n    \r\n    // Clean up\r\n    setCurrentRoom(null);\r\n    setParticipants([]);\r\n    setMessages([]);\r\n    \r\n    // Stop local stream\r\n    if (localStreamRef.current) {\r\n      localStreamRef.current.getTracks().forEach(track => track.stop());\r\n      localStreamRef.current = null;\r\n    }\r\n    \r\n    // Close peer connections\r\n    peerConnectionsRef.current.forEach(pc => pc.close());\r\n    peerConnectionsRef.current.clear();\r\n  }, [currentRoom]);\r\n\r\n  // Send message\r\n  const sendMessage = useCallback((message: string) => {\r\n    if (socketRef.current?.connected && currentRoom) {\r\n      socketRef.current.emit('message:send', {\r\n        roomId: currentRoom._id,\r\n        message: message.trim()\r\n      });\r\n    }\r\n  }, [currentRoom]);\r\n\r\n  // Toggle mute\r\n  const toggleMute = useCallback(() => {\r\n    if (localStreamRef.current) {\r\n      const audioTrack = localStreamRef.current.getAudioTracks()[0];\r\n      if (audioTrack) {\r\n        audioTrack.enabled = !audioTrack.enabled;\r\n        setIsMuted(!audioTrack.enabled);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // WebRTC handlers\r\n  const handleOffer = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = new RTCPeerConnection(WEBRTC_CONFIG);\r\n      peerConnectionsRef.current.set(from, peerConnection);\r\n\r\n      // Add local stream\r\n      if (localStreamRef.current) {\r\n        localStreamRef.current.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, localStreamRef.current!);\r\n        });\r\n      }\r\n\r\n      // Handle ICE candidates\r\n      peerConnection.onicecandidate = (event) => {\r\n        if (event.candidate && socketRef.current?.connected) {\r\n          socketRef.current.emit('webrtc:ice-candidate', {\r\n            to: from,\r\n            candidate: event.candidate\r\n          });\r\n        }\r\n      };\r\n\r\n      // Handle remote stream\r\n      peerConnection.ontrack = (event) => {\r\n        console.log('🎵 Remote audio stream received from:', from);\r\n      };\r\n\r\n      await peerConnection.setRemoteDescription(offer);\r\n      const answer = await peerConnection.createAnswer();\r\n      await peerConnection.setLocalDescription(answer);\r\n\r\n      if (socketRef.current?.connected) {\r\n        socketRef.current.emit('webrtc:answer', {\r\n          to: from,\r\n          answer: answer\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to handle offer:', error);\r\n    }\r\n  };\r\n\r\n  const handleAnswer = async (from: string, answer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection) {\r\n        await peerConnection.setRemoteDescription(answer);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to handle answer:', error);\r\n    }\r\n  };\r\n\r\n  const handleICECandidate = async (from: string, candidate: RTCIceCandidateInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection && peerConnection.remoteDescription) {\r\n        await peerConnection.addIceCandidate(candidate);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to handle ICE candidate:', error);\r\n    }\r\n  };\r\n\r\n  return {\r\n    // Connection state\r\n    isConnected,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Room state\r\n    currentRoom,\r\n    participants,\r\n    messages,\r\n    \r\n    // Audio state\r\n    isMuted,\r\n    isSpeaking,\r\n    \r\n    // Actions\r\n    joinRoom,\r\n    leaveRoom,\r\n    sendMessage,\r\n    toggleMute,\r\n    \r\n    // Cleanup\r\n    setError\r\n  };\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useVerbfyTalk } from '@/hooks/useVerbfyTalk';\r\nimport { ArrowLeftIcon, MicrophoneIcon } from '@heroicons/react/24/outline';\r\n\r\ninterface VoiceChatRoomProps {\r\n  roomId: string;\r\n  onLeave: () => void;\r\n}\r\n\r\nexport default function VoiceChatRoom({ roomId, onLeave }: VoiceChatRoomProps) {\r\n  const {\r\n    isConnected,\r\n    isLoading,\r\n    error,\r\n    currentRoom,\r\n    participants,\r\n    messages,\r\n    isMuted,\r\n    joinRoom,\r\n    leaveRoom,\r\n    sendMessage,\r\n    toggleMute,\r\n    setError\r\n  } = useVerbfyTalk();\r\n\r\n  const [chatMessage, setChatMessage] = useState('');\r\n\r\n  // Join room when component mounts\r\n  useEffect(() => {\r\n    if (roomId && isConnected) {\r\n      joinRoom(roomId);\r\n    }\r\n  }, [roomId, isConnected, joinRoom]);\r\n\r\n  const handleLeave = () => {\r\n    leaveRoom();\r\n    onLeave();\r\n  };\r\n\r\n  const handleSendMessage = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (chatMessage.trim()) {\r\n      sendMessage(chatMessage);\r\n      setChatMessage('');\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen bg-gray-900\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"mt-4 text-white\">Joining room...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen bg-gray-900\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-red-400 mb-4\">{error}</p>\r\n          <button\r\n            onClick={() => {\r\n              setError(null);\r\n              joinRoom(roomId);\r\n            }}\r\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg mr-4\"\r\n          >\r\n            Retry\r\n          </button>\r\n          <button\r\n            onClick={handleLeave}\r\n            className=\"bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg\"\r\n          >\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-screen flex flex-col bg-gray-900\">\r\n      {/* Header */}\r\n      <div className=\"bg-gray-800 p-4 flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <button\r\n            onClick={handleLeave}\r\n            className=\"text-gray-300 hover:text-white p-2 rounded-lg hover:bg-gray-700\"\r\n          >\r\n            <ArrowLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <div>\r\n            <h1 className=\"text-xl font-bold text-white\">\r\n              {currentRoom?.name || `Room ${roomId}`}\r\n            </h1>\r\n            <p className=\"text-gray-400 text-sm\">\r\n              {participants.length} participant{participants.length !== 1 ? 's' : ''}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center gap-4\">\r\n          <button\r\n            onClick={toggleMute}\r\n            className={`p-3 rounded-full transition-colors ${\r\n              isMuted \r\n                ? 'bg-red-600 hover:bg-red-700 text-white' \r\n                : 'bg-green-600 hover:bg-green-700 text-white'\r\n            }`}\r\n          >\r\n            <MicrophoneIcon className={`w-6 h-6 ${isMuted ? 'opacity-50' : ''}`} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex-1 flex\">\r\n        {/* Participants */}\r\n        <div className=\"w-1/3 bg-gray-800 p-4\">\r\n          <h2 className=\"text-lg font-semibold text-white mb-4\">Participants</h2>\r\n          <div className=\"space-y-2\">\r\n            {participants.map((participant) => (\r\n              <div\r\n                key={participant.id}\r\n                className=\"flex items-center gap-3 p-3 bg-gray-700 rounded-lg\"\r\n              >\r\n                <div className={`w-3 h-3 rounded-full ${\r\n                  participant.isSpeaking ? 'bg-green-500' : 'bg-gray-500'\r\n                }`}></div>\r\n                <span className=\"text-white\">{participant.name}</span>\r\n                {participant.isMuted && (\r\n                  <MicrophoneIcon className=\"w-4 h-4 text-red-400 opacity-50\" />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chat */}\r\n        <div className=\"flex-1 flex flex-col\">\r\n          {/* Messages */}\r\n          <div className=\"flex-1 p-4 overflow-y-auto\">\r\n            <div className=\"space-y-4\">\r\n              {messages.map((message) => (\r\n                <div key={message.id} className=\"flex gap-3\">\r\n                  <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold\">\r\n                    {message.userName.charAt(0).toUpperCase()}\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      <span className=\"text-white font-semibold\">{message.userName}</span>\r\n                      <span className=\"text-gray-400 text-sm\">\r\n                        {new Date(message.timestamp).toLocaleTimeString()}\r\n                      </span>\r\n                    </div>\r\n                    <p className=\"text-gray-300\">{message.message}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Message Input */}\r\n          <div className=\"p-4 border-t border-gray-700\">\r\n            <form onSubmit={handleSendMessage} className=\"flex gap-3\">\r\n              <input\r\n                type=\"text\"\r\n                value={chatMessage}\r\n                onChange={(e) => setChatMessage(e.target.value)}\r\n                placeholder=\"Type a message...\"\r\n                className=\"flex-1 bg-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600\"\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                disabled={!chatMessage.trim()}\r\n                className=\"bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white px-6 py-2 rounded-lg transition-colors\"\r\n              >\r\n                Send\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport VoiceChatRoom from '@/components/voiceChat/VoiceChatRoom';\r\n\r\nexport default function VerbfyTalkRoom() {\r\n  const router = useRouter();\r\n  const { roomId } = router.query as { roomId?: string };\r\n\r\n  const handleLeaveRoom = () => {\r\n    router.push('/verbfy-talk');\r\n  };\r\n\r\n  if (!roomId) {\r\n    return (\r\n      <DashboardLayout title=\"VerbfyTalk\">\r\n        <div className=\"flex items-center justify-center min-h-screen\">\r\n          <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Room Not Found</h1>\r\n            <p className=\"text-gray-600 mb-6\">The room you're looking for doesn't exist.</p>\r\n            <button\r\n              onClick={() => router.push('/verbfy-talk')}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n            >\r\n              Back to Rooms\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>VerbfyTalk Room - {roomId}</title>\r\n        <meta name=\"description\" content=\"Join the conversation in VerbfyTalk\" />\r\n      </Head>\r\n      \r\n      <DashboardLayout title={`VerbfyTalk Room: ${roomId}`}>\r\n        <VoiceChatRoom roomId={roomId} onLeave={handleLeaveRoom} />\r\n      </DashboardLayout>\r\n    </>\r\n  );\r\n}\r\n"],"names":["window","__NEXT_P","push","__webpack_require__","useVerbfyTalk","user","useAuth","token","tokenStorage","getToken","socket","setSocket","useState","isConnected","setIsConnected","currentRoom","setCurrentRoom","participants","setParticipants","messages","setMessages","isLoading","setIsLoading","error","setError","isMuted","setIsMuted","isSpeaking","setIsSpeaking","socketRef","useRef","localStreamRef","peerConnectionsRef","Map","WEBRTC_CONFIG","iceServers","urls","useEffect","newSocket","io","concat","process","env","NEXT_PUBLIC_BACKEND_URL","auth","transports","current","on","console","log","reason","room","name","map","p","id","userId","_id","isSpeaker","data","message","participant","prev","participantId","filter","handleOffer","from","offer","handleAnswer","answer","handleICECandidate","candidate","disconnect","getLocalStream","useCallback","stream","navigator","mediaDevices","getUserMedia","audio","video","joinRoom","roomId","password","connected","emit","leaveRoom","getTracks","forEach","track","stop","pc","close","clear","sendMessage","trim","toggleMute","audioTrack","getAudioTracks","enabled","peerConnection","RTCPeerConnection","set","addTrack","onicecandidate","event","to","ontrack","setRemoteDescription","createAnswer","setLocalDescription","get","remoteDescription","addIceCandidate","VoiceChatRoom","param","onLeave","chatMessage","setChatMessage","handleLeave","jsx_runtime","jsx","div","className","jsxs","button","onClick","ArrowLeftIcon","h1","length","MicrophoneIcon","h2","span","userName","charAt","toUpperCase","Date","timestamp","toLocaleTimeString","form","onSubmit","e","preventDefault","input","type","value","onChange","target","placeholder","disabled","VerbfyTalkRoom","router","useRouter","query","Fragment","Head","title","meta","content","DashboardLayout"],"sourceRoot":""}