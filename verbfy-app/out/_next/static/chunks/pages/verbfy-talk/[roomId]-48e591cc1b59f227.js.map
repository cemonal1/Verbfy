{"version":3,"file":"static/chunks/pages/verbfy-talk/[roomId]-48e591cc1b59f227.js","mappings":"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","sources":["webpack://_N_E/?9c3e","webpack://_N_E/./src/hooks/useVerbfyTalk.ts","webpack://_N_E/./src/components/voiceChat/VoiceChatRoom.tsx","webpack://_N_E/./pages/verbfy-talk/[roomId].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/verbfy-talk/[roomId]\",\n      function () {\n        return require(\"private-next-pages/verbfy-talk/[roomId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/verbfy-talk/[roomId]\"])\n      });\n    }\n  ","import { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\n\r\ninterface VerbfyTalkRoom {\r\n  id: string;\r\n  name: string;\r\n  participants: number;\r\n  maxParticipants: number;\r\n  isActive: boolean;\r\n}\r\n\r\ninterface VerbfyTalkParticipant {\r\n  id: string;\r\n  name: string;\r\n  isSpeaking: boolean;\r\n  isMuted: boolean;\r\n}\r\n\r\ninterface UseVerbfyTalkReturn {\r\n  // Room management\r\n  rooms: VerbfyTalkRoom[];\r\n  currentRoom: VerbfyTalkRoom | null;\r\n  joinRoom: (roomId: string) => Promise<boolean>;\r\n  leaveRoom: () => void;\r\n  createRoom: (name: string) => Promise<string | null>;\r\n  \r\n  // Audio controls\r\n  isMuted: boolean;\r\n  isConnected: boolean;\r\n  toggleMute: () => void;\r\n  requestMicrophone: () => Promise<boolean>;\r\n  \r\n  // Participants\r\n  participants: VerbfyTalkParticipant[];\r\n  \r\n  // Connection status\r\n  isConnecting: boolean;\r\n  connectionError: string | null;\r\n  reconnectionAttempts: number;\r\n  \r\n  // Cleanup\r\n  disconnect: () => void;\r\n}\r\n\r\n// WebRTC Configuration\r\nconst WEBRTC_CONFIG: RTCConfiguration = {\r\n  iceServers: [\r\n    { urls: 'stun:stun.l.google.com:19302' },\r\n    { urls: 'stun:stun1.l.google.com:19302' },\r\n    { urls: 'stun:stun2.l.google.com:19302' },\r\n    { urls: 'stun:stun3.l.google.com:19302' },\r\n    { urls: 'stun:stun4.l.google.com:19302' }\r\n  ],\r\n  iceCandidatePoolSize: 10\r\n};\r\n\r\n// Microphone error types\r\nconst MICROPHONE_ERRORS = {\r\n  NotAllowedError: 'Microphone permission denied. Please allow microphone access in your browser settings.',\r\n  NotFoundError: 'No microphone found. Please connect a microphone and try again.',\r\n  NotSupportedError: 'Microphone not supported in this browser.',\r\n  NotReadableError: 'Microphone is already in use by another application.',\r\n  AbortError: 'Microphone access was aborted.',\r\n  SecurityError: 'Microphone access blocked due to security restrictions.',\r\n  InvalidStateError: 'Microphone is in an invalid state.',\r\n  UnknownError: 'Unknown microphone error occurred.'\r\n} as const;\r\n\r\nexport const useVerbfyTalk = (token: string): UseVerbfyTalkReturn => {\r\n  const [rooms, setRooms] = useState<VerbfyTalkRoom[]>([]);\r\n  const [currentRoom, setCurrentRoom] = useState<VerbfyTalkRoom | null>(null);\r\n  const [participants, setParticipants] = useState<VerbfyTalkParticipant[]>([]);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [connectionError, setConnectionError] = useState<string | null>(null);\r\n  const [reconnectionAttempts, setReconnectionAttempts] = useState(0);\r\n  \r\n  // Refs\r\n  const socketRef = useRef<Socket | null>(null);\r\n  const localStreamRef = useRef<MediaStream | null>(null);\r\n  const peerConnectionsRef = useRef<Map<string, RTCPeerConnection>>(new Map());\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const gainNodeRef = useRef<GainNode | null>(null);\r\n  const sourceNodeRef = useRef<MediaStreamAudioSourceNode | null>(null);\r\n  const iceCandidateBufferRef = useRef<Map<string, RTCIceCandidateInit[]>>(new Map());\r\n  const vadIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const isInitializedRef = useRef(false);\r\n\r\n  // Voice Activity Detection\r\n  const startVAD = useCallback(() => {\r\n    if (!localStreamRef.current || vadIntervalRef.current) return;\r\n\r\n    const audioTrack = localStreamRef.current.getAudioTracks()[0];\r\n    if (!audioTrack) return;\r\n\r\n    // Simple VAD using audio levels\r\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n    const source = audioContext.createMediaStreamSource(localStreamRef.current);\r\n    const analyser = audioContext.createAnalyser();\r\n    const dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n    source.connect(analyser);\r\n    analyser.fftSize = 256;\r\n\r\n    vadIntervalRef.current = setInterval(() => {\r\n      analyser.getByteFrequencyData(dataArray);\r\n      const average = dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;\r\n      const isSpeaking = average > 30; // Threshold for voice activity\r\n\r\n      // Update local speaking state\r\n      if (socketRef.current?.connected && currentRoom) {\r\n        socketRef.current.emit('participant:speaking', {\r\n          roomId: currentRoom.id,\r\n          isSpeaking\r\n        });\r\n      }\r\n    }, 100);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (vadIntervalRef.current) {\r\n        clearInterval(vadIntervalRef.current);\r\n        vadIntervalRef.current = null;\r\n      }\r\n      source.disconnect();\r\n      analyser.disconnect();\r\n      audioContext.close();\r\n    };\r\n  }, [currentRoom]);\r\n\r\n  // Stop VAD\r\n  const stopVAD = useCallback(() => {\r\n    if (vadIntervalRef.current) {\r\n      clearInterval(vadIntervalRef.current);\r\n      vadIntervalRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Initialize Socket.IO connection\r\n  const initializeSocket = useCallback(async () => {\r\n    if (!token || isInitializedRef.current) return;\r\n    \r\n    try {\r\n      setIsConnecting(true);\r\n      setConnectionError(null);\r\n      setReconnectionAttempts(0);\r\n      \r\n      // Cleanup existing socket if any\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n      }\r\n      \r\n      const socket = io(process.env.NEXT_PUBLIC_BACKEND_URL || 'https://api.verbfy.com', {\r\n        path: '/socket.io',\r\n        transports: ['websocket', 'polling'],\r\n        forceNew: false, // Changed from true to prevent socket recreation\r\n        withCredentials: true,\r\n        auth: { token },\r\n        timeout: 20000,\r\n        reconnectionAttempts: 5,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        upgrade: true,\r\n        rememberUpgrade: true\r\n      });\r\n      \r\n      socket.on('connect', () => {\r\n        console.log('🔌 VerbfyTalk connected:', socket.id);\r\n        setIsConnected(true);\r\n        setIsConnecting(false);\r\n        setConnectionError(null);\r\n        setReconnectionAttempts(0);\r\n        isInitializedRef.current = true;\r\n      });\r\n      \r\n      socket.on('disconnect', (reason) => {\r\n        console.log('🔌 VerbfyTalk disconnected:', reason);\r\n        setIsConnected(false);\r\n        setCurrentRoom(null);\r\n        setParticipants([]);\r\n        stopVAD();\r\n        \r\n        // Cleanup peer connections on disconnect\r\n        peerConnectionsRef.current.forEach(connection => connection.close());\r\n        peerConnectionsRef.current.clear();\r\n        iceCandidateBufferRef.current.clear();\r\n      });\r\n      \r\n      socket.on('connect_error', (error) => {\r\n        console.error('🔌 VerbfyTalk connection error:', error);\r\n        setConnectionError(`Connection failed: ${error.message}`);\r\n        setIsConnecting(false);\r\n      });\r\n\r\n      socket.on('reconnect_attempt', (attemptNumber) => {\r\n        console.log('🔄 VerbfyTalk reconnection attempt:', attemptNumber);\r\n        setReconnectionAttempts(attemptNumber);\r\n        setConnectionError(`Reconnecting... (Attempt ${attemptNumber}/5)`);\r\n      });\r\n\r\n      socket.on('reconnect', (attemptNumber) => {\r\n        console.log('✅ VerbfyTalk reconnected after', attemptNumber, 'attempts');\r\n        setConnectionError(null);\r\n        setReconnectionAttempts(0);\r\n      });\r\n\r\n      socket.on('reconnect_failed', () => {\r\n        console.error('❌ VerbfyTalk reconnection failed');\r\n        setConnectionError('Failed to reconnect. Please refresh the page.');\r\n        setIsConnecting(false);\r\n      });\r\n      \r\n      // Room events\r\n      socket.on('rooms:list', (roomsList: VerbfyTalkRoom[]) => {\r\n        setRooms(roomsList);\r\n      });\r\n      \r\n      socket.on('room:joined', (room: VerbfyTalkRoom) => {\r\n        setCurrentRoom(room);\r\n        console.log('🎤 Joined room:', room.name);\r\n      });\r\n      \r\n      socket.on('room:left', () => {\r\n        setCurrentRoom(null);\r\n        setParticipants([]);\r\n        stopVAD();\r\n        console.log('🎤 Left room');\r\n      });\r\n      \r\n      // Participant events with proper state management\r\n      socket.on('participants:update', (participantsList: VerbfyTalkParticipant[]) => {\r\n        setParticipants(participantsList);\r\n      });\r\n      \r\n      socket.on('participant:joined', (participant: VerbfyTalkParticipant) => {\r\n        console.log('👤 Participant joined:', participant.name);\r\n        setParticipants(prev => [...prev, participant]);\r\n      });\r\n      \r\n      socket.on('participant:left', (participantId: string) => {\r\n        console.log('👤 Participant left:', participantId);\r\n        setParticipants(prev => prev.filter(p => p.id !== participantId));\r\n        \r\n        // Cleanup peer connection for this participant\r\n        const peerConnection = peerConnectionsRef.current.get(participantId);\r\n        if (peerConnection) {\r\n          peerConnection.close();\r\n          peerConnectionsRef.current.delete(participantId);\r\n        }\r\n        \r\n        // Clear ICE candidate buffer for this participant\r\n        iceCandidateBufferRef.current.delete(participantId);\r\n      });\r\n\r\n      socket.on('participant:mute', (data: { participantId: string; isMuted: boolean }) => {\r\n        setParticipants(prev => \r\n          prev.map(p => \r\n            p.id === data.participantId \r\n              ? { ...p, isMuted: data.isMuted }\r\n              : p\r\n          )\r\n        );\r\n      });\r\n\r\n      socket.on('participant:speaking', (data: { participantId: string; isSpeaking: boolean }) => {\r\n        setParticipants(prev => \r\n          prev.map(p => \r\n            p.id === data.participantId \r\n              ? { ...p, isSpeaking: data.isSpeaking }\r\n              : p\r\n          )\r\n        );\r\n      });\r\n      \r\n      // WebRTC signaling with error handling\r\n      socket.on('webrtc:offer', async (data: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n        try {\r\n          await handleWebRTCOffer(data.from, data.offer);\r\n        } catch (error) {\r\n          console.error('❌ WebRTC offer handling failed:', error);\r\n          setConnectionError('Failed to establish voice connection');\r\n        }\r\n      });\r\n      \r\n      socket.on('webrtc:answer', async (data: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n        try {\r\n          await handleWebRTCAnswer(data.from, data.answer);\r\n        } catch (error) {\r\n          console.error('❌ WebRTC answer handling failed:', error);\r\n          setConnectionError('Failed to complete voice connection');\r\n        }\r\n      });\r\n      \r\n      socket.on('webrtc:ice-candidate', async (data: { from: string; candidate: RTCIceCandidateInit }) => {\r\n        try {\r\n          await handleICECandidate(data.from, data.candidate);\r\n        } catch (error) {\r\n          console.error('❌ ICE candidate handling failed:', error);\r\n          // Buffer the candidate for later if connection not ready\r\n          const buffer = iceCandidateBufferRef.current.get(data.from) || [];\r\n          buffer.push(data.candidate);\r\n          iceCandidateBufferRef.current.set(data.from, buffer);\r\n        }\r\n      });\r\n      \r\n      socketRef.current = socket;\r\n      \r\n      // Request rooms list\r\n      socket.emit('rooms:get');\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Failed to initialize VerbfyTalk:', error);\r\n      setConnectionError(error instanceof Error ? error.message : 'Unknown error');\r\n      setIsConnecting(false);\r\n    }\r\n  }, [token, stopVAD]);\r\n  \r\n  // WebRTC handlers with improved error handling\r\n  const handleWebRTCOffer = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = new RTCPeerConnection(WEBRTC_CONFIG);\r\n      \r\n      peerConnectionsRef.current.set(from, peerConnection);\r\n      \r\n      // Add local stream if available\r\n      if (localStreamRef.current) {\r\n        localStreamRef.current.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, localStreamRef.current!);\r\n        });\r\n      }\r\n      \r\n      // Handle ICE candidates\r\n      peerConnection.onicecandidate = (event) => {\r\n        if (event.candidate && socketRef.current?.connected) {\r\n          socketRef.current.emit('webrtc:ice-candidate', {\r\n            to: from,\r\n            candidate: event.candidate\r\n          });\r\n        }\r\n      };\r\n\r\n      peerConnection.onconnectionstatechange = () => {\r\n        console.log(`🔗 Peer connection state (${from}):`, peerConnection.connectionState);\r\n        if (peerConnection.connectionState === 'failed') {\r\n          peerConnection.close();\r\n          peerConnectionsRef.current.delete(from);\r\n        }\r\n      };\r\n\r\n      peerConnection.oniceconnectionstatechange = () => {\r\n        console.log(`🧊 ICE connection state (${from}):`, peerConnection.iceConnectionState);\r\n      };\r\n      \r\n      await peerConnection.setRemoteDescription(offer);\r\n      const answer = await peerConnection.createAnswer();\r\n      await peerConnection.setLocalDescription(answer);\r\n      \r\n      socketRef.current?.emit('webrtc:answer', { to: from, answer });\r\n      \r\n      // Process buffered ICE candidates\r\n      const bufferedCandidates = iceCandidateBufferRef.current.get(from) || [];\r\n      for (const candidate of bufferedCandidates) {\r\n        try {\r\n          await peerConnection.addIceCandidate(candidate);\r\n        } catch (error) {\r\n          console.warn('Failed to add buffered ICE candidate:', error);\r\n        }\r\n      }\r\n      iceCandidateBufferRef.current.delete(from);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ WebRTC offer handling failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  const handleWebRTCAnswer = async (from: string, answer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection && peerConnection.signalingState !== 'closed') {\r\n        await peerConnection.setRemoteDescription(answer);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ WebRTC answer handling failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  const handleICECandidate = async (from: string, candidate: RTCIceCandidateInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection && peerConnection.remoteDescription) {\r\n        await peerConnection.addIceCandidate(candidate);\r\n      } else {\r\n        // Buffer candidate if connection not ready\r\n        const buffer = iceCandidateBufferRef.current.get(from) || [];\r\n        buffer.push(candidate);\r\n        iceCandidateBufferRef.current.set(from, buffer);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ ICE candidate handling failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Room management\r\n  const joinRoom = useCallback(async (roomId: string): Promise<boolean> => {\r\n    if (!socketRef.current?.connected) {\r\n      setConnectionError('Not connected to server');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      socketRef.current.emit('room:join', { roomId });\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Failed to join room:', error);\r\n      setConnectionError('Failed to join room');\r\n      return false;\r\n    }\r\n  }, []);\r\n  \r\n  const leaveRoom = useCallback(() => {\r\n    if (!socketRef.current?.connected || !currentRoom) return;\r\n    \r\n    socketRef.current.emit('room:leave', { roomId: currentRoom.id });\r\n    stopVAD();\r\n  }, [currentRoom, stopVAD]);\r\n  \r\n  const createRoom = useCallback(async (name: string): Promise<string | null> => {\r\n    if (!socketRef.current?.connected) {\r\n      setConnectionError('Not connected to server');\r\n      return null;\r\n    }\r\n    \r\n    try {\r\n      return new Promise((resolve) => {\r\n        const timeout = setTimeout(() => {\r\n          resolve(null);\r\n        }, 10000); // 10 second timeout\r\n        \r\n        socketRef.current?.emit('room:create', { name }, (response: { success: boolean; roomId?: string }) => {\r\n          clearTimeout(timeout);\r\n          if (response.success && response.roomId) {\r\n            resolve(response.roomId);\r\n          } else {\r\n            resolve(null);\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('❌ Failed to create room:', error);\r\n      setConnectionError('Failed to create room');\r\n      return null;\r\n    }\r\n  }, []);\r\n  \r\n  // Audio controls with unified mute logic\r\n  const requestMicrophone = useCallback(async (): Promise<boolean> => {\r\n    try {\r\n      console.log('🎤 Requesting microphone access...');\r\n      \r\n      // Check if getUserMedia is supported\r\n      if (!navigator.mediaDevices?.getUserMedia) {\r\n        throw new Error('getUserMedia is not supported in this browser');\r\n      }\r\n\r\n      // Check permission status first\r\n      let permissionStatus = 'unknown';\r\n      try {\r\n        if (navigator.permissions?.query) {\r\n          const result = await navigator.permissions.query({ \r\n            name: 'microphone' as PermissionName \r\n          });\r\n          permissionStatus = result.state;\r\n          console.log('🔍 Microphone permission status:', permissionStatus);\r\n        }\r\n      } catch (error) {\r\n        console.log('⚠️ Could not check permission status, proceeding with getUserMedia');\r\n      }\r\n\r\n      // Request microphone access\r\n      const stream = await navigator.mediaDevices.getUserMedia({ \r\n        audio: {\r\n          echoCancellation: true,\r\n          noiseSuppression: true,\r\n          autoGainControl: true,\r\n          sampleRate: 44100\r\n        }, \r\n        video: false \r\n      });\r\n      \r\n      localStreamRef.current = stream;\r\n      \r\n      // Set up audio context for volume control\r\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      const source = audioContext.createMediaStreamSource(stream);\r\n      const gainNode = audioContext.createGain();\r\n      \r\n      source.connect(gainNode);\r\n      gainNode.connect(audioContext.destination);\r\n      \r\n      // Store references\r\n      audioContextRef.current = audioContext;\r\n      sourceNodeRef.current = source;\r\n      gainNodeRef.current = gainNode;\r\n      \r\n      // Mute initially using gain node\r\n      gainNode.gain.value = 0;\r\n      setIsMuted(true);\r\n      \r\n      console.log('✅ Microphone access granted');\r\n      return true;\r\n      \r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    } catch (error: any) {\r\n      console.error('❌ Microphone error:', error);\r\n      \r\n      const errorMessage = MICROPHONE_ERRORS[error.name as keyof typeof MICROPHONE_ERRORS] || \r\n                          MICROPHONE_ERRORS.UnknownError;\r\n      \r\n      setConnectionError(errorMessage);\r\n      return false;\r\n    }\r\n  }, []);\r\n  \r\n  const toggleMute = useCallback(() => {\r\n    if (!localStreamRef.current || !gainNodeRef.current) return;\r\n\r\n    const newMutedState = !isMuted;\r\n    setIsMuted(newMutedState);\r\n    \r\n    // Use gain node for mute/unmute (more reliable than track.enabled)\r\n    gainNodeRef.current.gain.value = newMutedState ? 0 : 1;\r\n    \r\n    // Also update track enabled state for WebRTC\r\n    const audioTrack = localStreamRef.current.getAudioTracks()[0];\r\n    if (audioTrack) {\r\n      audioTrack.enabled = !newMutedState;\r\n    }\r\n    \r\n    // Notify other participants\r\n    socketRef.current?.emit('participant:mute', { \r\n      roomId: currentRoom?.id, \r\n      isMuted: newMutedState \r\n    });\r\n  }, [isMuted, currentRoom]);\r\n  \r\n  // Comprehensive cleanup\r\n  const disconnect = useCallback(() => {\r\n    console.log('🧹 Cleaning up VerbfyTalk...');\r\n    \r\n    // Stop VAD\r\n    stopVAD();\r\n    \r\n    // Stop local stream\r\n    if (localStreamRef.current) {\r\n      localStreamRef.current.getTracks().forEach(track => {\r\n        track.stop();\r\n      });\r\n      localStreamRef.current = null;\r\n    }\r\n    \r\n    // Close audio context\r\n    if (audioContextRef.current) {\r\n      audioContextRef.current.close();\r\n      audioContextRef.current = null;\r\n    }\r\n    \r\n    // Disconnect audio nodes\r\n    if (sourceNodeRef.current) {\r\n      sourceNodeRef.current.disconnect();\r\n      sourceNodeRef.current = null;\r\n    }\r\n    gainNodeRef.current = null;\r\n    \r\n    // Close peer connections\r\n    peerConnectionsRef.current.forEach(connection => {\r\n      connection.close();\r\n    });\r\n    peerConnectionsRef.current.clear();\r\n    \r\n    // Clear ICE candidate buffers\r\n    iceCandidateBufferRef.current.clear();\r\n    \r\n    // Disconnect socket\r\n    if (socketRef.current) {\r\n      socketRef.current.disconnect();\r\n      socketRef.current = null;\r\n    }\r\n    \r\n    // Reset state\r\n    setIsConnected(false);\r\n    setIsConnecting(false);\r\n    setCurrentRoom(null);\r\n    setParticipants([]);\r\n    setConnectionError(null);\r\n    setReconnectionAttempts(0);\r\n    setIsMuted(false);\r\n    isInitializedRef.current = false;\r\n    \r\n    console.log('✅ VerbfyTalk cleanup completed');\r\n  }, [stopVAD]);\r\n  \r\n  // Initialize on mount\r\n  useEffect(() => {\r\n    if (token && !isInitializedRef.current) {\r\n      initializeSocket();\r\n    }\r\n    \r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [token, initializeSocket, disconnect]);\r\n  \r\n  // Start VAD when microphone is available and in room\r\n  useEffect(() => {\r\n    if (localStreamRef.current && currentRoom && isConnected) {\r\n      const cleanup = startVAD();\r\n      return cleanup;\r\n    }\r\n  }, [currentRoom, isConnected, startVAD]);\r\n  \r\n  return {\r\n    rooms,\r\n    currentRoom,\r\n    joinRoom,\r\n    leaveRoom,\r\n    createRoom,\r\n    isMuted,\r\n    isConnected,\r\n    toggleMute,\r\n    requestMicrophone,\r\n    participants,\r\n    isConnecting,\r\n    connectionError,\r\n    reconnectionAttempts,\r\n    disconnect\r\n  };\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useAuthContext } from '@/context/AuthContext';\r\nimport { useVerbfyTalk } from '@/hooks/useVerbfyTalk';\r\nimport { tokenStorage } from '@/utils/secureStorage';\r\nimport { toast } from 'react-hot-toast';\r\n\r\ninterface VoiceChatRoomProps {\r\n  roomId: string;\r\n  onLeave?: () => void;\r\n}\r\n\r\nexport default function VoiceChatRoom({ roomId, onLeave }: VoiceChatRoomProps) {\r\n  const { user } = useAuthContext();\r\n  const [isJoining, setIsJoining] = useState(false);\r\n  const [messages, setMessages] = useState<Array<{ id: string; text: string; username: string; timestamp: Date }>>([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  \r\n  const token = tokenStorage.getToken();\r\n  \r\n  const {\r\n    isConnected,\r\n    isConnecting,\r\n    currentRoom,\r\n    participants,\r\n    isMuted,\r\n    connectionError,\r\n    reconnectionAttempts,\r\n    joinRoom,\r\n    leaveRoom,\r\n    toggleMute,\r\n    requestMicrophone,\r\n    disconnect\r\n  } = useVerbfyTalk(token || '');\r\n\r\n  // Join room when connected\r\n  useEffect(() => {\r\n    const joinRoomWhenReady = async () => {\r\n      if (isConnected && !currentRoom && !isJoining) {\r\n        setIsJoining(true);\r\n        try {\r\n          const success = await joinRoom(roomId);\r\n          if (success) {\r\n            toast.success('Joined room successfully!');\r\n          } else {\r\n            toast.error('Failed to join room');\r\n          }\r\n        } catch (error) {\r\n          console.error('❌ Failed to join room:', error);\r\n          toast.error('Failed to join room');\r\n        } finally {\r\n          setIsJoining(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    joinRoomWhenReady();\r\n  }, [isConnected, currentRoom, roomId, isJoining, joinRoom]);\r\n\r\n  // Show connection errors\r\n  useEffect(() => {\r\n    if (connectionError) {\r\n      toast.error(connectionError);\r\n    }\r\n  }, [connectionError]);\r\n\r\n  // Show reconnection attempts\r\n  useEffect(() => {\r\n    if (reconnectionAttempts > 0) {\r\n      toast.loading(`Reconnecting... (Attempt ${reconnectionAttempts}/5)`, { id: 'reconnecting' });\r\n    } else {\r\n      toast.dismiss('reconnecting');\r\n    }\r\n  }, [reconnectionAttempts]);\r\n\r\n  const handleLeaveRoom = () => {\r\n    leaveRoom();\r\n    disconnect();\r\n    onLeave?.();\r\n  };\r\n\r\n  const handleRequestMicrophone = async () => {\r\n    const granted = await requestMicrophone();\r\n    if (granted) {\r\n      toast.success('Microphone access granted!');\r\n      if (isConnected) {\r\n        await joinRoom(roomId);\r\n      }\r\n    } else {\r\n      toast.error('Microphone access denied');\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (inputMessage.trim()) {\r\n      // Add message to local state\r\n      const newMessage = {\r\n        id: Date.now().toString(),\r\n        text: inputMessage,\r\n        username: user?.name || 'You',\r\n        timestamp: new Date()\r\n      };\r\n      setMessages(prev => [...prev, newMessage]);\r\n      setInputMessage('');\r\n      \r\n      // TODO: Send message via Socket.IO\r\n    }\r\n  };\r\n\r\n  const getConnectionStatusColor = () => {\r\n    if (isConnecting) return 'text-yellow-600';\r\n    if (isConnected) return 'text-green-600';\r\n    if (connectionError) return 'text-red-600';\r\n    return 'text-gray-600';\r\n  };\r\n\r\n  const getConnectionStatusIcon = () => {\r\n    if (isConnecting) return '🟡';\r\n    if (isConnected) return '🟢';\r\n    if (connectionError) return '🔴';\r\n    return '⚪';\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6\">\r\n      {/* Header */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className={`text-2xl ${getConnectionStatusColor()}`}>\r\n              {getConnectionStatusIcon()}\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n                {currentRoom?.name || `Room: ${roomId}`}\r\n              </h1>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                {isConnecting ? 'Connecting...' : \r\n                 isConnected ? `${participants.length} participants` : \r\n                 'Disconnected'}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-3\">\r\n            {!isConnected && (\r\n              <button\r\n                onClick={handleRequestMicrophone}\r\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors\"\r\n              >\r\n                Enable Microphone\r\n              </button>\r\n            )}\r\n            \r\n            <button\r\n              onClick={toggleMute}\r\n              disabled={!isConnected}\r\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\r\n                isMuted \r\n                  ? 'bg-red-600 hover:bg-red-700 text-white' \r\n                  : 'bg-green-600 hover:bg-green-700 text-white'\r\n              } ${!isConnected ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n            >\r\n              {isMuted ? 'Unmute' : 'Mute'}\r\n            </button>\r\n            \r\n            <button\r\n              onClick={handleLeaveRoom}\r\n              className=\"bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors\"\r\n            >\r\n              Leave Room\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Participants */}\r\n        <div className=\"lg:col-span-1\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n              Participants ({participants.length})\r\n            </h2>\r\n            <div className=\"space-y-3\">\r\n              {participants.map((participant) => (\r\n                <div key={participant.id} className=\"flex items-center space-x-3\">\r\n                  <div className={`w-3 h-3 rounded-full ${\r\n                    participant.isSpeaking ? 'bg-green-500' : 'bg-gray-300'\r\n                  }`} />\r\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                    {participant.name}\r\n                  </span>\r\n                  {participant.isMuted && (\r\n                    <span className=\"text-xs text-red-500\">🔇</span>\r\n                  )}\r\n                  {participant.isSpeaking && (\r\n                    <span className=\"text-xs text-green-500\">🎤</span>\r\n                  )}\r\n                </div>\r\n              ))}\r\n              {participants.length === 0 && (\r\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                  No participants yet\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chat */}\r\n        <div className=\"lg:col-span-2\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n              Chat\r\n            </h2>\r\n            \r\n            {/* Messages */}\r\n            <div className=\"h-64 overflow-y-auto mb-4 space-y-2\">\r\n              {messages.map((message) => (\r\n                <div key={message.id} className=\"text-sm\">\r\n                  <span className=\"font-medium text-blue-600 dark:text-blue-400\">\r\n                    {message.username}:\r\n                  </span>{' '}\r\n                  <span className=\"text-gray-700 dark:text-gray-300\">\r\n                    {message.text}\r\n                  </span>\r\n                  <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-2\">\r\n                    {message.timestamp.toLocaleTimeString()}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n              {messages.length === 0 && (\r\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                  No messages yet. Start the conversation!\r\n                </p>\r\n              )}\r\n            </div>\r\n            \r\n            {/* Message Input */}\r\n            <form onSubmit={handleSendMessage} className=\"flex space-x-2\">\r\n              <input\r\n                type=\"text\"\r\n                value={inputMessage}\r\n                onChange={(e) => setInputMessage(e.target.value)}\r\n                placeholder=\"Type a message...\"\r\n                className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\r\n                disabled={!isConnected}\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                disabled={!isConnected || !inputMessage.trim()}\r\n                className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              >\r\n                Send\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Error Display */}\r\n      {connectionError && (\r\n        <div className=\"mt-6 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\r\n          <div className=\"flex\">\r\n            <div className=\"flex-shrink-0\">\r\n              <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n            </div>\r\n            <div className=\"ml-3\">\r\n              <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\r\n                Connection Error\r\n              </h3>\r\n              <div className=\"mt-2 text-sm text-red-700 dark:text-red-300\">\r\n                {connectionError}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport VoiceChatRoom from '@/components/voiceChat/VoiceChatRoom';\r\n\r\nexport default function VerbfyTalkRoom() {\r\n  const router = useRouter();\r\n  const { roomId } = router.query as { roomId?: string };\r\n\r\n  const handleLeaveRoom = () => {\r\n    router.push('/verbfy-talk');\r\n  };\r\n\r\n  if (!roomId) {\r\n    return (\r\n      <DashboardLayout title=\"VerbfyTalk\">\r\n        <div className=\"flex items-center justify-center min-h-screen\">\r\n          <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Room Not Found</h1>\r\n            <p className=\"text-gray-600 mb-6\">The room you're looking for doesn't exist.</p>\r\n            <button\r\n              onClick={() => router.push('/verbfy-talk')}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n            >\r\n              Back to Rooms\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>VerbfyTalk Room - {roomId}</title>\r\n        <meta name=\"description\" content=\"Join the conversation in VerbfyTalk\" />\r\n      </Head>\r\n      \r\n      <DashboardLayout title={`VerbfyTalk Room: ${roomId}`}>\r\n        <VoiceChatRoom roomId={roomId} onLeave={handleLeaveRoom} />\r\n      </DashboardLayout>\r\n    </>\r\n  );\r\n}"],"names":["window","__NEXT_P","push","__webpack_require__","WEBRTC_CONFIG","iceServers","urls","iceCandidatePoolSize","MICROPHONE_ERRORS","NotAllowedError","NotFoundError","NotSupportedError","NotReadableError","AbortError","SecurityError","InvalidStateError","UnknownError","useVerbfyTalk","rooms","setRooms","useState","currentRoom","setCurrentRoom","participants","setParticipants","isMuted","setIsMuted","isConnected","setIsConnected","isConnecting","setIsConnecting","connectionError","setConnectionError","reconnectionAttempts","setReconnectionAttempts","socketRef","useRef","localStreamRef","peerConnectionsRef","Map","audioContextRef","gainNodeRef","sourceNodeRef","iceCandidateBufferRef","vadIntervalRef","isInitializedRef","startVAD","useCallback","current","getAudioTracks","audioContext","AudioContext","webkitAudioContext","source","createMediaStreamSource","analyser","createAnalyser","dataArray","Uint8Array","frequencyBinCount","connect","fftSize","setInterval","getByteFrequencyData","average","reduce","sum","value","length","connected","emit","roomId","id","isSpeaking","clearInterval","disconnect","close","stopVAD","initializeSocket","socket","io","process","env","NEXT_PUBLIC_BACKEND_URL","path","transports","forceNew","withCredentials","auth","token","timeout","reconnectionDelay","reconnectionDelayMax","upgrade","rememberUpgrade","on","console","log","reason","forEach","connection","clear","error","concat","message","attemptNumber","roomsList","room","name","participantsList","participant","prev","participantId","filter","p","peerConnection","get","delete","map","data","handleWebRTCOffer","from","offer","handleWebRTCAnswer","answer","handleICECandidate","candidate","buffer","set","Error","RTCPeerConnection","getTracks","track","addTrack","onicecandidate","event","to","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","setRemoteDescription","createAnswer","setLocalDescription","addIceCandidate","warn","signalingState","remoteDescription","joinRoom","leaveRoom","createRoom","Promise","setTimeout","resolve","clearTimeout","response","success","requestMicrophone","navigator","mediaDevices","getUserMedia","permissionStatus","permissions","query","result","state","stream","audio","echoCancellation","noiseSuppression","autoGainControl","sampleRate","video","gainNode","createGain","destination","gain","toggleMute","newMutedState","audioTrack","enabled","stop","useEffect","VoiceChatRoom","param","onLeave","user","useAuthContext","isJoining","setIsJoining","messages","setMessages","inputMessage","setInputMessage","tokenStorage","getToken","joinRoomWhenReady","toast","loading","dismiss","handleRequestMicrophone","jsx_runtime","jsxs","div","className","jsx","h1","button","onClick","disabled","h2","span","username","text","timestamp","toLocaleTimeString","form","onSubmit","e","preventDefault","trim","newMessage","Date","now","toString","input","type","onChange","target","placeholder","svg","viewBox","fill","fillRule","d","clipRule","h3","VerbfyTalkRoom","router","useRouter","Fragment","Head","title","meta","content","DashboardLayout"],"sourceRoot":""}