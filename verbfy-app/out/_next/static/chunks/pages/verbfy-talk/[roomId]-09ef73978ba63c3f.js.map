{"version":3,"file":"static/chunks/pages/verbfy-talk/[roomId]-09ef73978ba63c3f.js","mappings":"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","sources":["webpack://_N_E/?9c3e","webpack://_N_E/./src/hooks/useVerbfyTalk.ts","webpack://_N_E/./src/components/voiceChat/VoiceChatRoom.tsx","webpack://_N_E/./pages/verbfy-talk/[roomId].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/verbfy-talk/[roomId]\",\n      function () {\n        return require(\"private-next-pages/verbfy-talk/[roomId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/verbfy-talk/[roomId]\"])\n      });\n    }\n  ","import { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\n\r\ninterface VerbfyTalkRoom {\r\n  id: string;\r\n  name: string;\r\n  participants: number;\r\n  maxParticipants: number;\r\n  isActive: boolean;\r\n}\r\n\r\ninterface VerbfyTalkParticipant {\r\n  id: string;\r\n  name: string;\r\n  isSpeaking: boolean;\r\n  isMuted: boolean;\r\n  isSpeaker: boolean;\r\n}\r\n\r\ninterface VerbfyTalkMessage {\r\n  id: string;\r\n  content: string;\r\n  sender: string;\r\n  senderName: string;\r\n  timestamp: number;\r\n}\r\n\r\ninterface UseVerbfyTalkReturn {\r\n  // Room management\r\n  rooms: VerbfyTalkRoom[];\r\n  currentRoom: VerbfyTalkRoom | null;\r\n  joinRoom: (roomId: string) => Promise<boolean>;\r\n  leaveRoom: () => void;\r\n  createRoom: (name: string) => Promise<string | null>;\r\n  \r\n  // Audio controls\r\n  isMuted: boolean;\r\n  isSpeaker: boolean;\r\n  isConnected: boolean;\r\n  toggleMute: () => void;\r\n  toggleSpeaker: () => void;\r\n  requestMicrophone: () => Promise<boolean>;\r\n  \r\n  // Media streams\r\n  localStream: MediaStream | null;\r\n  remoteStreams: { [peerId: string]: MediaStream };\r\n  \r\n  // Participants and messages\r\n  participants: VerbfyTalkParticipant[];\r\n  messages: VerbfyTalkMessage[];\r\n  sendMessage: (content: string) => void;\r\n  \r\n  // Connection status\r\n  isConnecting: boolean;\r\n  connectionError: string | null;\r\n  reconnectionAttempts: number;\r\n  status: 'disconnected' | 'connecting' | 'connected' | 'error';\r\n  isInitialized: boolean;\r\n  \r\n  // Cleanup\r\n  disconnect: () => void;\r\n}\r\n\r\n// WebRTC Configuration\r\nconst WEBRTC_CONFIG: RTCConfiguration = {\r\n  iceServers: [\r\n    { urls: 'stun:stun.l.google.com:19302' },\r\n    { urls: 'stun:stun1.l.google.com:19302' },\r\n    { urls: 'stun:stun2.l.google.com:19302' },\r\n    { urls: 'stun:stun3.l.google.com:19302' },\r\n    { urls: 'stun:stun4.l.google.com:19302' }\r\n  ],\r\n  iceCandidatePoolSize: 10\r\n};\r\n\r\n// Microphone error types\r\nconst MICROPHONE_ERRORS = {\r\n  NotAllowedError: 'Microphone permission denied. Please allow microphone access in your browser settings.',\r\n  NotFoundError: 'No microphone found. Please connect a microphone and try again.',\r\n  NotSupportedError: 'Microphone not supported in this browser.',\r\n  NotReadableError: 'Microphone is already in use by another application.',\r\n  AbortError: 'Microphone access was aborted.',\r\n  SecurityError: 'Microphone access blocked due to security restrictions.',\r\n  InvalidStateError: 'Microphone is in an invalid state.',\r\n  UnknownError: 'Unknown microphone error occurred.'\r\n} as const;\r\n\r\nexport const useVerbfyTalk = (token: string): UseVerbfyTalkReturn => {\r\n  const [rooms, setRooms] = useState<VerbfyTalkRoom[]>([]);\r\n  const [currentRoom, setCurrentRoom] = useState<VerbfyTalkRoom | null>(null);\r\n  const [participants, setParticipants] = useState<VerbfyTalkParticipant[]>([]);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isSpeaker, setIsSpeaker] = useState(false);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [connectionError, setConnectionError] = useState<string | null>(null);\r\n  const [reconnectionAttempts, setReconnectionAttempts] = useState(0);\r\n  const [remoteStreams, setRemoteStreams] = useState<{ [peerId: string]: MediaStream }>({});\r\n  const [status, setStatus] = useState<'disconnected' | 'connecting' | 'connected' | 'error'>('disconnected');\r\n  const [messages, setMessages] = useState<VerbfyTalkMessage[]>([]);\r\n  \r\n  // Refs\r\n  const socketRef = useRef<Socket | null>(null);\r\n  const localStreamRef = useRef<MediaStream | null>(null);\r\n  const peerConnectionsRef = useRef<Map<string, RTCPeerConnection>>(new Map());\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const gainNodeRef = useRef<GainNode | null>(null);\r\n  const sourceNodeRef = useRef<MediaStreamAudioSourceNode | null>(null);\r\n  const iceCandidateBufferRef = useRef<Map<string, RTCIceCandidateInit[]>>(new Map());\r\n  const vadIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const isInitializedRef = useRef(false);\r\n\r\n  // Voice Activity Detection\r\n  const startVAD = useCallback(() => {\r\n    if (!localStreamRef.current || vadIntervalRef.current) return;\r\n\r\n    const audioTrack = localStreamRef.current.getAudioTracks()[0];\r\n    if (!audioTrack) return;\r\n\r\n    // Simple VAD using audio levels\r\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n    const source = audioContext.createMediaStreamSource(localStreamRef.current);\r\n    const analyser = audioContext.createAnalyser();\r\n    const dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n    source.connect(analyser);\r\n    analyser.fftSize = 256;\r\n\r\n    vadIntervalRef.current = setInterval(() => {\r\n      analyser.getByteFrequencyData(dataArray);\r\n      const average = dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;\r\n      const isSpeaking = average > 30; // Threshold for voice activity\r\n\r\n      // Update local speaking state\r\n      if (socketRef.current?.connected && currentRoom) {\r\n        socketRef.current.emit('participant:speaking', {\r\n          roomId: currentRoom.id,\r\n          isSpeaking\r\n        });\r\n      }\r\n    }, 100);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (vadIntervalRef.current) {\r\n        clearInterval(vadIntervalRef.current);\r\n        vadIntervalRef.current = null;\r\n      }\r\n      source.disconnect();\r\n      analyser.disconnect();\r\n      audioContext.close();\r\n    };\r\n  }, [currentRoom]);\r\n\r\n  // Stop VAD\r\n  const stopVAD = useCallback(() => {\r\n    if (vadIntervalRef.current) {\r\n      clearInterval(vadIntervalRef.current);\r\n      vadIntervalRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Initialize Socket.IO connection\r\n  const initializeSocket = useCallback(async () => {\r\n    if (!token || isInitializedRef.current) return;\r\n    \r\n         try {\r\n       setIsConnecting(true);\r\n       setStatus('connecting');\r\n       setConnectionError(null);\r\n       setReconnectionAttempts(0);\r\n      \r\n      // Cleanup existing socket if any\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n      }\r\n      \r\n      const socket = io(process.env.NEXT_PUBLIC_BACKEND_URL || 'https://api.verbfy.com', {\r\n        path: '/socket.io',\r\n        transports: ['websocket', 'polling'],\r\n        forceNew: false, // Changed from true to prevent socket recreation\r\n        withCredentials: true,\r\n        auth: { token },\r\n        timeout: 20000,\r\n        reconnectionAttempts: 5,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        upgrade: true,\r\n        rememberUpgrade: true\r\n      });\r\n      \r\n             socket.on('connect', () => {\r\n         console.log('🔌 VerbfyTalk connected:', socket.id);\r\n         setIsConnected(true);\r\n         setIsConnecting(false);\r\n         setStatus('connected');\r\n         setConnectionError(null);\r\n         setReconnectionAttempts(0);\r\n         isInitializedRef.current = true;\r\n       });\r\n      \r\n             socket.on('disconnect', (reason) => {\r\n         console.log('🔌 VerbfyTalk disconnected:', reason);\r\n         setIsConnected(false);\r\n         setStatus('disconnected');\r\n         setCurrentRoom(null);\r\n         setParticipants([]);\r\n         stopVAD();\r\n         \r\n         // Cleanup peer connections on disconnect\r\n         peerConnectionsRef.current.forEach(connection => connection.close());\r\n         peerConnectionsRef.current.clear();\r\n         iceCandidateBufferRef.current.clear();\r\n       });\r\n      \r\n             socket.on('connect_error', (error) => {\r\n         console.error('🔌 VerbfyTalk connection error:', error);\r\n         setStatus('error');\r\n         setConnectionError(`Connection failed: ${error.message}`);\r\n         setIsConnecting(false);\r\n       });\r\n\r\n             socket.on('reconnect_attempt', (attemptNumber) => {\r\n         console.log('🔄 VerbfyTalk reconnection attempt:', attemptNumber);\r\n         setStatus('connecting');\r\n         setReconnectionAttempts(attemptNumber);\r\n         setConnectionError(`Reconnecting... (Attempt ${attemptNumber}/5)`);\r\n       });\r\n\r\n             socket.on('reconnect', (attemptNumber) => {\r\n         console.log('✅ VerbfyTalk reconnected after', attemptNumber, 'attempts');\r\n         setStatus('connected');\r\n         setConnectionError(null);\r\n         setReconnectionAttempts(0);\r\n       });\r\n\r\n             socket.on('reconnect_failed', () => {\r\n         console.error('❌ VerbfyTalk reconnection failed');\r\n         setStatus('error');\r\n         setConnectionError('Failed to reconnect. Please refresh the page.');\r\n         setIsConnecting(false);\r\n       });\r\n      \r\n      // Room events\r\n      socket.on('rooms:list', (roomsList: VerbfyTalkRoom[]) => {\r\n        setRooms(roomsList);\r\n      });\r\n      \r\n      socket.on('room:joined', (room: VerbfyTalkRoom) => {\r\n        setCurrentRoom(room);\r\n        console.log('🎤 Joined room:', room.name);\r\n      });\r\n      \r\n      socket.on('room:left', () => {\r\n        setCurrentRoom(null);\r\n        setParticipants([]);\r\n        stopVAD();\r\n        console.log('🎤 Left room');\r\n      });\r\n      \r\n      // Participant events with proper state management\r\n      socket.on('participants:update', (participantsList: VerbfyTalkParticipant[]) => {\r\n        setParticipants(participantsList);\r\n      });\r\n      \r\n      socket.on('participant:joined', (participant: VerbfyTalkParticipant) => {\r\n        console.log('👤 Participant joined:', participant.name);\r\n        setParticipants(prev => [...prev, participant]);\r\n      });\r\n      \r\n      socket.on('participant:left', (participantId: string) => {\r\n        console.log('👤 Participant left:', participantId);\r\n        setParticipants(prev => prev.filter(p => p.id !== participantId));\r\n        \r\n        // Cleanup peer connection for this participant\r\n        const peerConnection = peerConnectionsRef.current.get(participantId);\r\n        if (peerConnection) {\r\n          peerConnection.close();\r\n          peerConnectionsRef.current.delete(participantId);\r\n        }\r\n        \r\n        // Clear ICE candidate buffer for this participant\r\n        iceCandidateBufferRef.current.delete(participantId);\r\n        \r\n        // Remove remote stream for this participant\r\n        setRemoteStreams(prev => {\r\n          const newStreams = { ...prev };\r\n          delete newStreams[participantId];\r\n          return newStreams;\r\n        });\r\n      });\r\n\r\n      socket.on('participant:mute', (data: { participantId: string; isMuted: boolean }) => {\r\n        setParticipants(prev => \r\n          prev.map(p => \r\n            p.id === data.participantId \r\n              ? { ...p, isMuted: data.isMuted }\r\n              : p\r\n          )\r\n        );\r\n      });\r\n\r\n      socket.on('participant:speaking', (data: { participantId: string; isSpeaking: boolean }) => {\r\n        setParticipants(prev => \r\n          prev.map(p => \r\n            p.id === data.participantId \r\n              ? { ...p, isSpeaking: data.isSpeaking }\r\n              : p\r\n          )\r\n        );\r\n      });\r\n      \r\n      // WebRTC signaling with error handling\r\n      socket.on('webrtc:offer', async (data: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n        try {\r\n          await handleWebRTCOffer(data.from, data.offer);\r\n        } catch (error) {\r\n          console.error('❌ WebRTC offer handling failed:', error);\r\n          setConnectionError('Failed to establish voice connection');\r\n        }\r\n      });\r\n      \r\n      socket.on('webrtc:answer', async (data: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n        try {\r\n          await handleWebRTCAnswer(data.from, data.answer);\r\n        } catch (error) {\r\n          console.error('❌ WebRTC answer handling failed:', error);\r\n          setConnectionError('Failed to complete voice connection');\r\n        }\r\n      });\r\n      \r\n      socket.on('webrtc:ice-candidate', async (data: { from: string; candidate: RTCIceCandidateInit }) => {\r\n        try {\r\n          await handleICECandidate(data.from, data.candidate);\r\n        } catch (error) {\r\n          console.error('❌ ICE candidate handling failed:', error);\r\n          // Buffer the candidate for later if connection not ready\r\n          const buffer = iceCandidateBufferRef.current.get(data.from) || [];\r\n          buffer.push(data.candidate);\r\n          iceCandidateBufferRef.current.set(data.from, buffer);\r\n        }\r\n      });\r\n      \r\n      socketRef.current = socket;\r\n      \r\n      // Request rooms list\r\n      socket.emit('rooms:get');\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Failed to initialize VerbfyTalk:', error);\r\n      setConnectionError(error instanceof Error ? error.message : 'Unknown error');\r\n      setIsConnecting(false);\r\n    }\r\n  }, [token, stopVAD]);\r\n  \r\n  // WebRTC handlers with improved error handling\r\n  const handleWebRTCOffer = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = new RTCPeerConnection(WEBRTC_CONFIG);\r\n      \r\n      peerConnectionsRef.current.set(from, peerConnection);\r\n      \r\n      // Add local stream if available\r\n      if (localStreamRef.current) {\r\n        localStreamRef.current.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, localStreamRef.current!);\r\n        });\r\n      }\r\n      \r\n      // Handle ICE candidates\r\n      peerConnection.onicecandidate = (event) => {\r\n        if (event.candidate && socketRef.current?.connected) {\r\n          socketRef.current.emit('webrtc:ice-candidate', {\r\n            to: from,\r\n            candidate: event.candidate\r\n          });\r\n        }\r\n      };\r\n\r\n      peerConnection.onconnectionstatechange = () => {\r\n        console.log(`🔗 Peer connection state (${from}):`, peerConnection.connectionState);\r\n        if (peerConnection.connectionState === 'failed') {\r\n          peerConnection.close();\r\n          peerConnectionsRef.current.delete(from);\r\n        }\r\n      };\r\n\r\n      peerConnection.oniceconnectionstatechange = () => {\r\n        console.log(`🧊 ICE connection state (${from}):`, peerConnection.iceConnectionState);\r\n      };\r\n\r\n      // Handle incoming remote streams\r\n      peerConnection.ontrack = (event) => {\r\n        console.log(`🎵 Received remote stream from ${from}`);\r\n        setRemoteStreams(prev => ({\r\n          ...prev,\r\n          [from]: event.streams[0]\r\n        }));\r\n      };\r\n      \r\n      await peerConnection.setRemoteDescription(offer);\r\n      const answer = await peerConnection.createAnswer();\r\n      await peerConnection.setLocalDescription(answer);\r\n      \r\n      socketRef.current?.emit('webrtc:answer', { to: from, answer });\r\n      \r\n      // Process buffered ICE candidates\r\n      const bufferedCandidates = iceCandidateBufferRef.current.get(from) || [];\r\n      for (const candidate of bufferedCandidates) {\r\n        try {\r\n          await peerConnection.addIceCandidate(candidate);\r\n        } catch (error) {\r\n          console.warn('Failed to add buffered ICE candidate:', error);\r\n        }\r\n      }\r\n      iceCandidateBufferRef.current.delete(from);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ WebRTC offer handling failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  const handleWebRTCAnswer = async (from: string, answer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection && peerConnection.signalingState !== 'closed') {\r\n        await peerConnection.setRemoteDescription(answer);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ WebRTC answer handling failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  const handleICECandidate = async (from: string, candidate: RTCIceCandidateInit) => {\r\n    try {\r\n      const peerConnection = peerConnectionsRef.current.get(from);\r\n      if (peerConnection && peerConnection.remoteDescription) {\r\n        await peerConnection.addIceCandidate(candidate);\r\n      } else {\r\n        // Buffer candidate if connection not ready\r\n        const buffer = iceCandidateBufferRef.current.get(from) || [];\r\n        buffer.push(candidate);\r\n        iceCandidateBufferRef.current.set(from, buffer);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ ICE candidate handling failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Room management\r\n  const joinRoom = useCallback(async (roomId: string): Promise<boolean> => {\r\n    if (!socketRef.current?.connected) {\r\n      setConnectionError('Not connected to server');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      socketRef.current.emit('room:join', { roomId });\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Failed to join room:', error);\r\n      setConnectionError('Failed to join room');\r\n      return false;\r\n    }\r\n  }, []);\r\n  \r\n  const leaveRoom = useCallback(() => {\r\n    if (!socketRef.current?.connected || !currentRoom) return;\r\n    \r\n    socketRef.current.emit('room:leave', { roomId: currentRoom.id });\r\n    stopVAD();\r\n  }, [currentRoom, stopVAD]);\r\n  \r\n  const createRoom = useCallback(async (name: string): Promise<string | null> => {\r\n    if (!socketRef.current?.connected) {\r\n      setConnectionError('Not connected to server');\r\n      return null;\r\n    }\r\n    \r\n    try {\r\n      return new Promise((resolve) => {\r\n        const timeout = setTimeout(() => {\r\n          resolve(null);\r\n        }, 10000); // 10 second timeout\r\n        \r\n        socketRef.current?.emit('room:create', { name }, (response: { success: boolean; roomId?: string }) => {\r\n          clearTimeout(timeout);\r\n          if (response.success && response.roomId) {\r\n            resolve(response.roomId);\r\n          } else {\r\n            resolve(null);\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('❌ Failed to create room:', error);\r\n      setConnectionError('Failed to create room');\r\n      return null;\r\n    }\r\n  }, []);\r\n  \r\n  // Audio controls with unified mute logic\r\n  const requestMicrophone = useCallback(async (): Promise<boolean> => {\r\n    try {\r\n      console.log('🎤 Requesting microphone access...');\r\n      \r\n      // Check if getUserMedia is supported\r\n      if (!navigator.mediaDevices?.getUserMedia) {\r\n        throw new Error('getUserMedia is not supported in this browser');\r\n      }\r\n\r\n      // Check permission status first\r\n      let permissionStatus = 'unknown';\r\n      try {\r\n        if (navigator.permissions?.query) {\r\n          const result = await navigator.permissions.query({ \r\n            name: 'microphone' as PermissionName \r\n          });\r\n          permissionStatus = result.state;\r\n          console.log('🔍 Microphone permission status:', permissionStatus);\r\n        }\r\n      } catch (error) {\r\n        console.log('⚠️ Could not check permission status, proceeding with getUserMedia');\r\n      }\r\n\r\n      // Request microphone access\r\n      const stream = await navigator.mediaDevices.getUserMedia({ \r\n        audio: {\r\n          echoCancellation: true,\r\n          noiseSuppression: true,\r\n          autoGainControl: true,\r\n          sampleRate: 44100\r\n        }, \r\n        video: false \r\n      });\r\n      \r\n      localStreamRef.current = stream;\r\n      \r\n      // Set up audio context for volume control\r\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      const source = audioContext.createMediaStreamSource(stream);\r\n      const gainNode = audioContext.createGain();\r\n      \r\n      source.connect(gainNode);\r\n      gainNode.connect(audioContext.destination);\r\n      \r\n      // Store references\r\n      audioContextRef.current = audioContext;\r\n      sourceNodeRef.current = source;\r\n      gainNodeRef.current = gainNode;\r\n      \r\n      // Mute initially using gain node\r\n      gainNode.gain.value = 0;\r\n      setIsMuted(true);\r\n      \r\n      console.log('✅ Microphone access granted');\r\n      return true;\r\n      \r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    } catch (error: any) {\r\n      console.error('❌ Microphone error:', error);\r\n      \r\n      const errorMessage = MICROPHONE_ERRORS[error.name as keyof typeof MICROPHONE_ERRORS] || \r\n                          MICROPHONE_ERRORS.UnknownError;\r\n      \r\n      setConnectionError(errorMessage);\r\n      return false;\r\n    }\r\n  }, []);\r\n  \r\n  const toggleMute = useCallback(() => {\r\n    if (!localStreamRef.current || !gainNodeRef.current) return;\r\n\r\n    const newMutedState = !isMuted;\r\n    setIsMuted(newMutedState);\r\n    \r\n    // Use gain node for mute/unmute (more reliable than track.enabled)\r\n    gainNodeRef.current.gain.value = newMutedState ? 0 : 1;\r\n    \r\n    // Also update track enabled state for WebRTC\r\n    const audioTrack = localStreamRef.current.getAudioTracks()[0];\r\n    if (audioTrack) {\r\n      audioTrack.enabled = !newMutedState;\r\n    }\r\n    \r\n    // Notify other participants\r\n    socketRef.current?.emit('participant:mute', { \r\n      roomId: currentRoom?.id, \r\n      isMuted: newMutedState \r\n    });\r\n  }, [isMuted, currentRoom]);\r\n  \r\n  const toggleSpeaker = useCallback(() => {\r\n    const newSpeakerState = !isSpeaker;\r\n    setIsSpeaker(newSpeakerState);\r\n    \r\n    // Notify other participants\r\n    socketRef.current?.emit('participant:speaker', { \r\n      roomId: currentRoom?.id, \r\n      isSpeaker: newSpeakerState \r\n    });\r\n  }, [isSpeaker, currentRoom]);\r\n  \r\n  const sendMessage = useCallback((content: string) => {\r\n    if (!socketRef.current || !currentRoom) return;\r\n    \r\n    const message: VerbfyTalkMessage = {\r\n      id: Date.now().toString(),\r\n      content,\r\n      sender: 'current-user', // This should be replaced with actual user ID\r\n      senderName: 'You', // This should be replaced with actual user name\r\n      timestamp: Date.now()\r\n    };\r\n    \r\n    // Add message to local state\r\n    setMessages(prev => [...prev, message]);\r\n    \r\n    // Send via socket\r\n    socketRef.current.emit('send-room-message', {\r\n      roomId: currentRoom.id,\r\n      content,\r\n      timestamp: Date.now()\r\n    });\r\n  }, [currentRoom]);\r\n  \r\n  // Comprehensive cleanup\r\n  const disconnect = useCallback(() => {\r\n    console.log('🧹 Cleaning up VerbfyTalk...');\r\n    \r\n    // Stop VAD\r\n    stopVAD();\r\n    \r\n    // Stop local stream\r\n    if (localStreamRef.current) {\r\n      localStreamRef.current.getTracks().forEach(track => {\r\n        track.stop();\r\n      });\r\n      localStreamRef.current = null;\r\n    }\r\n    \r\n    // Close audio context\r\n    if (audioContextRef.current) {\r\n      audioContextRef.current.close();\r\n      audioContextRef.current = null;\r\n    }\r\n    \r\n    // Disconnect audio nodes\r\n    if (sourceNodeRef.current) {\r\n      sourceNodeRef.current.disconnect();\r\n      sourceNodeRef.current = null;\r\n    }\r\n    gainNodeRef.current = null;\r\n    \r\n    // Close peer connections\r\n    peerConnectionsRef.current.forEach(connection => {\r\n      connection.close();\r\n    });\r\n    peerConnectionsRef.current.clear();\r\n    \r\n    // Clear ICE candidate buffers\r\n    iceCandidateBufferRef.current.clear();\r\n    \r\n    // Disconnect socket\r\n    if (socketRef.current) {\r\n      socketRef.current.disconnect();\r\n      socketRef.current = null;\r\n    }\r\n    \r\n             // Reset state\r\n    setIsConnected(false);\r\n    setIsConnecting(false);\r\n    setStatus('disconnected');\r\n    setCurrentRoom(null);\r\n    setParticipants([]);\r\n    setRemoteStreams({});\r\n    setMessages([]);\r\n    setConnectionError(null);\r\n    setReconnectionAttempts(0);\r\n    setIsMuted(false);\r\n    setIsSpeaker(false);\r\n    isInitializedRef.current = false;\r\n    \r\n    console.log('✅ VerbfyTalk cleanup completed');\r\n  }, [stopVAD]);\r\n  \r\n  // Initialize on mount\r\n  useEffect(() => {\r\n    if (token && !isInitializedRef.current) {\r\n      initializeSocket();\r\n    }\r\n    \r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [token, initializeSocket, disconnect]);\r\n  \r\n  // Start VAD when microphone is available and in room\r\n  useEffect(() => {\r\n    if (localStreamRef.current && currentRoom && isConnected) {\r\n      const cleanup = startVAD();\r\n      return cleanup;\r\n    }\r\n  }, [currentRoom, isConnected, startVAD]);\r\n  \r\n  return {\r\n    rooms,\r\n    currentRoom,\r\n    joinRoom,\r\n    leaveRoom,\r\n    createRoom,\r\n    isMuted,\r\n    isSpeaker,\r\n    isConnected,\r\n    toggleMute,\r\n    toggleSpeaker,\r\n    requestMicrophone,\r\n    localStream: localStreamRef.current,\r\n    remoteStreams,\r\n    participants,\r\n    messages,\r\n    sendMessage,\r\n    isConnecting,\r\n    connectionError,\r\n    reconnectionAttempts,\r\n    status,\r\n    isInitialized: isInitializedRef.current,\r\n    disconnect\r\n  };\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useVerbfyTalk } from '@/hooks/useVerbfyTalk';\r\nimport { useAuthContext } from '@/context/AuthContext';\r\nimport { toast } from 'react-hot-toast';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport {\r\n  MicrophoneIcon,\r\n  SpeakerWaveIcon,\r\n  SpeakerXMarkIcon,\r\n  ChatBubbleLeftRightIcon,\r\n  UsersIcon,\r\n  ArrowLeftIcon\r\n} from '@heroicons/react/24/outline';\r\n\r\ninterface VoiceChatRoomProps {\r\n  roomId: string;\r\n  onLeave: () => void;\r\n}\r\n\r\n\r\n\r\nexport default function VoiceChatRoom({ roomId, onLeave }: VoiceChatRoomProps) {\r\n  const { user } = useAuthContext();\r\n  \r\n  // Voice chat socket\r\n  const [socket, setSocket] = useState<Socket | null>(null);\r\n  \r\n  // Room state\r\n  const [showChat, setShowChat] = useState(true);\r\n  const [showParticipants, setShowParticipants] = useState(false);\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [roomInfo, setRoomInfo] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // VerbfyTalk setup\r\n  const {\r\n    localStream,\r\n    remoteStreams,\r\n    isMuted,\r\n    isSpeaker,\r\n    toggleMute,\r\n    toggleSpeaker,\r\n    status,\r\n    connectionError,\r\n    isInitialized,\r\n    participants: verbfyParticipants,\r\n    messages: verbfyMessages,\r\n    sendMessage: sendVerbfyMessage,\r\n    joinRoom,\r\n    leaveRoom: leaveVerbfyRoom,\r\n  } = useVerbfyTalk(localStorage.getItem('token') || '');\r\n\r\n  // Refs\r\n  const localVideoRef = useRef<HTMLVideoElement>(null);\r\n  const chatContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Initialize socket and room\r\n  useEffect(() => {\r\n    if (user && roomId) {\r\n      const base = (process.env.NEXT_PUBLIC_API_BASE_URL || 'https://api.verbfy.com').replace(/\\/$/, '');\r\n      const voiceSocket = io(base, {\r\n        path: '/socket.io',\r\n        transports: ['polling'],\r\n        withCredentials: true,\r\n        auth: {\r\n          token: localStorage.getItem('token') || undefined\r\n        }\r\n      });\r\n      \r\n      setSocket(voiceSocket);\r\n      initializeRoom(voiceSocket);\r\n      \r\n      return () => {\r\n        voiceSocket.disconnect();\r\n      };\r\n    }\r\n  }, [user, roomId]);\r\n\r\n  // Update local video stream\r\n  useEffect(() => {\r\n    if (localVideoRef.current && localStream) {\r\n      localVideoRef.current.srcObject = localStream;\r\n    }\r\n  }, [localStream]);\r\n\r\n  // Auto-scroll chat\r\n  useEffect(() => {\r\n    if (chatContainerRef.current) {\r\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n    }\r\n  }, [verbfyMessages]);\r\n\r\n  const initializeRoom = async (voiceSocket: Socket) => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Join room via VerbfyTalk\r\n      await joinRoom(roomId);\r\n        \r\n      // Listen for room updates\r\n      voiceSocket.on('room-updated', (data) => {\r\n        setRoomInfo(data.room);\r\n      });\r\n\r\n      // Listen for participant updates\r\n      voiceSocket.on('participant-joined', (participant) => {\r\n        toast.success(`${participant.name} joined the room`);\r\n      });\r\n\r\n      voiceSocket.on('participant-left', (participantId) => {\r\n        toast('A participant left the room');\r\n      });\r\n\r\n      // Listen for room messages\r\n      voiceSocket.on('room-message', (message) => {\r\n        // Messages are handled by useVerbfyTalk hook\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Failed to initialize room:', error);\r\n      toast.error('Failed to join room');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (chatMessage.trim()) {\r\n      sendVerbfyMessage(chatMessage);\r\n      setChatMessage('');\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleLeaveRoom = () => {\r\n    leaveVerbfyRoom();\r\n    onLeave();\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"mt-4 text-gray-600\">Joining room...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (connectionError) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-red-500 mb-4\">Failed to join room: {connectionError}</p>\r\n          <button\r\n            onClick={handleLeaveRoom}\r\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg\"\r\n          >\r\n            Leave Room\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-screen flex flex-col bg-gray-900\">\r\n      {/* Header */}\r\n      <div className=\"bg-gray-800 p-4 flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <button\r\n            onClick={handleLeaveRoom}\r\n            className=\"text-gray-300 hover:text-white p-2 rounded-lg hover:bg-gray-700\"\r\n          >\r\n            <ArrowLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <div>\r\n            <h1 className=\"text-white font-semibold text-lg\">\r\n              {roomInfo?.name || `Room ${roomId}`}\r\n            </h1>\r\n            <p className=\"text-gray-400 text-sm\">\r\n              {verbfyParticipants.length} participants\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center gap-2\">\r\n          <button\r\n            onClick={() => setShowParticipants(!showParticipants)}\r\n            className={`p-2 rounded-lg ${\r\n              showParticipants ? 'bg-blue-600 text-white' : 'text-gray-300 hover:text-white hover:bg-gray-700'\r\n            }`}\r\n          >\r\n            <UsersIcon className=\"w-5 h-5\" />\r\n          </button>\r\n          <button\r\n            onClick={() => setShowChat(!showChat)}\r\n            className={`p-2 rounded-lg ${\r\n              showChat ? 'bg-blue-600 text-white' : 'text-gray-300 hover:text-white hover:bg-gray-700'\r\n            }`}\r\n          >\r\n            <ChatBubbleLeftRightIcon className=\"w-5 h-5\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex-1 flex\">\r\n        {/* Video Grid */}\r\n        <div className=\"flex-1 p-4\">\r\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 h-full\">\r\n            {/* Local Video */}\r\n            <div className=\"relative bg-gray-800 rounded-lg overflow-hidden\">\r\n              <video\r\n                ref={localVideoRef}\r\n                autoPlay\r\n                muted\r\n                playsInline\r\n                className=\"w-full h-full object-cover\"\r\n              />\r\n              <div className=\"absolute bottom-2 left-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded\">\r\n                {user?.name} (You)\r\n              </div>\r\n              {isMuted && (\r\n                <div className=\"absolute top-2 left-2 bg-red-500 text-white p-1 rounded\">\r\n                  <MicrophoneIcon className=\"w-4 h-4\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Remote Videos */}\r\n            {verbfyParticipants.filter(p => p.id !== user?.id).map((participant) => (\r\n              <div key={participant.id} className=\"relative bg-gray-800 rounded-lg overflow-hidden\">\r\n                <div className=\"w-full h-full flex items-center justify-center\">\r\n                  <div className=\"text-center\">\r\n                    <div className=\"w-16 h-16 bg-gray-600 rounded-full flex items-center justify-center mx-auto mb-2\">\r\n                      <span className=\"text-white text-lg font-semibold\">\r\n                        {participant.name.charAt(0).toUpperCase()}\r\n                      </span>\r\n                    </div>\r\n                    <p className=\"text-white text-sm\">{participant.name}</p>\r\n                    {participant.isSpeaking && (\r\n                      <div className=\"mt-1\">\r\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mx-auto animate-pulse\"></div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                {participant.isMuted && (\r\n                  <div className=\"absolute top-2 left-2 bg-red-500 text-white p-1 rounded\">\r\n                    <MicrophoneIcon className=\"w-4 h-4\" />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Sidebar */}\r\n        <div className=\"w-80 bg-gray-800 border-l border-gray-700\">\r\n          {/* Participants */}\r\n          {showParticipants && (\r\n            <div className=\"p-4 border-b border-gray-700\">\r\n              <h3 className=\"text-white font-semibold mb-3\">Participants</h3>\r\n              <div className=\"space-y-2\">\r\n                {verbfyParticipants.map((participant) => (\r\n                  <div key={participant.id} className=\"flex items-center gap-3 p-2 rounded bg-gray-700\">\r\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\r\n                      <span className=\"text-white text-sm font-semibold\">\r\n                        {participant.name.charAt(0).toUpperCase()}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <p className=\"text-white text-sm\">\r\n                        {participant.name}\r\n                        {participant.id === user?.id && ' (You)'}\r\n                      </p>\r\n                      <p className=\"text-gray-400 text-xs\">\r\n                        {participant.isSpeaker ? 'Speaker' : 'Listener'}\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"flex gap-1\">\r\n                      <MicrophoneIcon className={`w-4 h-4 ${!participant.isMuted ? 'text-green-500' : 'text-red-500'}`} />\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Chat */}\r\n          {showChat && (\r\n            <div className=\"flex-1 flex flex-col h-full\">\r\n              <div className=\"p-4 border-b border-gray-700\">\r\n                <h3 className=\"text-white font-semibold\">Chat</h3>\r\n              </div>\r\n              \r\n              <div className=\"flex-1 overflow-y-auto p-4\" ref={chatContainerRef}>\r\n                <div className=\"space-y-3\">\r\n                  {verbfyMessages.map((message, index) => (\r\n                    <div key={index} className=\"bg-gray-700 rounded-lg p-3\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <span className=\"text-blue-400 text-sm font-semibold\">\r\n                          {message.sender === user?.id ? 'You' : message.senderName}\r\n                        </span>\r\n                        <span className=\"text-gray-400 text-xs\">\r\n                          {new Date(message.timestamp).toLocaleTimeString()}\r\n                        </span>\r\n                      </div>\r\n                      <p className=\"text-white text-sm\">{message.content}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"p-4 border-t border-gray-700\">\r\n                <form onSubmit={handleSendMessage} className=\"flex gap-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={chatMessage}\r\n                    onChange={(e) => setChatMessage(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                    className=\"flex-1 bg-gray-700 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  />\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg\"\r\n                  >\r\n                    Send\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <div className=\"bg-gray-800 p-4 flex items-center justify-center gap-4\">\r\n        <button\r\n          onClick={toggleMute}\r\n          className={`p-3 rounded-full ${\r\n            !isMuted ? 'bg-gray-600 text-white' : 'bg-red-500 text-white'\r\n          } hover:opacity-80 transition-colors`}\r\n        >\r\n          <MicrophoneIcon className=\"w-6 h-6\" />\r\n        </button>\r\n\r\n        <button\r\n          onClick={toggleSpeaker}\r\n          className={`p-3 rounded-full ${\r\n            isSpeaker ? 'bg-blue-600 text-white' : 'bg-gray-600 text-white'\r\n          } hover:opacity-80 transition-colors`}\r\n        >\r\n          {isSpeaker ? (\r\n            <SpeakerWaveIcon className=\"w-6 h-6\" />\r\n          ) : (\r\n            <SpeakerXMarkIcon className=\"w-6 h-6\" />\r\n          )}\r\n        </button>\r\n\r\n        <button\r\n          onClick={handleLeaveRoom}\r\n          className=\"bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n        >\r\n          Leave Room\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport VoiceChatRoom from '@/components/voiceChat/VoiceChatRoom';\r\n\r\nexport default function VerbfyTalkRoom() {\r\n  const router = useRouter();\r\n  const { roomId } = router.query as { roomId?: string };\r\n\r\n  const handleLeaveRoom = () => {\r\n    router.push('/verbfy-talk');\r\n  };\r\n\r\n  if (!roomId) {\r\n    return (\r\n      <DashboardLayout title=\"VerbfyTalk\">\r\n        <div className=\"flex items-center justify-center min-h-screen\">\r\n          <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Room Not Found</h1>\r\n            <p className=\"text-gray-600 mb-6\">The room you're looking for doesn't exist.</p>\r\n            <button\r\n              onClick={() => router.push('/verbfy-talk')}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n            >\r\n              Back to Rooms\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>VerbfyTalk Room - {roomId}</title>\r\n        <meta name=\"description\" content=\"Join the conversation in VerbfyTalk\" />\r\n      </Head>\r\n      \r\n      <DashboardLayout title={`VerbfyTalk Room: ${roomId}`}>\r\n        <VoiceChatRoom roomId={roomId} onLeave={handleLeaveRoom} />\r\n      </DashboardLayout>\r\n    </>\r\n  );\r\n}"],"names":["window","__NEXT_P","push","__webpack_require__","WEBRTC_CONFIG","iceServers","urls","iceCandidatePoolSize","MICROPHONE_ERRORS","NotAllowedError","NotFoundError","NotSupportedError","NotReadableError","AbortError","SecurityError","InvalidStateError","UnknownError","useVerbfyTalk","rooms","setRooms","useState","currentRoom","setCurrentRoom","participants","setParticipants","isMuted","setIsMuted","isSpeaker","setIsSpeaker","isConnected","setIsConnected","isConnecting","setIsConnecting","connectionError","setConnectionError","reconnectionAttempts","setReconnectionAttempts","remoteStreams","setRemoteStreams","status","setStatus","messages","setMessages","socketRef","useRef","localStreamRef","peerConnectionsRef","Map","audioContextRef","gainNodeRef","sourceNodeRef","iceCandidateBufferRef","vadIntervalRef","isInitializedRef","startVAD","useCallback","current","getAudioTracks","audioContext","AudioContext","webkitAudioContext","source","createMediaStreamSource","analyser","createAnalyser","dataArray","Uint8Array","frequencyBinCount","connect","fftSize","setInterval","getByteFrequencyData","average","reduce","sum","value","length","connected","emit","roomId","id","isSpeaking","clearInterval","disconnect","close","stopVAD","initializeSocket","socket","io","process","env","NEXT_PUBLIC_BACKEND_URL","path","transports","forceNew","withCredentials","auth","token","timeout","reconnectionDelay","reconnectionDelayMax","upgrade","rememberUpgrade","on","console","log","reason","forEach","connection","clear","error","concat","message","attemptNumber","roomsList","room","name","participantsList","participant","prev","participantId","filter","p","peerConnection","get","delete","newStreams","map","data","handleWebRTCOffer","from","offer","handleWebRTCAnswer","answer","handleICECandidate","candidate","buffer","set","Error","RTCPeerConnection","getTracks","track","addTrack","onicecandidate","event","to","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","ontrack","streams","setRemoteDescription","createAnswer","setLocalDescription","addIceCandidate","warn","signalingState","remoteDescription","joinRoom","leaveRoom","createRoom","Promise","setTimeout","resolve","clearTimeout","response","success","requestMicrophone","navigator","mediaDevices","getUserMedia","permissionStatus","permissions","query","result","state","stream","audio","echoCancellation","noiseSuppression","autoGainControl","sampleRate","video","gainNode","createGain","destination","gain","toggleMute","newMutedState","audioTrack","enabled","toggleSpeaker","newSpeakerState","sendMessage","Date","now","toString","content","sender","senderName","timestamp","stop","useEffect","localStream","isInitialized","VoiceChatRoom","param","onLeave","user","useAuthContext","setSocket","showChat","setShowChat","showParticipants","setShowParticipants","chatMessage","setChatMessage","roomInfo","setRoomInfo","isLoading","setIsLoading","verbfyParticipants","verbfyMessages","sendVerbfyMessage","leaveVerbfyRoom","localStorage","getItem","localVideoRef","chatContainerRef","base","replace","voiceSocket","undefined","initializeRoom","srcObject","scrollTop","scrollHeight","toast","handleLeaveRoom","jsx_runtime","jsx","div","className","jsxs","button","onClick","ArrowLeftIcon","h1","UsersIcon","ChatBubbleLeftRightIcon","ref","autoPlay","muted","playsInline","MicrophoneIcon","span","charAt","toUpperCase","h3","index","toLocaleTimeString","form","onSubmit","e","preventDefault","trim","input","type","onChange","target","placeholder","SpeakerWaveIcon","SpeakerXMarkIcon","VerbfyTalkRoom","router","useRouter","Fragment","Head","title","meta","DashboardLayout"],"sourceRoot":""}