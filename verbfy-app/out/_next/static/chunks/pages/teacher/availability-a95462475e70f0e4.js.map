{"version":3,"file":"static/chunks/pages/teacher/availability-a95462475e70f0e4.js","mappings":"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","sources":["webpack://_N_E/?71de","webpack://_N_E/./src/components/teacher/TeacherCalendar.tsx","webpack://_N_E/./pages/teacher/availability.tsx","webpack://_N_E/./src/lib/toast.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/teacher/availability\",\n      function () {\n        return require(\"private-next-pages/teacher/availability.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/teacher/availability\"])\n      });\n    }\n  ","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useAuthContext } from '@/context/AuthContext';\nimport api from '@/lib/api';\nimport { toastSuccess, toastError } from '@/lib/toast';\n\ninterface TimeSlot {\n  dayOfWeek: number;\n  startTime: string;\n  endTime: string;\n}\n\ninterface SavedSlot {\n  _id: string;\n  dayOfWeek: number;\n  startTime: string;\n  endTime: string;\n}\n\ninterface TimezoneInfo {\n  timezone: string;\n  offset: number;\n  currentTime: string;\n}\n\nconst DAYS = [\n  { name: 'Sunday', value: 0, short: 'Sun' },\n  { name: 'Monday', value: 1, short: 'Mon' },\n  { name: 'Tuesday', value: 2, short: 'Tue' },\n  { name: 'Wednesday', value: 3, short: 'Wed' },\n  { name: 'Thursday', value: 4, short: 'Thu' },\n  { name: 'Friday', value: 5, short: 'Fri' },\n  { name: 'Saturday', value: 6, short: 'Sat' },\n];\n\n// Generate 30-minute time slots for 24 hours\nconst TIME_SLOTS = (() => {\n  const slots: string[] = [];\n  for (let hour = 0; hour < 24; hour++) {\n    slots.push(`${hour.toString().padStart(2, '0')}:00`);\n    slots.push(`${hour.toString().padStart(2, '0')}:30`);\n  }\n  return slots;\n})();\n\nconst TeacherCalendar: React.FC = () => {\n  const { user } = useAuthContext();\n  const [selectedSlots, setSelectedSlots] = useState<Set<string>>(new Set());\n  const [savedSlots, setSavedSlots] = useState<SavedSlot[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [timezoneInfo, setTimezoneInfo] = useState<TimezoneInfo>({\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    offset: new Date().getTimezoneOffset(),\n    currentTime: new Date().toLocaleTimeString()\n  });\n\n  // Update current time every minute\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      setTimezoneInfo(prev => ({\n        ...prev,\n        currentTime: now.toLocaleTimeString()\n      }));\n    }, 60000); // Update every minute\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Load existing availability on component mount\n  useEffect(() => {\n    loadAvailability();\n  }, []);\n\n  const loadAvailability = async () => {\n    if (!user) return;\n    \n    setLoading(true);\n    try {\n      const response = await api.get('/api/availability/my-availability');\n      const slots = response.data;\n      setSavedSlots(slots);\n      \n      // Convert saved slots to selected slots format\n      const selectedSet = new Set<string>();\n      slots.forEach((slot: SavedSlot) => {\n        selectedSet.add(`${slot.dayOfWeek}-${slot.startTime}`);\n      });\n      setSelectedSlots(selectedSet);\n    } catch (error) {\n      console.error('Error loading availability:', error);\n      toastError('Failed to load availability');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleSlot = useCallback((dayOfWeek: number, startTime: string) => {\n    const slotKey = `${dayOfWeek}-${startTime}`;\n    setSelectedSlots(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(slotKey)) {\n        newSet.delete(slotKey);\n      } else {\n        newSet.add(slotKey);\n      }\n      return newSet;\n    });\n  }, []);\n\n  const saveAvailability = async () => {\n    if (!user) return;\n    \n    setSaving(true);\n    try {\n      // Convert selected slots to API format\n      const availabilitySlots: TimeSlot[] = [];\n      selectedSlots.forEach(slotKey => {\n        const [dayOfWeek, startTime] = slotKey.split('-');\n        const startTimeIndex = TIME_SLOTS.indexOf(startTime);\n        const endTime = TIME_SLOTS[startTimeIndex + 1] || '23:30';\n        \n        const slot = {\n          dayOfWeek: parseInt(dayOfWeek),\n          startTime,\n          endTime,\n        };\n        \n        // Validate slot before adding\n        if (isNaN(slot.dayOfWeek) || slot.dayOfWeek < 0 || slot.dayOfWeek > 6) {\n          console.error('Invalid dayOfWeek:', slot.dayOfWeek, 'from slotKey:', slotKey);\n          return;\n        }\n        \n        if (!slot.startTime || !slot.endTime) {\n          console.error('Invalid time format:', slot, 'from slotKey:', slotKey);\n          return;\n        }\n        \n        availabilitySlots.push(slot);\n      });\n\n      const requestData = { \n        availabilitySlots,\n        teacherTimezone: timezoneInfo.timezone\n      };\n\n      console.log('Saving availability:', {\n        slotsCount: availabilitySlots.length,\n        timezone: timezoneInfo.timezone\n      });\n\n      // Test the data structure\n      testDataStructure(availabilitySlots);\n\n      // Additional validation before sending\n      if (availabilitySlots.length === 0) {\n        toastError('No time slots selected. Please select at least one time slot.');\n        return;\n      }\n\n      await api.post('/api/availability/set', requestData);\n      await loadAvailability(); // Reload to get updated data\n      toastSuccess('Availability saved successfully!');\n    } catch (error: any) {\n      console.error('=== ERROR DEBUG ===');\n      console.error('Error object:', error);\n      console.error('Error response:', error.response);\n      console.error('Error response data:', error.response?.data);\n      console.error('Error response status:', error.response?.status);\n      console.error('=== END ERROR DEBUG ===');\n      \n      const errorMessage = error.response?.data?.message || 'Failed to save availability';\n      toastError(errorMessage);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const isSlotSelected = (dayOfWeek: number, startTime: string) => {\n    return selectedSlots.has(`${dayOfWeek}-${startTime}`);\n  };\n\n  const getSelectedSlotsCount = () => {\n    return selectedSlots.size;\n  };\n\n  // Get current day and time for highlighting\n  const currentDayOfWeek = currentTime.getDay();\n  const currentTimeString = currentTime.toTimeString().slice(0, 5);\n\n  // Check if a slot is in the past for the current day\n  const isSlotInPast = (dayOfWeek: number, time: string) => {\n    if (dayOfWeek < currentDayOfWeek) return true;\n    if (dayOfWeek === currentDayOfWeek) {\n      return time < currentTimeString;\n    }\n    return false;\n  };\n\n  // Test function to verify data structure\n  const testDataStructure = (slots: TimeSlot[]) => {\n    console.log('=== TESTING DATA STRUCTURE ===');\n    slots.forEach((slot, index) => {\n      console.log(`Slot ${index}:`, {\n        dayOfWeek: slot.dayOfWeek,\n        startTime: slot.startTime,\n        endTime: slot.endTime,\n        dayOfWeekType: typeof slot.dayOfWeek,\n        startTimeType: typeof slot.startTime,\n        endTimeType: typeof slot.endTime,\n        dayOfWeekValid: typeof slot.dayOfWeek === 'number' && !isNaN(slot.dayOfWeek),\n        startTimeValid: typeof slot.startTime === 'string' && slot.startTime.length > 0,\n        endTimeValid: typeof slot.endTime === 'string' && slot.endTime.length > 0\n      });\n    });\n    console.log('=== END TESTING ===');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-lg p-6\">\n      {/* Header with Timezone Info */}\n      <div className=\"mb-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Manage Your Availability</h2>\n            <p className=\"text-gray-600\">\n              Select your available time slots for the week. Students will be able to book lessons during these times.\n            </p>\n          </div>\n          \n          {/* Timezone and Current Time Display */}\n          <div className=\"bg-blue-50 p-3 rounded-lg border border-blue-200\">\n            <div className=\"text-sm text-blue-800\">\n              <div className=\"font-medium\">Your Timezone: {timezoneInfo.timezone}</div>\n              <div className=\"text-xs mt-1\">Current Time: {timezoneInfo.currentTime}</div>\n              <div className=\"text-xs\">Today: {currentTime.toLocaleDateString()}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Calendar Grid with Scrollbar */}\n      <div className=\"border border-gray-200 rounded-lg overflow-hidden shadow-sm max-w-4xl mx-auto\">\n        <div className=\"overflow-x-auto\">\n          <div className=\"min-w-[800px]\">\n            {/* Time slots header */}\n            <div className=\"grid grid-cols-8 gap-0 bg-gray-50 border-b border-gray-200 sticky top-0 z-10\">\n              <div className=\"p-3 font-semibold text-gray-700 text-sm bg-white border-r border-gray-200\">\n                Time\n              </div>\n              {DAYS.map(day => (\n                <div key={day.value} className=\"p-3 font-semibold text-gray-700 text-sm text-center border-r border-gray-200 last:border-r-0\">\n                  <div className=\"font-medium text-sm\">{day.short}</div>\n                  <div className=\"text-xs text-gray-500 mt-0.5\">{day.name}</div>\n                </div>\n              ))}\n            </div>\n\n            {/* Scrollable Time Slots */}\n            <div className=\"max-h-[500px] overflow-y-auto\">\n              {TIME_SLOTS.map((time, index) => (\n                <div key={time} className={`grid grid-cols-8 gap-0 border-b border-gray-100 last:border-b-0 ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}`}>\n                  <div className=\"p-2 text-sm text-gray-600 font-medium bg-gray-50 border-r border-gray-200 flex items-center justify-center\" data-time={time}>\n                    {time}\n                  </div>\n                  {DAYS.map(day => {\n                    const isPast = isSlotInPast(day.value, time);\n                    const isSelected = isSlotSelected(day.value, time);\n                    const isCurrentDay = day.value === currentDayOfWeek;\n                    const isCurrentTime = isCurrentDay && time === currentTimeString;\n\n                    return (\n                      <button\n                        key={`${day.value}-${time}`}\n                        data-time={time}\n                        onClick={() => !isPast && toggleSlot(day.value, time)}\n                        disabled={isPast}\n                        className={`\n                          p-2 text-xs rounded-md transition-all duration-200 relative border-r border-gray-200 last:border-r-0 min-h-[40px] flex items-center justify-center\n                          ${isPast\n                            ? 'bg-gray-100 text-gray-400 cursor-not-allowed opacity-50'\n                            : isSelected\n                              ? 'bg-blue-500 text-white shadow-sm hover:bg-blue-600 border border-blue-400'\n                              : 'bg-white text-gray-700 hover:bg-blue-50 border border-gray-200 hover:border-blue-300'\n                          }\n                          ${isCurrentDay ? 'ring-1 ring-blue-300' : ''}\n                          ${isCurrentTime ? 'ring-2 ring-red-400' : ''}\n                        `}\n                        title={isPast ? 'This time has passed' : `Select ${day.name} at ${time}`}\n                      >\n                        {isSelected && (\n                          <div className=\"flex items-center justify-center\">\n                            <span className=\"text-sm font-semibold\">✓</span>\n                          </div>\n                        )}\n                        {isCurrentTime && (\n                          <div className=\"absolute -top-0.5 -right-0.5 w-2.5 h-2.5 bg-red-500 rounded-full animate-pulse\"></div>\n                        )}\n                      </button>\n                    );\n                  })}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary and Actions */}\n      <div className=\"mt-4 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200 max-w-4xl mx-auto\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n          <div>\n            <p className=\"text-sm text-gray-700\">\n              Selected: <span className=\"font-semibold text-blue-600 text-base\">{getSelectedSlotsCount()}</span> time slots\n            </p>\n            <p className=\"text-xs text-gray-600 mt-0.5\">\n              Each slot represents 30 minutes • 24-hour format • Timezone: {timezoneInfo.timezone}\n            </p>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setSelectedSlots(new Set())}\n              className=\"px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors shadow-sm\"\n            >\n              Clear All\n            </button>\n            <button\n              onClick={() => {\n                const currentTimeElement = document.querySelector(`[data-time=\"${currentTimeString}\"]`);\n                if (currentTimeElement) {\n                  currentTimeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n                }\n              }}\n              className=\"px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors shadow-sm\"\n            >\n              Current Time\n            </button>\n            <button\n              onClick={saveAvailability}\n              disabled={saving}\n              className={`\n                px-4 py-1.5 text-sm font-medium text-white rounded-md transition-colors shadow-sm\n                ${saving\n                  ? 'bg-gray-400 cursor-not-allowed'\n                  : 'bg-blue-600 hover:bg-blue-700 shadow-md'\n                }\n              `}\n            >\n              {saving ? (\n                <span className=\"flex items-center gap-1.5\">\n                  <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white\"></div>\n                  Saving...\n                </span>\n              ) : (\n                'Save Availability'\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Selection Buttons */}\n      <div className=\"mt-4 max-w-4xl mx-auto\">\n        <h3 className=\"text-base font-semibold text-gray-900 mb-2\">Quick Selection</h3>\n        <div className=\"flex flex-wrap gap-1.5\">\n          <button\n            onClick={() => {\n              const morningSlots = new Set<string>();\n              DAYS.forEach(day => {\n                TIME_SLOTS.slice(12, 24).forEach(time => { // 6 AM to 12 PM\n                  morningSlots.add(`${day.value}-${time}`);\n                });\n              });\n              setSelectedSlots(morningSlots);\n            }}\n            className=\"px-2.5 py-1 text-xs bg-green-100 text-green-700 rounded-md hover:bg-green-200 transition-colors border border-green-200\"\n          >\n            Morning (6 AM - 12 PM)\n          </button>\n          <button\n            onClick={() => {\n              const afternoonSlots = new Set<string>();\n              DAYS.forEach(day => {\n                TIME_SLOTS.slice(24, 36).forEach(time => { // 12 PM to 6 PM\n                  afternoonSlots.add(`${day.value}-${time}`);\n                });\n              });\n              setSelectedSlots(afternoonSlots);\n            }}\n            className=\"px-2.5 py-1 text-xs bg-yellow-100 text-yellow-700 rounded-md hover:bg-yellow-200 transition-colors border border-yellow-200\"\n          >\n            Afternoon (12 PM - 6 PM)\n          </button>\n          <button\n            onClick={() => {\n              const eveningSlots = new Set<string>();\n              DAYS.forEach(day => {\n                TIME_SLOTS.slice(36, 44).forEach(time => { // 6 PM to 10 PM\n                  eveningSlots.add(`${day.value}-${time}`);\n                });\n              });\n              setSelectedSlots(eveningSlots);\n            }}\n            className=\"px-2.5 py-1 text-xs bg-purple-100 text-purple-700 rounded-md hover:bg-purple-200 transition-colors border border-purple-200\"\n          >\n            Evening (6 PM - 10 PM)\n          </button>\n          <button\n            onClick={() => {\n              const weekdaySlots = new Set<string>();\n              DAYS.slice(1, 6).forEach(day => { // Monday to Friday\n                TIME_SLOTS.slice(12, 44).forEach(time => { // 6 AM to 10 PM\n                  weekdaySlots.add(`${day.value}-${time}`);\n                });\n              });\n              setSelectedSlots(weekdaySlots);\n            }}\n            className=\"px-2.5 py-1 text-xs bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors border border-blue-200\"\n          >\n            Weekdays (6 AM - 10 PM)\n          </button>\n          <button\n            onClick={() => {\n              const weekendSlots = new Set<string>();\n              [DAYS[0], DAYS[6]].forEach(day => { // Sunday and Saturday\n                TIME_SLOTS.slice(12, 44).forEach(time => { // 6 AM to 10 PM\n                  weekendSlots.add(`${day.value}-${time}`);\n                });\n              });\n              setSelectedSlots(weekendSlots);\n            }}\n            className=\"px-2.5 py-1 text-xs bg-orange-100 text-orange-700 rounded-md hover:bg-orange-200 transition-colors border border-orange-200\"\n          >\n            Weekends (6 AM - 10 PM)\n          </button>\n        </div>\n      </div>\n\n      {/* Timezone Information */}\n      <div className=\"mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200 max-w-4xl mx-auto\">\n        <h3 className=\"text-sm font-semibold text-blue-800 mb-1\">⏰ Timezone Information</h3>\n        <div className=\"text-xs text-blue-700 space-y-0.5\">\n          <p>• Your availability is saved in your local timezone: <strong>{timezoneInfo.timezone}</strong></p>\n          <p>• Students will see your availability converted to their local timezone</p>\n          <p>• Past time slots are automatically disabled and cannot be selected</p>\n          <p>• Current time is highlighted with a red dot indicator</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TeacherCalendar;","import React from 'react';\nimport Head from 'next/head';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport TeacherCalendar from '@/components/teacher/TeacherCalendar';\n\nconst TeacherAvailabilityPage: React.FC = () => {\n  return (\n    <>\n      <Head>\n        <title>Manage Availability - Verbfy</title>\n        <meta name=\"description\" content=\"Manage your teaching availability and schedule\" />\n      </Head>\n      \n      <DashboardLayout allowedRoles={['teacher']}>\n        <div className=\"space-y-6\">\n          {/* Page Header */}\n          <div className=\"bg-white rounded-lg shadow-sm p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">Manage Availability</h1>\n                <p className=\"text-gray-600 mt-2\">\n                  Set your weekly teaching schedule and let students know when you're available for lessons.\n                </p>\n              </div>\n              <div className=\"hidden sm:flex items-center space-x-2 text-sm text-gray-500\">\n                <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                <span>Available</span>\n                <div className=\"w-3 h-3 bg-gray-200 rounded-full ml-4\"></div>\n                <span>Unavailable</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Calendar Component */}\n          <TeacherCalendar />\n\n          {/* Instructions */}\n          <div className=\"bg-blue-50 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-blue-900 mb-3\">How it works</h3>\n            <div className=\"grid md:grid-cols-2 gap-4 text-sm text-blue-800\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Setting Your Schedule</h4>\n                <ul className=\"space-y-1\">\n                  <li>• Click on time slots to mark them as available</li>\n                  <li>• Each slot represents 30 minutes</li>\n                  <li>• Use quick selection buttons for common patterns</li>\n                  <li>• Your schedule repeats weekly</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-medium mb-2\">Student Booking</h4>\n                <ul className=\"space-y-1\">\n                  <li>• Students can only book during your available slots</li>\n                  <li>• You'll receive notifications for new bookings</li>\n                  <li>• You can modify your schedule anytime</li>\n                  <li>• Changes apply to future weeks only</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DashboardLayout>\n    </>\n  );\n};\n\nexport default TeacherAvailabilityPage; ","// Toast implementation that integrates with the existing Toast component system\nimport { toast } from '../components/common/Toast';\n\nexport const toastError = (message: string) => {\n  toast.error(message);\n};\n\nexport const toastSuccess = (message: string) => {\n  toast.success(message);\n};\n\nexport const toastWarning = (message: string) => {\n  toast.warning(message);\n};\n\nexport const toastInfo = (message: string) => {\n  toast.info(message);\n}; "],"names":["window","__NEXT_P","push","__webpack_require__","DAYS","name","value","short","TIME_SLOTS","slots","hour","concat","toString","padStart","teacher_TeacherCalendar","user","useAuthContext","selectedSlots","setSelectedSlots","useState","Set","savedSlots","setSavedSlots","loading","setLoading","saving","setSaving","currentTime","setCurrentTime","Date","timezoneInfo","setTimezoneInfo","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","offset","getTimezoneOffset","toLocaleTimeString","useEffect","timer","setInterval","now","prev","clearInterval","loadAvailability","response","api","get","data","selectedSet","forEach","add","slot","dayOfWeek","startTime","error","console","toastError","toggleSlot","useCallback","slotKey","newSet","has","delete","saveAvailability","availabilitySlots","split","startTimeIndex","indexOf","endTime","parseInt","isNaN","requestData","teacherTimezone","log","slotsCount","length","testDataStructure","post","toastSuccess","status","errorMessage","message","isSlotSelected","currentDayOfWeek","getDay","currentTimeString","toTimeString","slice","isSlotInPast","time","index","dayOfWeekType","startTimeType","endTimeType","dayOfWeekValid","startTimeValid","endTimeValid","jsx_runtime","jsx","div","className","jsxs","h2","p","toLocaleDateString","map","day","data-time","isPast","isSelected","isCurrentDay","isCurrentTime","button","onClick","disabled","title","span","size","currentTimeElement","document","querySelector","scrollIntoView","behavior","block","h3","morningSlots","afternoonSlots","eveningSlots","weekdaySlots","weekendSlots","strong","availability","Fragment","Head","meta","content","DashboardLayout","allowedRoles","h1","TeacherCalendar","h4","ul","li","toast","success"],"sourceRoot":""}