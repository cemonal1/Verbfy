{"version":3,"file":"static/chunks/pages/chat/[id]-494103ee25337a52.js","mappings":"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","sources":["webpack://_N_E/?c49e","webpack://_N_E/./pages/chat/[id].tsx","webpack://_N_E/./src/components/chat/ChatInterface.tsx","webpack://_N_E/./src/types/chat.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/chat/[id]\",\n      function () {\n        return require(\"private-next-pages/chat/[id].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/chat/[id]\"])\n      });\n    }\n  ","import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { useAuth, useRoleGuard } from '../../src/context/AuthContext';\nimport { useChat } from '../../src/context/ChatContext';\nimport DashboardLayout from '../../src/components/layout/DashboardLayout';\nimport ChatInterface from '../../src/components/chat/ChatInterface';\nimport { Conversation } from '../../src/types/chat';\nimport api from '../../src/lib/api';\n\nexport default function ChatConversationPage() {\n  const router = useRouter();\n  const { id: conversationId } = router.query;\n  const { hasAccess, isLoading } = useRoleGuard(['student', 'teacher']);\n  const { state, actions } = useChat();\n  const [conversation, setConversation] = useState<Conversation | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load conversation data when ID changes\n  useEffect(() => {\n    if (conversationId && typeof conversationId === 'string') {\n      loadConversation(conversationId);\n    }\n  }, [conversationId]);\n\n  const loadConversation = async (convId: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await api.get(`/api/chat/conversations/${convId}`);\n      \n      if (response.data.success) {\n        setConversation(response.data.data);\n      } else {\n        setError('Conversation not found');\n      }\n    } catch (error: any) {\n      console.error('Error loading conversation:', error);\n      const errorMessage = error.response?.data?.message || 'Failed to load conversation';\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Show loading state while checking authentication\n  if (isLoading || loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400\">Loading conversation...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show access denied if user doesn't have permission\n  if (!hasAccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n            Access Denied\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n            Only students and teachers can access the chat system.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error if conversation not found\n  if (error) {\n    return (\n      <DashboardLayout allowedRoles={['student', 'teacher']} title=\"Chat\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-12\">\n            <div className=\"text-red-500 mb-4\">⚠️</div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n              Conversation Not Found\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n              {error}\n            </p>\n            <button\n              onClick={() => router.push('/chat')}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n            >\n              Back to Chat\n            </button>\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  // Show loading if conversation not loaded yet\n  if (!conversation) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400\">Loading conversation...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Chat with {conversation.otherParticipant.name} - Verbfy</title>\n        <meta name=\"description\" content={`Chat with ${conversation.otherParticipant.name}`} />\n      </Head>\n\n      <DashboardLayout \n        allowedRoles={['student', 'teacher']}\n        title={`Chat with ${conversation.otherParticipant.name}`}\n      >\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n                  Chat with {conversation.otherParticipant.name}\n                </h1>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  {conversation.otherParticipant.role === 'teacher' ? '👨‍🏫 Teacher' : '👨‍🎓 Student'}\n                </p>\n              </div>\n              <button\n                onClick={() => router.push('/chat')}\n                className=\"px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors\"\n              >\n                ← Back to Conversations\n              </button>\n            </div>\n          </div>\n\n          {/* Chat Interface */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 h-[600px]\">\n            <ChatInterface\n              conversationId={conversation._id}\n              otherParticipant={conversation.otherParticipant}\n            />\n          </div>\n\n          {/* Conversation Info */}\n          <div className=\"mt-8 bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Conversation Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">Participant</p>\n                <p className=\"text-gray-900 dark:text-white font-medium\">\n                  {conversation.otherParticipant.name}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">Role</p>\n                <p className=\"text-gray-900 dark:text-white font-medium capitalize\">\n                  {conversation.otherParticipant.role}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">Email</p>\n                <p className=\"text-gray-900 dark:text-white font-medium\">\n                  {conversation.otherParticipant.email}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">Started</p>\n                <p className=\"text-gray-900 dark:text-white font-medium\">\n                  {new Date(conversation.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DashboardLayout>\n    </>\n  );\n} ","import React, { useState, useEffect, useRef } from 'react';\nimport { useChat } from '../../context/ChatContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { Message, formatMessageTime } from '../../types/chat';\n\ninterface ChatInterfaceProps {\n  conversationId: string;\n  otherParticipant: {\n    _id: string;\n    name: string;\n    role: string;\n    avatar?: string;\n  };\n}\n\nexport default function ChatInterface({ conversationId, otherParticipant }: ChatInterfaceProps) {\n  const { state, actions } = useChat();\n  const { user } = useAuth();\n  const [message, setMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n\n  const { messages, loading, error, typingUsers } = state;\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Join conversation room when component mounts\n  useEffect(() => {\n    actions.joinConversation(conversationId);\n    actions.loadMessages(conversationId);\n    actions.markAsRead(conversationId);\n\n    return () => {\n      actions.leaveConversation(conversationId);\n    };\n  }, [conversationId]);\n\n  // Handle typing indicator\n  useEffect(() => {\n    if (isTyping) {\n      actions.setTyping(conversationId, true);\n    } else {\n      actions.setTyping(conversationId, false);\n    }\n  }, [isTyping, conversationId]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!message.trim()) return;\n\n    const messageData = {\n      conversationId,\n      content: message.trim(),\n      messageType: 'text' as const\n    };\n\n    await actions.sendMessage(messageData);\n    setMessage('');\n    setIsTyping(false);\n    \n    // Focus back to input\n    inputRef.current?.focus();\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessage(e.target.value);\n    \n    // Set typing indicator\n    if (!isTyping && e.target.value.length > 0) {\n      setIsTyping(true);\n    } else if (isTyping && e.target.value.length === 0) {\n      setIsTyping(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage(e);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2 text-gray-600 dark:text-gray-400\">Loading messages...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"text-red-500 mb-2\">⚠️</div>\n        <p className=\"text-gray-600 dark:text-gray-400\">{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-3 p-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"w-10 h-10 rounded-full overflow-hidden bg-blue-50 dark:bg-blue-900\">\n          {/* eslint-disable-next-line @next/next/no-img-element */}\n          <img\n            src={otherParticipant.avatar || '/images/default-avatar.png'}\n            alt={otherParticipant.name}\n            className=\"w-10 h-10 object-cover\"\n          />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n            {otherParticipant.name}\n          </h3>\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 capitalize\">\n            {otherParticipant.role}\n          </p>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-4xl mb-4\">💬</div>\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n              Start a conversation\n            </h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">\n              Send a message to begin chatting with {otherParticipant.name}.\n            </p>\n          </div>\n        ) : (\n          messages.map((msg) => (\n            <MessageItem\n              key={msg._id}\n              message={msg}\n              isOwnMessage={msg.sender._id === user?._id}\n            />\n          ))\n        )}\n        \n        {/* Typing indicator */}\n        {typingUsers.has(otherParticipant._id) && (\n          <div className=\"flex items-center space-x-2 text-gray-500 dark:text-gray-400\">\n            <div className=\"flex space-x-1\">\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n            </div>\n            <span className=\"text-sm\">{otherParticipant.name} is typing...</span>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Message Input */}\n      <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n        <form onSubmit={handleSendMessage} className=\"flex space-x-3\">\n          <div className=\"flex-1\">\n            <textarea\n              ref={inputRef}\n              value={message}\n              onChange={handleInputChange}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white resize-none\"\n              rows={1}\n              maxLength={1000}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            disabled={!message.trim()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            Send\n          </button>\n        </form>\n        \n        {/* Character count */}\n        <div className=\"mt-2 text-xs text-gray-500 dark:text-gray-400 text-right\">\n          {message.length}/1000\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface MessageItemProps {\n  message: Message;\n  isOwnMessage: boolean;\n}\n\nfunction MessageItem({ message, isOwnMessage }: MessageItemProps) {\n  return (\n    <div className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>\n      <div className={`max-w-xs lg:max-w-md ${isOwnMessage ? 'order-2' : 'order-1'}`}>\n        <div\n          className={`\n            px-4 py-2 rounded-lg shadow-sm\n            ${isOwnMessage\n              ? 'bg-blue-600 text-white'\n              : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'\n            }\n          `}\n        >\n          <p className=\"text-sm\">{message.content}</p>\n          <div className={`text-xs mt-1 ${isOwnMessage ? 'text-blue-100' : 'text-gray-500 dark:text-gray-400'}`}>\n            {formatMessageTime(message.createdAt)}\n            {isOwnMessage && (\n              <span className=\"ml-2\">\n                {message.isRead ? '✓✓' : '✓'}\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Avatar */}\n      <div className={`w-8 h-8 rounded-full overflow-hidden ${isOwnMessage ? 'order-1 ml-2' : 'order-2 mr-2'}`}>\n        {/* eslint-disable-next-line @next/next/no-img-element */}\n        <img\n          src={message.sender.avatar || '/images/default-avatar.png'}\n          alt={message.sender.name}\n          className=\"w-8 h-8 object-cover\"\n        />\n      </div>\n    </div>\n  );\n} ","// User interface for chat participants\nexport interface ChatUser {\n  _id: string;\n  name: string;\n  email: string;\n  role: 'student' | 'teacher' | 'admin';\n  avatar?: string;\n}\n\n// Message interface\nexport interface Message {\n  _id: string;\n  conversationId: string;\n  sender: ChatUser;\n  content: string;\n  messageType: 'text' | 'image' | 'file' | 'system';\n  isRead: boolean;\n  readAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Conversation interface\nexport interface Conversation {\n  _id: string;\n  otherParticipant: ChatUser;\n  lastMessage?: {\n    content: string;\n    sender: string;\n    timestamp: string;\n  };\n  unreadCount: number;\n  updatedAt: string;\n  createdAt: string;\n}\n\n// API Response interfaces\nexport interface ConversationsResponse {\n  success: boolean;\n  data: Conversation[];\n  message: string;\n}\n\nexport interface ConversationResponse {\n  success: boolean;\n  data: Conversation;\n  message: string;\n}\n\nexport interface MessagesResponse {\n  success: boolean;\n  data: {\n    messages: Message[];\n    pagination: {\n      page: number;\n      limit: number;\n      total: number;\n      pages: number;\n    };\n  };\n  message: string;\n}\n\nexport interface MessageResponse {\n  success: boolean;\n  data: Message;\n  message: string;\n}\n\nexport interface SendMessageData {\n  conversationId: string;\n  content: string;\n  messageType?: 'text' | 'image' | 'file' | 'system';\n}\n\nexport interface UnreadCountResponse {\n  success: boolean;\n  data: { unreadCount: number };\n  message: string;\n}\n\n// Socket.IO event interfaces\nexport interface SocketMessage {\n  conversationId: string;\n  message: Message;\n}\n\nexport interface TypingData {\n  conversationId: string;\n  userId: string;\n  isTyping: boolean;\n}\n\nexport interface UserTypingData {\n  userId: string;\n  isTyping: boolean;\n}\n\n// Chat state interface\nexport interface ChatState {\n  conversations: Conversation[];\n  currentConversation: Conversation | null;\n  messages: Message[];\n  loading: boolean;\n  error: string | null;\n  unreadCount: number;\n  typingUsers: Set<string>;\n}\n\n// Chat context interface\nexport interface ChatContextType {\n  state: ChatState;\n  actions: {\n    loadConversations: () => Promise<void>;\n    loadMessages: (conversationId: string, page?: number) => Promise<void>;\n    sendMessage: (data: SendMessageData) => Promise<void>;\n    markAsRead: (conversationId: string) => Promise<void>;\n    joinConversation: (conversationId: string) => void;\n    leaveConversation: (conversationId: string) => void;\n    setTyping: (conversationId: string, isTyping: boolean) => void;\n    loadUnreadCount: () => Promise<void>;\n  };\n}\n\n// Utility functions\nexport const formatMessageTime = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n\n  if (diffInHours < 24) {\n    return date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } else if (diffInHours < 48) {\n    return 'Yesterday';\n  } else {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  }\n};\n\nexport const formatConversationTime = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n\n  if (diffInHours < 1) {\n    const diffInMinutes = Math.floor(diffInHours * 60);\n    return diffInMinutes === 0 ? 'Just now' : `${diffInMinutes}m ago`;\n  } else if (diffInHours < 24) {\n    return `${Math.floor(diffInHours)}h ago`;\n  } else if (diffInHours < 48) {\n    return 'Yesterday';\n  } else {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  }\n};\n\nexport const truncateMessage = (content: string, maxLength: number = 50): string => {\n  if (content.length <= maxLength) return content;\n  return content.substring(0, maxLength) + '...';\n}; "],"names":["window","__NEXT_P","push","__webpack_require__","ChatConversationPage","router","useRouter","id","conversationId","query","hasAccess","isLoading","useRoleGuard","state","actions","useChat","conversation","setConversation","useState","loading","setLoading","error","setError","useEffect","loadConversation","convId","response","api","get","concat","data","success","console","message","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","jsxs","p","DashboardLayout","allowedRoles","title","h1","button","onClick","Fragment","Head","otherParticipant","name","meta","content","role","ChatInterface","_id","h3","email","Date","createdAt","toLocaleDateString","param","user","useAuth","setMessage","isTyping","setIsTyping","messagesEndRef","useRef","inputRef","messages","typingUsers","current","scrollIntoView","behavior","joinConversation","loadMessages","markAsRead","leaveConversation","setTyping","handleSendMessage","e","preventDefault","trim","messageData","messageType","sendMessage","focus","span","img","src","avatar","alt","length","map","MessageItem","msg","isOwnMessage","sender","has","style","animationDelay","ref","form","onSubmit","textarea","value","onChange","target","onKeyPress","key","shiftKey","placeholder","rows","maxLength","type","disabled","formatMessageTime","isRead","date","dateString","diffInHours","now","getTime","toLocaleTimeString","hour","minute","month","day","formatConversationTime","diffInMinutes","Math","floor","truncateMessage","substring"],"sourceRoot":""}