{"version":3,"file":"static/chunks/pages/rooms/[roomId]-763cbdac93189f2b.js","mappings":"sFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,kBACA,WACA,OAAeC,EAAQ,MACvB,EACA,8IGyCAC,EAjCwC,OAAC,CAAEC,SAAAA,CAAQ,CAAEC,YAAAA,CAAW,CAAE,CAAAC,EAC1D,CAACC,EAAWC,EAAa,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAU3C,MACE,GAAAC,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,iCACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,gDACZT,EAASW,GAAG,CAAC,GACZ,GAAAL,EAAAC,IAAA,EAACC,MAAAA,CAAqBC,UAAU,oBAC9B,GAAAH,EAAAC,IAAA,EAACK,OAAAA,CAAKH,UAAU,sBAAaI,EAAQC,QAAQ,CAAC,OAAQ,IAAED,EAAQE,IAAI,GAD5DF,EAAQG,EAAE,KAKxB,GAAAV,EAAAI,GAAA,EAACO,OAAAA,CAAKC,SAjBW,IACnBC,EAAEC,cAAc,GACZjB,EAAUkB,IAAI,KAChBpB,EAAYE,GACZC,EAAa,IAEjB,EAWkCK,UAAU,wBACtC,GAAAH,EAAAI,GAAA,EAACY,QAAAA,CACCC,KAAK,OACLC,MAAOrB,EACPsB,SAAU,GAAOrB,EAAae,EAAEO,MAAM,CAACF,KAAK,EAC5CG,YAAY,oBACZlB,UAAU,kCAKpB,EC8QAmB,EAnTA,WACE,IAAMC,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IACT,CAAEC,KAAAA,CAAI,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IACX,CAAEC,OAAAA,CAAM,CAAE,CAAGJ,EAAOK,KAAK,CACzB,CACJC,YAAAA,CAAW,CACXC,eAAAA,CAAc,CACdC,UAAAA,CAAS,CACTC,QAAAA,CAAO,CACPC,aAAAA,CAAY,CACb,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,IAGE,CAACC,EAAQC,EAAU,CAAGrC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC/B,CAACsC,EAAkBC,EAAoB,CAAGvC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACnD,CAACwC,EAAiBC,EAAmB,CAAGzC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAEvD0C,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJd,GAAU,iBAAOA,GAAqBG,EAAeH,EAC3D,EAAG,CAACA,EAAQG,EAAe,EAG3B,IAAMY,EAAUjB,GAAQE,EAAS,CAC/BgB,KAAM,GAAmBhB,MAAAA,CAAhBF,EAAKf,EAAE,CAAC,UAAekC,MAAA,CAAPjB,GACzBkB,OAAQC,KAAAA,CACV,EAAI,CAAEH,KAAM,GAAIE,OAAQC,KAAAA,CAAU,EAC5B,CACJC,YAAAA,CAAW,CACXC,cAAAA,CAAa,CACbC,QAAAA,CAAO,CACPC,WAAAA,CAAU,CACVC,UAAAA,CAAS,CACTC,aAAAA,CAAY,CACZC,UAAAA,CAAS,CACTC,OAAAA,CAAM,CACNC,MAAAA,CAAK,CACLC,WAAAA,CAAU,CACVC,YAAAA,CAAW,CACXC,iBAAAA,CAAgB,CAChBC,kBAAAA,CAAiB,CAClB,CAAGC,SHzCoBjC,CAAc,CAAEe,CAAgB,CAAEmB,CAA4B,EACtF,GAAM,CAACd,EAAae,EAAe,CAAG/D,CAAAA,EAAAA,EAAAA,QAAAA,EAA6B,MAC7D,CAACiD,EAAee,EAAiB,CAAGhE,CAAAA,EAAAA,EAAAA,QAAAA,EAA4C,CAAC,GACjF,CAACkD,EAASe,EAAW,CAAGjE,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACjC,CAACmD,EAAYe,EAAc,CAAGlE,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACvC,CAACuD,EAAQY,EAAU,CAAGnE,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,gBAC/B,CAACwD,EAAOY,EAAS,CAAGpE,CAAAA,EAAAA,EAAAA,QAAAA,EAAwB,MAC5C,CAACyD,EAAYY,EAAc,CAAGrE,CAAAA,EAAAA,EAAAA,QAAAA,EAAwC,CAAC,GACvE,CAAC0D,EAAaY,EAAe,CAAGtE,CAAAA,EAAAA,EAAAA,QAAAA,EAAwC,CAAC,GAEzEoD,EAAYmB,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAC5BN,EAAW,CAACf,EACd,EAAG,CAACA,EAAQ,EAENG,EAAekB,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAC/BL,EAAc,CAACf,EACjB,EAAG,CAACA,EAAW,EAef,MAAO,CACLH,YAAAA,EACAC,cAAAA,EACAC,QAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,UApBgBiB,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAE5BC,QAAQC,GAAG,CAAC,wBAAyB7C,EACvC,EAAG,CAACA,EAAO,EAkBT2B,OAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,YAAAA,EACAC,iBApBuBY,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,IACnCF,EAAcK,GAAS,EAAE,GAAGA,CAAI,CAAE,CAACC,EAAO,CAAE,CAACD,CAAI,CAACC,EAAO,CAAC,EAC5D,EAAG,EAAE,EAmBHf,kBAjBwBW,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,IACpCD,EAAeI,GAAS,EAAE,GAAGA,CAAI,CAAE,CAACC,EAAO,CAAE,CAACD,CAAI,CAACC,EAAO,CAAC,EAC7D,EAAG,EAAE,CAgBL,CACF,EGLgB/C,EAAkBe,EAAST,EAAa5B,GAAG,CAACsE,GAAKA,EAAED,MAAM,GAGjE,CAAEhF,SAAAA,CAAQ,CAAEC,YAAAA,CAAW,CAAE,CAAGiF,SF1CHjD,CAAc,EAC7C,GAAM,CAACjC,EAAUmF,EAAY,CAAG9E,CAAAA,EAAAA,EAAAA,QAAAA,EAAoB,EAAE,EAgBtD,MAAO,CACLL,SAAAA,EACAC,YAhBkB2E,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,MAAO7D,IAErC8D,QAAQC,GAAG,CAAC,mBAAoB/D,EAAM,WAAYkB,GAGlD,IAAMmD,EAAsB,CAC1BpE,GAAIqE,KAAKC,GAAG,GAAGC,QAAQ,GACvBxE,KAAAA,EACAD,SAAU,MACV0E,UAAW,IAAIH,IACjB,EACAF,EAAYJ,GAAQ,IAAIA,EAAMK,EAAW,CAC3C,EAAG,CAACnD,EAAO,CAKX,CACF,EEqBqDA,GAG7CwD,EAAkBC,CAAAA,EAAAA,EAAAA,MAAAA,EAAsD,CAAC,GAC/E3C,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR4C,OAAOC,OAAO,CAACtC,GAAeuC,OAAO,CAAC,OAAC,CAACb,EAAQc,EAAO,CAAA5F,EAC/C6F,EAAMN,EAAgBO,OAAO,CAAChB,EAAO,CACvCe,GAAOD,GAAQC,CAAAA,EAAIE,SAAS,CAAGH,CAAAA,CACrC,EACF,EAAG,CAACxC,EAAc,EAElB,IAAM4C,EAAkB,KAClB/D,IACFE,EAAUF,EAAYnB,EAAE,EACxBa,EAAOhC,IAAI,CAAC,cAEhB,EAOMsG,EAAqB,IACzBzD,EAAU0D,EACZ,SAEA,GAAe,CAACjE,EAEZ,GAAA7B,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,oEACb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,wBACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,gFACf,GAAAH,EAAAI,GAAA,EAACuE,IAAAA,CAAExE,UAAU,yBAAgB,yBAOjC8B,EAAa8D,MAAM,CAAG,EAEtB,GAAA/F,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,oEACb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,6CACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,sCAA6B,OAC5C,GAAAH,EAAAI,GAAA,EAAC4F,KAAAA,CAAG7F,UAAU,oDAA2C,cACzD,GAAAH,EAAAI,GAAA,EAACuE,IAAAA,CAAExE,UAAU,8BAAqB,gDAClC,GAAAH,EAAAI,GAAA,EAAC6F,SAAAA,CACCC,QAAS,IAAM3E,EAAOhC,IAAI,CAAC,cAC3BY,UAAU,2FACX,yBASP,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,kDAEb,GAAAH,EAAAI,GAAA,EAAC+F,SAAAA,CAAOhG,UAAU,iEAChB,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,8CACb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,wCACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,kDACf,GAAAH,EAAAC,IAAA,EAACC,MAAAA,WACC,GAAAF,EAAAC,IAAA,EAAC+F,KAAAA,CAAG7F,UAAU,gDAAsC,SAAO0B,EAAYuE,IAAI,IAC3E,GAAApG,EAAAC,IAAA,EAAC0E,IAAAA,CAAExE,UAAU,kCACV8B,EAAa8D,MAAM,CAAC,eAAa9D,IAAAA,EAAa8D,MAAM,CAAS,IAAM,YAK1E,GAAA/F,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,wCACb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,kCAAwB,WAC5BmD,KAEX,GAAAtD,EAAAI,GAAA,EAAC6F,SAAAA,CACCC,QAASN,EACTzF,UAAU,iGACX,uBAQP,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,wBAEb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,iCAEb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,kCACb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,yDAEb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,yDACb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,4BACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,sCACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,uEAA8D,UAI/E,GAAAH,EAAAI,GAAA,EAACiG,QAAAA,CACCC,SAAQ,GACRC,MAAK,GACLC,YAAW,GACXrG,UAAU,6BACVsF,IAAKgB,IAAYA,GAAM1D,GAAa0D,CAAAA,EAAGd,SAAS,CAAG5C,CAAAA,CAAa,IAEjE,CAACE,GACA,GAAAjD,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,yCACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,kDACb,GAAAH,EAAAI,GAAA,EAACsG,MAAAA,CAAIvG,UAAU,UAAUwG,KAAK,OAAOC,OAAO,eAAeC,QAAQ,qBACjE,GAAA7G,EAAAI,GAAA,EAAC0G,OAAAA,CAAKC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,iIAAiIC,SAAS,uBAS1NlF,EAAamF,MAAM,CAACzC,GAAKA,EAAED,MAAM,GAAKhC,EAAQC,IAAI,EAAEtC,GAAG,CAACsE,GACvD,GAAA3E,EAAAI,GAAA,EAACF,MAAAA,CAAmBC,UAAU,yDAC5B,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,4BACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,sCACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,uEACZwE,EAAEyB,IAAI,KAGX,GAAApG,EAAAI,GAAA,EAACiG,QAAAA,CACCC,SAAQ,GACRE,YAAW,GACXrG,UAAU,6BACVsF,IAAKgB,IAAQtB,EAAgBO,OAAO,CAACf,EAAED,MAAM,CAAC,CAAG+B,EAAQA,GAAMzD,CAAa,CAAC2B,EAAED,MAAM,CAAC,EAAE+B,CAAAA,EAAGd,SAAS,CAAG3C,CAAa,CAAC2B,EAAED,MAAM,CAAC,CAAE,QAX5HC,EAAED,MAAM,QAoBxB,GAAA1E,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,uDACb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,uDAEb,GAAAH,EAAAI,GAAA,EAAC6F,SAAAA,CACCC,QAAS/C,EACThD,UAAW,sCAEVyC,MAAA,CADC,EAAqC,8CAA1B,kCAGb,GAAA5C,EAAAI,GAAA,EAACsG,MAAAA,CAAIvG,UAAU,UAAUwG,KAAK,OAAOC,OAAO,eAAeC,QAAQ,qBAChE,EAGC,GAAA7G,EAAAI,GAAA,EAAC0G,OAAAA,CAAKC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,2GAFrE,GAAAlH,EAAAI,GAAA,EAAC0G,OAAAA,CAAKC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,iIAAiIC,SAAS,gBAQrN,GAAAnH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,qBACb,GAAAH,EAAAI,GAAA,EAAC6F,SAAAA,CACCC,QAAS,IAAM5D,EAAoB,CAACD,GACpClC,UAAU,0FAEV,GAAAH,EAAAI,GAAA,EAACsG,MAAAA,CAAIvG,UAAU,UAAUwG,KAAK,OAAOC,OAAO,eAAeC,QAAQ,qBACjE,GAAA7G,EAAAI,GAAA,EAAC0G,OAAAA,CAAKC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,+LAGxE7E,GACC,GAAArC,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,mIACb,GAAAH,EAAAI,GAAA,EAACY,QAAAA,CACCC,KAAK,QACLoG,IAAI,IACJC,IAAI,MACJpG,MAAOiB,EACPhB,SAAU,GAAO0E,EAAmB0B,SAAS1G,EAAEO,MAAM,CAACF,KAAK,GAC3Df,UAAU,mEAEZ,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,mDAA0CgC,EAAO,aAMtE,GAAAnC,EAAAI,GAAA,EAAC6F,SAAAA,CACCC,QAAS9C,EACTjD,UAAW,sCAEVyC,MAAA,CADC,EAAwC,8CAA1B,kCAGhB,GAAA5C,EAAAI,GAAA,EAACsG,MAAAA,CAAIvG,UAAU,UAAUwG,KAAK,OAAOC,OAAO,eAAeC,QAAQ,qBAChE,EAGC,GAAA7G,EAAAI,GAAA,EAAC0G,OAAAA,CAAKC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,uIAFrE,GAAAlH,EAAAI,GAAA,EAAC0G,OAAAA,CAAKC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,2HAQ3E,GAAAlH,EAAAI,GAAA,EAAC6F,SAAAA,CACCC,QAzLkB,KAC9B1D,EAAmB,CAACD,EAEtB,EAuLcpC,UAAW,sCAEVyC,MAAA,CADCL,EAAkB,yBAA2B,wDAG/C,GAAAvC,EAAAI,GAAA,EAACsG,MAAAA,CAAIvG,UAAU,UAAUwG,KAAK,OAAOC,OAAO,eAAeC,QAAQ,qBACjE,GAAA7G,EAAAI,GAAA,EAAC0G,OAAAA,CAAKC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,kHAKzE,GAAAlH,EAAAI,GAAA,EAAC6F,SAAAA,CACCC,QAAS7C,EACTlD,UAAU,2FAEV,GAAAH,EAAAI,GAAA,EAACsG,MAAAA,CAAIvG,UAAU,UAAUwG,KAAK,OAAOC,OAAO,eAAeC,QAAQ,qBACjE,GAAA7G,EAAAI,GAAA,EAAC0G,OAAAA,CAAKC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,oHAKzE,GAAAlH,EAAAI,GAAA,EAAC6F,SAAAA,CACCC,QAASN,EACTzF,UAAU,qFAEV,GAAAH,EAAAI,GAAA,EAACsG,MAAAA,CAAIvG,UAAU,UAAUwG,KAAK,OAAOC,OAAO,eAAeC,QAAQ,qBACjE,GAAA7G,EAAAI,GAAA,EAAC0G,OAAAA,CAAKC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,qCAQ/E,GAAAlH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,iEAEb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,+CACb,GAAAH,EAAAI,GAAA,EAACoH,KAAAA,CAAGrH,UAAU,4CAAmC,iBACjD,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,qBACZ8B,EAAa5B,GAAG,CAACsE,GAChB,GAAA3E,EAAAC,IAAA,EAACC,MAAAA,CAAeC,UAAU,gDACxB,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,sCACf,GAAAH,EAAAI,GAAA,EAACE,OAAAA,CAAKH,UAAU,yBAAiBwE,EAAEyB,IAAI,KAF/BzB,EAAEjE,EAAE,QASpB,GAAAV,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,kCACb,GAAAH,EAAAI,GAAA,EAACqH,EAAOA,CACN/H,SAAUA,EACVC,YAAaA,cAO3B,qFC7SO,SAASuC,IACd,GAAM,CAACwF,EAAOC,EAAS,CAAG5H,CAAAA,EAAAA,EAAAA,QAAAA,EAAiB,EAAE,EACvC,CAAC8B,EAAa+F,EAAe,CAAG7H,CAAAA,EAAAA,EAAAA,QAAAA,EAAsB,MACtD,CAACiC,EAAS6F,EAAW,CAAG9H,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACjC,CAACkC,EAAc6F,EAAgB,CAAG/H,CAAAA,EAAAA,EAAAA,QAAAA,EAA8D,EAAE,EAElGgI,EAAoBzD,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UACpCuD,EAAW,IAEXF,EAAS,EAAE,EACXE,EAAW,GACb,EAAG,EAAE,EAECG,EAAW1D,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,MAAO3C,EAAgBsG,KAElD1D,QAAQC,GAAG,CAAC,gBAAiB7C,EAAQsG,EACvC,EAAG,EAAE,EAiBL,MAAO,CACLP,MAAAA,EACA7F,YAAAA,EACAG,QAAAA,EACAC,aAAAA,EACA8F,kBAAAA,EACAC,SAAAA,EACAE,WAtBiB5D,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,MAAO8B,EAAc+B,EAAqBC,EAAoBH,KAE3F1D,QAAQC,GAAG,CAAC,iBAAkB,CAAE4B,KAAAA,EAAM+B,YAAAA,EAAaC,UAAAA,EAAWH,SAAAA,CAAS,EACzE,EAAG,EAAE,EAoBHnG,eAlBqBwC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,MAAO3C,IAExC4C,QAAQC,GAAG,CAAC,wBAAyB7C,EACvC,EAAG,EAAE,EAgBHI,UAdgBuC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,MAAO3C,IAEnC4C,QAAQC,GAAG,CAAC,gBAAiB7C,EAC/B,EAAG,EAAE,CAYL,CACF","sources":["webpack://_N_E/?fbb0","webpack://_N_E/./src/features/lessonRoom/webrtc/useWebRTC.ts","webpack://_N_E/./src/features/chat/viewmodel/useChatViewModel.ts","webpack://_N_E/./src/features/chat/view/ChatBox.tsx","webpack://_N_E/./pages/rooms/[roomId].tsx","webpack://_N_E/./src/features/conversation/viewmodel/useConversationRoomViewModel.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/rooms/[roomId]\",\n      function () {\n        return require(\"private-next-pages/rooms/[roomId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/rooms/[roomId]\"])\n      });\n    }\n  ","import { useState, useCallback } from 'react';\n\ninterface PeerIds {\n  self: string;\n  remote?: string;\n}\n\nexport function useWebRTC(roomId: string, peerIds: PeerIds, participantPeerIds: string[]) {\n  const [localStream, setLocalStream] = useState<MediaStream | null>(null);\n  const [remoteStreams, setRemoteStreams] = useState<{ [peerId: string]: MediaStream }>({});\n  const [isMicOn, setIsMicOn] = useState(true);\n  const [isCameraOn, setIsCameraOn] = useState(true);\n  const [status, setStatus] = useState('disconnected');\n  const [error, setError] = useState<string | null>(null);\n  const [muteStates, setMuteStates] = useState<{ [peerId: string]: boolean }>({});\n  const [videoStates, setVideoStates] = useState<{ [peerId: string]: boolean }>({});\n\n  const toggleMic = useCallback(() => {\n    setIsMicOn(!isMicOn);\n  }, [isMicOn]);\n\n  const toggleCamera = useCallback(() => {\n    setIsCameraOn(!isCameraOn);\n  }, [isCameraOn]);\n\n  const reconnect = useCallback(() => {\n    // Placeholder implementation\n    console.log('Reconnecting to room:', roomId);\n  }, [roomId]);\n\n  const toggleRemoteMute = useCallback((peerId: string) => {\n    setMuteStates(prev => ({ ...prev, [peerId]: !prev[peerId] }));\n  }, []);\n\n  const toggleRemoteVideo = useCallback((peerId: string) => {\n    setVideoStates(prev => ({ ...prev, [peerId]: !prev[peerId] }));\n  }, []);\n\n  return {\n    localStream,\n    remoteStreams,\n    isMicOn,\n    isCameraOn,\n    toggleMic,\n    toggleCamera,\n    reconnect,\n    status,\n    error,\n    muteStates,\n    videoStates,\n    toggleRemoteMute,\n    toggleRemoteVideo,\n  };\n} ","import { useState, useCallback } from 'react';\n\ninterface Message {\n  id: string;\n  text: string;\n  username: string;\n  timestamp: Date;\n}\n\nexport function useChatViewModel(roomId: string) {\n  const [messages, setMessages] = useState<Message[]>([]);\n\n  const sendMessage = useCallback(async (text: string) => {\n    // Placeholder implementation\n    console.log('Sending message:', text, 'to room:', roomId);\n    \n    // Add message to local state for now\n    const newMessage: Message = {\n      id: Date.now().toString(),\n      text,\n      username: 'You',\n      timestamp: new Date(),\n    };\n    setMessages(prev => [...prev, newMessage]);\n  }, [roomId]);\n\n  return {\n    messages,\n    sendMessage,\n  };\n} ","import React, { useState } from 'react';\n\ninterface Message {\n  id: string;\n  text: string;\n  username: string;\n  timestamp: Date;\n}\n\ninterface ChatBoxProps {\n  messages: Message[];\n  sendMessage: (text: string) => void;\n}\n\nconst ChatBox: React.FC<ChatBoxProps> = ({ messages, sendMessage }) => {\n  const [inputText, setInputText] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      sendMessage(inputText);\n      setInputText('');\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-1 overflow-y-auto p-2 space-y-2\">\n        {messages.map((message) => (\n          <div key={message.id} className=\"text-sm\">\n            <span className=\"font-bold\">{message.username}:</span> {message.text}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit} className=\"p-2 border-t\">\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n          placeholder=\"Type a message...\"\n          className=\"w-full p-2 border rounded\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default ChatBox; ","import React, { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useConversationRoomViewModel } from '@/features/conversation/viewmodel/useConversationRoomViewModel';\nimport { useWebRTC } from '@/features/lessonRoom/webrtc/useWebRTC';\nimport { useAuthContext } from '@/context/AuthContext';\nimport { useChatViewModel } from '@/features/chat/viewmodel/useChatViewModel';\nimport ChatBox from '@/features/chat/view/ChatBox';\n\nfunction RoomPage() {\n  const router = useRouter();\n  const { user } = useAuthContext();\n  const { roomId } = router.query;\n  const {\n    currentRoom,\n    getRoomDetails,\n    leaveRoom,\n    loading,\n    participants,\n  } = useConversationRoomViewModel();\n\n  // Additional state for new features\n  const [volume, setVolume] = useState(50);\n  const [showVolumeSlider, setShowVolumeSlider] = useState(false);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n\n  useEffect(() => {\n    if (roomId && typeof roomId === 'string') getRoomDetails(roomId);\n  }, [roomId, getRoomDetails]);\n\n  // WebRTC: Use user.id and roomId for peerId\n  const peerIds = user && roomId ? {\n    self: `${user.id}-room-${roomId}`,\n    remote: undefined,\n  } : { self: '', remote: undefined };\n  const {\n    localStream,\n    remoteStreams,\n    isMicOn,\n    isCameraOn,\n    toggleMic,\n    toggleCamera,\n    reconnect,\n    status,\n    error,\n    muteStates,\n    videoStates,\n    toggleRemoteMute,\n    toggleRemoteVideo,\n  } = useWebRTC(roomId as string, peerIds, participants.map(p => p.peerId));\n\n  // Chat ViewModel\n  const { messages, sendMessage } = useChatViewModel(roomId as string);\n\n  // Dynamic refs for remote videos\n  const remoteVideoRefs = useRef<{ [peerId: string]: HTMLVideoElement | null }>({});\n  useEffect(() => {\n    Object.entries(remoteStreams).forEach(([peerId, stream]) => {\n      const ref = remoteVideoRefs.current[peerId];\n      if (ref && stream) ref.srcObject = stream;\n    });\n  }, [remoteStreams]);\n\n  const handleLeaveRoom = () => {\n    if (currentRoom) {\n      leaveRoom(currentRoom.id);\n      router.push('/dashboard');\n    }\n  };\n\n  const handleToggleScreenShare = () => {\n    setIsScreenSharing(!isScreenSharing);\n    // Add screen sharing logic here\n  };\n\n  const handleVolumeChange = (newVolume: number) => {\n    setVolume(newVolume);\n  };\n\n  if (loading || !currentRoom) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-gray-700\">Loading room...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Max 5 users enforced at ViewModel level\n  if (participants.length > 5) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\n          <h1 className=\"text-gray-900 text-xl font-semibold mb-2\">Room Full</h1>\n          <p className=\"text-gray-600 mb-6\">This room has reached its maximum capacity.</p>\n          <button\n            onClick={() => router.push('/dashboard')}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors\"\n          >\n            Go to Dashboard\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col\">\n      {/* Top Header */}\n      <header className=\"bg-white border-b border-gray-200 px-6 py-3 shadow-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n            <div>\n              <h1 className=\"text-lg font-semibold text-gray-900\">Room: {currentRoom.name}</h1>\n              <p className=\"text-sm text-gray-600\">\n                {participants.length} participant{participants.length !== 1 ? 's' : ''}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-sm text-gray-600\">\n              Status: {status}\n            </div>\n            <button\n              onClick={handleLeaveRoom}\n              className=\"bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg text-sm transition-colors text-white\"\n            >\n              Leave Room\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex\">\n        {/* Video Area */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Video Grid */}\n          <div className=\"flex-1 bg-gray-100 p-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 h-full\">\n            {/* Local video */}\n              <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\n                <div className=\"relative h-full\">\n                  <div className=\"absolute top-4 left-4 z-10\">\n                    <div className=\"bg-black bg-opacity-50 text-white px-2 py-1 rounded text-sm\">\n                      You\n                    </div>\n                  </div>\n                  <video \n                    autoPlay \n                    muted \n                    playsInline \n                    className=\"w-full h-full object-cover\"\n                    ref={el => { if (el && localStream) el.srcObject = localStream; }}\n                  />\n                  {!isMicOn && (\n                    <div className=\"absolute bottom-4 left-4 z-10\">\n                      <div className=\"bg-red-500 text-white p-2 rounded-full\">\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\" clipRule=\"evenodd\" />\n                        </svg>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Remote Videos */}\n              {participants.filter(p => p.peerId !== peerIds.self).map(p => (\n                <div key={p.peerId} className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\n                  <div className=\"relative h-full\">\n                    <div className=\"absolute top-4 left-4 z-10\">\n                      <div className=\"bg-black bg-opacity-50 text-white px-2 py-1 rounded text-sm\">\n                        {p.name}\n                      </div>\n                    </div>\n                    <video \n                      autoPlay \n                      playsInline \n                      className=\"w-full h-full object-cover\"\n                      ref={el => { remoteVideoRefs.current[p.peerId] = el; if (el && remoteStreams[p.peerId]) el.srcObject = remoteStreams[p.peerId]; }}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Control Bar */}\n          <div className=\"bg-white border-t border-gray-200 px-6 py-4\">\n            <div className=\"flex items-center justify-center space-x-4\">\n              {/* Mute Button */}\n              <button\n                onClick={toggleMic}\n                className={`p-3 rounded-full transition-colors ${\n                  !isMicOn ? 'bg-red-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  {!isMicOn ? (\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\" clipRule=\"evenodd\" />\n                  ) : (\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\n                  )}\n                </svg>\n              </button>\n\n              {/* Volume Button */}\n              <div className=\"relative\">\n                <button\n                  onClick={() => setShowVolumeSlider(!showVolumeSlider)}\n                  className=\"p-3 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors\"\n                >\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\" />\n                  </svg>\n                </button>\n                {showVolumeSlider && (\n                  <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 bg-white border border-gray-200 rounded-lg p-3 shadow-lg\">\n                    <input\n                      type=\"range\"\n                      min=\"0\"\n                      max=\"100\"\n                      value={volume}\n                      onChange={(e) => handleVolumeChange(parseInt(e.target.value))}\n                      className=\"w-24 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                    />\n                    <div className=\"text-center text-sm text-gray-600 mt-1\">{volume}%</div>\n                  </div>\n                )}\n              </div>\n\n              {/* Video Button */}\n              <button\n                onClick={toggleCamera}\n                className={`p-3 rounded-full transition-colors ${\n                  !isCameraOn ? 'bg-red-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  {!isCameraOn ? (\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728\" />\n                  ) : (\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\" />\n                  )}\n                </svg>\n              </button>\n\n              {/* Screen Share Button */}\n              <button\n                onClick={handleToggleScreenShare}\n                className={`p-3 rounded-full transition-colors ${\n                  isScreenSharing ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                </svg>\n              </button>\n\n              {/* Reconnect Button */}\n              <button\n                onClick={reconnect}\n                className=\"p-3 rounded-full bg-yellow-500 text-white hover:bg-yellow-600 transition-colors\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                </svg>\n              </button>\n\n              {/* Leave Button */}\n              <button\n                onClick={handleLeaveRoom}\n                className=\"p-3 rounded-full bg-red-500 text-white hover:bg-red-600 transition-colors\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Chat Sidebar */}\n        <div className=\"w-80 bg-white border-l border-gray-200 flex flex-col\">\n          {/* Participants List */}\n          <div className=\"px-4 py-3 border-b border-gray-200\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Participants</h3>\n            <div className=\"space-y-1\">\n              {participants.map(p => (\n                <div key={p.id} className=\"flex items-center space-x-2 text-sm\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-gray-700\">{p.name}</span>\n                </div>\n              ))}\n                </div>\n              </div>\n\n          {/* Chat */}\n          <div className=\"flex-1 overflow-hidden\">\n            <ChatBox\n              messages={messages}\n              sendMessage={sendMessage}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RoomPage; ","import { useState, useCallback } from 'react';\n\ninterface Room {\n  id: string;\n  name: string;\n  description: string;\n  createdBy: string;\n  participants: Array<{ id: string; name: string; peerId: string }>;\n  maxParticipants: number;\n  isPrivate: boolean;\n}\n\nexport function useConversationRoomViewModel() {\n  const [rooms, setRooms] = useState<Room[]>([]);\n  const [currentRoom, setCurrentRoom] = useState<Room | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [participants, setParticipants] = useState<Array<{ id: string; name: string; peerId: string }>>([]);\n\n  const getAvailableRooms = useCallback(async () => {\n    setLoading(true);\n    // Placeholder implementation\n    setRooms([]);\n    setLoading(false);\n  }, []);\n\n  const joinRoom = useCallback(async (roomId: string, password?: string) => {\n    // Placeholder implementation\n    console.log('Joining room:', roomId, password);\n  }, []);\n\n  const createRoom = useCallback(async (name: string, description: string, isPrivate: boolean, password?: string) => {\n    // Placeholder implementation\n    console.log('Creating room:', { name, description, isPrivate, password });\n  }, []);\n\n  const getRoomDetails = useCallback(async (roomId: string) => {\n    // Placeholder implementation\n    console.log('Getting room details:', roomId);\n  }, []);\n\n  const leaveRoom = useCallback(async (roomId: string) => {\n    // Placeholder implementation\n    console.log('Leaving room:', roomId);\n  }, []);\n\n  return {\n    rooms,\n    currentRoom,\n    loading,\n    participants,\n    getAvailableRooms,\n    joinRoom,\n    createRoom,\n    getRoomDetails,\n    leaveRoom,\n  };\n} "],"names":["window","__NEXT_P","push","__webpack_require__","view_ChatBox","messages","sendMessage","param","inputText","setInputText","useState","jsx_runtime","jsxs","div","className","jsx","map","span","message","username","text","id","form","onSubmit","e","preventDefault","trim","input","type","value","onChange","target","placeholder","_roomId_","router","useRouter","user","useAuthContext","roomId","query","currentRoom","getRoomDetails","leaveRoom","loading","participants","useConversationRoomViewModel","volume","setVolume","showVolumeSlider","setShowVolumeSlider","isScreenSharing","setIsScreenSharing","useEffect","peerIds","self","concat","remote","undefined","localStream","remoteStreams","isMicOn","isCameraOn","toggleMic","toggleCamera","reconnect","status","error","muteStates","videoStates","toggleRemoteMute","toggleRemoteVideo","useWebRTC","participantPeerIds","setLocalStream","setRemoteStreams","setIsMicOn","setIsCameraOn","setStatus","setError","setMuteStates","setVideoStates","useCallback","console","log","prev","peerId","p","useChatViewModel","setMessages","newMessage","Date","now","toString","timestamp","remoteVideoRefs","useRef","Object","entries","forEach","stream","ref","current","srcObject","handleLeaveRoom","handleVolumeChange","newVolume","length","h1","button","onClick","header","name","video","autoPlay","muted","playsInline","el","svg","fill","stroke","viewBox","path","strokeLinecap","strokeLinejoin","strokeWidth","d","clipRule","filter","min","max","parseInt","h3","ChatBox","rooms","setRooms","setCurrentRoom","setLoading","setParticipants","getAvailableRooms","joinRoom","password","createRoom","description","isPrivate"],"sourceRoot":""}