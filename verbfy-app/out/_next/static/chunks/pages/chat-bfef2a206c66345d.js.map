{"version":3,"file":"static/chunks/pages/chat-bfef2a206c66345d.js","mappings":"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","sources":["webpack://_N_E/?7a2d","webpack://_N_E/./src/components/chat/ConversationList.tsx","webpack://_N_E/./pages/chat/index.tsx","webpack://_N_E/./src/components/chat/ChatInterface.tsx","webpack://_N_E/./src/types/chat.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/chat\",\n      function () {\n        return require(\"private-next-pages/chat/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/chat\"])\n      });\n    }\n  ","import React from 'react';\nimport { useChat } from '../../context/ChatContext';\nimport { Conversation, formatConversationTime, truncateMessage } from '../../types/chat';\n\ninterface ConversationListProps {\n  onConversationSelect: (conversation: Conversation) => void;\n  selectedConversationId?: string;\n}\n\nexport default function ConversationList({ \n  onConversationSelect, \n  selectedConversationId \n}: ConversationListProps) {\n  const { state } = useChat();\n  const { conversations, loading, error } = state;\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2 text-gray-600 dark:text-gray-400\">Loading conversations...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"text-red-500 mb-2\">⚠️</div>\n        <p className=\"text-gray-600 dark:text-gray-400\">{error}</p>\n      </div>\n    );\n  }\n\n  if (conversations.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"text-4xl mb-4\">💬</div>\n        <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n          No conversations yet\n        </h3>\n        <p className=\"text-gray-500 dark:text-gray-400\">\n          Start a conversation with a teacher or student to begin chatting.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-1\">\n      {conversations.map((conversation) => (\n        <ConversationItem\n          key={conversation._id}\n          conversation={conversation}\n          isSelected={conversation._id === selectedConversationId}\n          onClick={() => onConversationSelect(conversation)}\n        />\n      ))}\n    </div>\n  );\n}\n\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onClick: () => void;\n}\n\nfunction ConversationItem({ conversation, isSelected, onClick }: ConversationItemProps) {\n  const { otherParticipant, lastMessage, unreadCount, updatedAt } = conversation;\n\n  return (\n    <div\n      onClick={onClick}\n      className={`\n        flex items-center space-x-3 p-4 rounded-lg cursor-pointer transition-colors\n        ${isSelected\n          ? 'bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800'\n          : 'hover:bg-gray-50 dark:hover:bg-gray-800'\n        }\n      `}\n    >\n      {/* Avatar */}\n      <div className=\"flex-shrink-0\">\n        <div className=\"w-12 h-12 rounded-full overflow-hidden bg-blue-50 dark:bg-blue-900\">\n          {/* eslint-disable-next-line @next/next/no-img-element */}\n          <img\n            src={otherParticipant.avatar || '/images/default-avatar.png'}\n            alt={otherParticipant.name}\n            className=\"w-12 h-12 object-cover\"\n          />\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n            {otherParticipant.name}\n          </h3>\n          <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n            {formatConversationTime(updatedAt)}\n          </span>\n        </div>\n        \n        <div className=\"flex items-center justify-between mt-1\">\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n            {lastMessage ? (\n              <>\n                <span className=\"font-medium\">\n                  {lastMessage.sender === otherParticipant._id ? otherParticipant.name : 'You'}:\n                </span>{' '}\n                {truncateMessage(lastMessage.content, 30)}\n              </>\n            ) : (\n              'No messages yet'\n            )}\n          </p>\n          \n          {/* Unread count badge */}\n          {unreadCount > 0 && (\n            <div className=\"flex-shrink-0 ml-2\">\n              <span className=\"inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\n                {unreadCount > 99 ? '99+' : unreadCount}\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Role badge */}\n        <div className=\"mt-1\">\n          <span className={`\n            inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\n            ${otherParticipant.role === 'teacher'\n              ? 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'\n              : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n            }\n          `}>\n            {otherParticipant.role === 'teacher' ? '👨‍🏫 Teacher' : '👨‍🎓 Student'}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n} ","import React, { useState } from 'react';\nimport Head from 'next/head';\nimport { useAuth, useRoleGuard } from '../../src/context/AuthContext';\nimport { useChat } from '../../src/context/ChatContext';\nimport DashboardLayout from '../../src/components/layout/DashboardLayout';\nimport ConversationList from '../../src/components/chat/ConversationList';\nimport ChatInterface from '../../src/components/chat/ChatInterface';\nimport { Conversation } from '../../src/types/chat';\n\nexport default function ChatPage() {\n  const { hasAccess, isLoading } = useRoleGuard(['student', 'teacher']);\n  const { state } = useChat();\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show access denied if user doesn't have permission\n  if (!hasAccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n            Access Denied\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n            Only students and teachers can access the chat system.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleConversationSelect = (conversation: Conversation) => {\n    setSelectedConversation(conversation);\n  };\n\n  return (\n    <>\n      <Head>\n        <title>Chat - Verbfy</title>\n        <meta name=\"description\" content=\"Real-time messaging with teachers and students\" />\n      </Head>\n\n      <DashboardLayout \n        allowedRoles={['student', 'teacher']}\n        title=\"Chat\"\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              Messages\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Connect with teachers and students through real-time messaging\n            </p>\n          </div>\n\n          {/* Chat Interface */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 h-[600px]\">\n            <div className=\"flex h-full\">\n              {/* Conversation List */}\n              <div className=\"w-1/3 border-r border-gray-200 dark:border-gray-700\">\n                <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n                  <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    Conversations\n                  </h2>\n                </div>\n                <div className=\"h-[calc(600px-80px)] overflow-y-auto\">\n                  <ConversationList\n                    onConversationSelect={handleConversationSelect}\n                    selectedConversationId={selectedConversation?._id}\n                  />\n                </div>\n              </div>\n\n              {/* Chat Interface */}\n              <div className=\"flex-1\">\n                {selectedConversation ? (\n                  <ChatInterface\n                    conversationId={selectedConversation._id}\n                    otherParticipant={selectedConversation.otherParticipant}\n                  />\n                ) : (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <div className=\"text-center\">\n                      <div className=\"text-4xl mb-4\">💬</div>\n                      <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                        Select a conversation\n                      </h3>\n                      <p className=\"text-gray-500 dark:text-gray-400\">\n                        Choose a conversation from the list to start messaging.\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Features Info */}\n          <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6\">\n              <div className=\"text-2xl mb-2\">⚡</div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                Real-time Messaging\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Send and receive messages instantly with live updates and typing indicators.\n              </p>\n            </div>\n\n            <div className=\"bg-green-50 dark:bg-green-900/20 rounded-lg p-6\">\n              <div className=\"text-2xl mb-2\">🔒</div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                Secure Communication\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                All messages are encrypted and only visible to conversation participants.\n              </p>\n            </div>\n\n            <div className=\"bg-purple-50 dark:bg-purple-900/20 rounded-lg p-6\">\n              <div className=\"text-2xl mb-2\">📱</div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                Cross-platform\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Access your conversations from any device with automatic synchronization.\n              </p>\n            </div>\n          </div>\n        </div>\n      </DashboardLayout>\n    </>\n  );\n} ","import React, { useState, useEffect, useRef } from 'react';\nimport { useChat } from '../../context/ChatContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { Message, formatMessageTime } from '../../types/chat';\n\ninterface ChatInterfaceProps {\n  conversationId: string;\n  otherParticipant: {\n    _id: string;\n    name: string;\n    role: string;\n    avatar?: string;\n  };\n}\n\nexport default function ChatInterface({ conversationId, otherParticipant }: ChatInterfaceProps) {\n  const { state, actions } = useChat();\n  const { user } = useAuth();\n  const [message, setMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n\n  const { messages, loading, error, typingUsers } = state;\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Join conversation room when component mounts\n  useEffect(() => {\n    actions.joinConversation(conversationId);\n    actions.loadMessages(conversationId);\n    actions.markAsRead(conversationId);\n\n    return () => {\n      actions.leaveConversation(conversationId);\n    };\n  }, [conversationId]);\n\n  // Handle typing indicator\n  useEffect(() => {\n    if (isTyping) {\n      actions.setTyping(conversationId, true);\n    } else {\n      actions.setTyping(conversationId, false);\n    }\n  }, [isTyping, conversationId]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!message.trim()) return;\n\n    const messageData = {\n      conversationId,\n      content: message.trim(),\n      messageType: 'text' as const\n    };\n\n    await actions.sendMessage(messageData);\n    setMessage('');\n    setIsTyping(false);\n    \n    // Focus back to input\n    inputRef.current?.focus();\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessage(e.target.value);\n    \n    // Set typing indicator\n    if (!isTyping && e.target.value.length > 0) {\n      setIsTyping(true);\n    } else if (isTyping && e.target.value.length === 0) {\n      setIsTyping(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage(e);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2 text-gray-600 dark:text-gray-400\">Loading messages...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"text-red-500 mb-2\">⚠️</div>\n        <p className=\"text-gray-600 dark:text-gray-400\">{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-3 p-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"w-10 h-10 rounded-full overflow-hidden bg-blue-50 dark:bg-blue-900\">\n          {/* eslint-disable-next-line @next/next/no-img-element */}\n          <img\n            src={otherParticipant.avatar || '/images/default-avatar.png'}\n            alt={otherParticipant.name}\n            className=\"w-10 h-10 object-cover\"\n          />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n            {otherParticipant.name}\n          </h3>\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 capitalize\">\n            {otherParticipant.role}\n          </p>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-4xl mb-4\">💬</div>\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n              Start a conversation\n            </h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">\n              Send a message to begin chatting with {otherParticipant.name}.\n            </p>\n          </div>\n        ) : (\n          messages.map((msg) => (\n            <MessageItem\n              key={msg._id}\n              message={msg}\n              isOwnMessage={msg.sender._id === user?._id}\n            />\n          ))\n        )}\n        \n        {/* Typing indicator */}\n        {typingUsers.has(otherParticipant._id) && (\n          <div className=\"flex items-center space-x-2 text-gray-500 dark:text-gray-400\">\n            <div className=\"flex space-x-1\">\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n            </div>\n            <span className=\"text-sm\">{otherParticipant.name} is typing...</span>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Message Input */}\n      <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n        <form onSubmit={handleSendMessage} className=\"flex space-x-3\">\n          <div className=\"flex-1\">\n            <textarea\n              ref={inputRef}\n              value={message}\n              onChange={handleInputChange}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white resize-none\"\n              rows={1}\n              maxLength={1000}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            disabled={!message.trim()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            Send\n          </button>\n        </form>\n        \n        {/* Character count */}\n        <div className=\"mt-2 text-xs text-gray-500 dark:text-gray-400 text-right\">\n          {message.length}/1000\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface MessageItemProps {\n  message: Message;\n  isOwnMessage: boolean;\n}\n\nfunction MessageItem({ message, isOwnMessage }: MessageItemProps) {\n  return (\n    <div className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>\n      <div className={`max-w-xs lg:max-w-md ${isOwnMessage ? 'order-2' : 'order-1'}`}>\n        <div\n          className={`\n            px-4 py-2 rounded-lg shadow-sm\n            ${isOwnMessage\n              ? 'bg-blue-600 text-white'\n              : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'\n            }\n          `}\n        >\n          <p className=\"text-sm\">{message.content}</p>\n          <div className={`text-xs mt-1 ${isOwnMessage ? 'text-blue-100' : 'text-gray-500 dark:text-gray-400'}`}>\n            {formatMessageTime(message.createdAt)}\n            {isOwnMessage && (\n              <span className=\"ml-2\">\n                {message.isRead ? '✓✓' : '✓'}\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Avatar */}\n      <div className={`w-8 h-8 rounded-full overflow-hidden ${isOwnMessage ? 'order-1 ml-2' : 'order-2 mr-2'}`}>\n        {/* eslint-disable-next-line @next/next/no-img-element */}\n        <img\n          src={message.sender.avatar || '/images/default-avatar.png'}\n          alt={message.sender.name}\n          className=\"w-8 h-8 object-cover\"\n        />\n      </div>\n    </div>\n  );\n} ","// User interface for chat participants\nexport interface ChatUser {\n  _id: string;\n  name: string;\n  email: string;\n  role: 'student' | 'teacher' | 'admin';\n  avatar?: string;\n}\n\n// Message interface\nexport interface Message {\n  _id: string;\n  conversationId: string;\n  sender: ChatUser;\n  content: string;\n  messageType: 'text' | 'image' | 'file' | 'system';\n  isRead: boolean;\n  readAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Conversation interface\nexport interface Conversation {\n  _id: string;\n  otherParticipant: ChatUser;\n  lastMessage?: {\n    content: string;\n    sender: string;\n    timestamp: string;\n  };\n  unreadCount: number;\n  updatedAt: string;\n  createdAt: string;\n}\n\n// API Response interfaces\nexport interface ConversationsResponse {\n  success: boolean;\n  data: Conversation[];\n  message: string;\n}\n\nexport interface ConversationResponse {\n  success: boolean;\n  data: Conversation;\n  message: string;\n}\n\nexport interface MessagesResponse {\n  success: boolean;\n  data: {\n    messages: Message[];\n    pagination: {\n      page: number;\n      limit: number;\n      total: number;\n      pages: number;\n    };\n  };\n  message: string;\n}\n\nexport interface MessageResponse {\n  success: boolean;\n  data: Message;\n  message: string;\n}\n\nexport interface SendMessageData {\n  conversationId: string;\n  content: string;\n  messageType?: 'text' | 'image' | 'file' | 'system';\n}\n\nexport interface UnreadCountResponse {\n  success: boolean;\n  data: { unreadCount: number };\n  message: string;\n}\n\n// Socket.IO event interfaces\nexport interface SocketMessage {\n  conversationId: string;\n  message: Message;\n}\n\nexport interface TypingData {\n  conversationId: string;\n  userId: string;\n  isTyping: boolean;\n}\n\nexport interface UserTypingData {\n  userId: string;\n  isTyping: boolean;\n}\n\n// Chat state interface\nexport interface ChatState {\n  conversations: Conversation[];\n  currentConversation: Conversation | null;\n  messages: Message[];\n  loading: boolean;\n  error: string | null;\n  unreadCount: number;\n  typingUsers: Set<string>;\n}\n\n// Chat context interface\nexport interface ChatContextType {\n  state: ChatState;\n  actions: {\n    loadConversations: () => Promise<void>;\n    loadMessages: (conversationId: string, page?: number) => Promise<void>;\n    sendMessage: (data: SendMessageData) => Promise<void>;\n    markAsRead: (conversationId: string) => Promise<void>;\n    joinConversation: (conversationId: string) => void;\n    leaveConversation: (conversationId: string) => void;\n    setTyping: (conversationId: string, isTyping: boolean) => void;\n    loadUnreadCount: () => Promise<void>;\n  };\n}\n\n// Utility functions\nexport const formatMessageTime = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n\n  if (diffInHours < 24) {\n    return date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } else if (diffInHours < 48) {\n    return 'Yesterday';\n  } else {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  }\n};\n\nexport const formatConversationTime = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n\n  if (diffInHours < 1) {\n    const diffInMinutes = Math.floor(diffInHours * 60);\n    return diffInMinutes === 0 ? 'Just now' : `${diffInMinutes}m ago`;\n  } else if (diffInHours < 24) {\n    return `${Math.floor(diffInHours)}h ago`;\n  } else if (diffInHours < 48) {\n    return 'Yesterday';\n  } else {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  }\n};\n\nexport const truncateMessage = (content: string, maxLength: number = 50): string => {\n  if (content.length <= maxLength) return content;\n  return content.substring(0, maxLength) + '...';\n}; "],"names":["window","__NEXT_P","push","__webpack_require__","ConversationList","param","onConversationSelect","selectedConversationId","state","useChat","conversations","loading","error","jsx_runtime","jsxs","div","className","jsx","span","p","length","h3","map","ConversationItem","conversation","isSelected","_id","onClick","otherParticipant","lastMessage","unreadCount","updatedAt","concat","img","src","avatar","alt","name","formatConversationTime","Fragment","sender","truncateMessage","content","role","ChatPage","hasAccess","isLoading","useRoleGuard","selectedConversation","setSelectedConversation","useState","Head","title","meta","DashboardLayout","allowedRoles","h1","h2","ChatInterface","conversationId","actions","user","useAuth","message","setMessage","isTyping","setIsTyping","messagesEndRef","useRef","inputRef","messages","typingUsers","useEffect","current","scrollIntoView","behavior","joinConversation","loadMessages","markAsRead","leaveConversation","setTyping","handleSendMessage","e","preventDefault","trim","messageData","messageType","sendMessage","focus","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","MessageItem","msg","isOwnMessage","has","style","animationDelay","ref","form","onSubmit","textarea","value","onChange","target","onKeyPress","key","shiftKey","placeholder","rows","maxLength","button","type","disabled","formatMessageTime","createdAt","isRead","date","Date","dateString","diffInHours","now","getTime","toLocaleTimeString","hour","minute","toLocaleDateString","month","day","diffInMinutes","Math","floor","substring"],"sourceRoot":""}