{"version":3,"file":"static/chunks/pages/talk/[reservationId]-0c737bcdc7e6dd90.js","mappings":"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","sources":["webpack://_N_E/?eeac","webpack://_N_E/./pages/talk/[reservationId].tsx","webpack://_N_E/./src/components/livekit/LiveKitRoom.tsx","webpack://_N_E/./src/context/LiveKitContext.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/talk/[reservationId]\",\n      function () {\n        return require(\"private-next-pages/talk/[reservationId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/talk/[reservationId]\"])\n      });\n    }\n  ","import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { useAuthContext } from '@/context/AuthContext';\nimport { LiveKitRoom } from '@/components/livekit/LiveKitRoom';\nimport { LiveKitProvider } from '@/context/LiveKitContext';\n\nexport default function TalkPage() {\n  const router = useRouter();\n  const { reservationId } = router.query;\n  const [error, setError] = useState<Error | null>(null);\n\n  // Wait for router to be ready\n  if (!router.isReady || !reservationId) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const handleError = (error: Error) => {\n    console.error('Room error:', error);\n    setError(error);\n  };\n\n  const handleDisconnected = () => {\n    console.log('Disconnected from room');\n  };\n\n  return (\n    <>\n      <Head>\n        <title>Verbfy - Video Lesson</title>\n      </Head>\n\n      <div className=\"h-screen bg-white\">\n        <LiveKitProvider>\n          {error ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center text-red-500\">\n                <p className=\"text-xl font-semibold\">Connection Error</p>\n                <p className=\"mt-2\">{error.message}</p>\n              </div>\n            </div>\n          ) : (\n            <LiveKitRoom\n              roomName={reservationId as string}\n              onError={handleError}\n              onDisconnected={handleDisconnected}\n            />\n          )}\n        </LiveKitProvider>\n      </div>\n    </>\n  );\n} ","import React, { useEffect } from 'react';\nimport {\n  VideoConference,\n  GridLayout,\n  ParticipantTile,\n  ControlBar,\n  useTracks,\n  RoomAudioRenderer\n} from '@livekit/components-react';\nimport { Track } from 'livekit-client';\nimport { useLiveKit } from '../../context/LiveKitContext';\nimport '@livekit/components-styles';\n\ninterface LiveKitRoomProps {\n  roomName: string;\n  onError?: (error: Error) => void;\n  onConnected?: () => void;\n  onDisconnected?: () => void;\n}\n\nexport const LiveKitRoom: React.FC<LiveKitRoomProps> = ({\n  roomName,\n  onError,\n  onConnected,\n  onDisconnected\n}) => {\n  const { room, isConnecting, error, connect, disconnect } = useLiveKit();\n\n  useEffect(() => {\n    if (roomName) {\n      connect(roomName)\n        .then(() => {\n          console.log('✅ Connected to LiveKit room:', roomName);\n          onConnected?.();\n        })\n        .catch((err) => {\n          console.error('❌ Failed to connect to LiveKit room:', err);\n          onError?.(err);\n        });\n    }\n\n    return () => {\n      disconnect();\n      onDisconnected?.();\n    };\n  }, [roomName, connect, disconnect, onConnected, onDisconnected, onError]);\n\n  if (isConnecting) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          <p className=\"mt-4\">Connecting to room...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center text-red-500\">\n          <p>Failed to connect: {error.message}</p>\n          <button\n            onClick={() => connect(roomName)}\n            className=\"mt-4 px-4 py-2 bg-primary text-white rounded hover:bg-primary-dark\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!room) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p>Room not connected</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full\">\n      <VideoConference>\n        <GridLayout tracks={useTracks()}>\n          <ParticipantTile />\n        </GridLayout>\n        <RoomAudioRenderer />\n        <ControlBar />\n      </VideoConference>\n    </div>\n  );\n}; ","import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { Room, RoomOptions } from 'livekit-client';\nimport api from '../lib/api';\n\ninterface LiveKitContextType {\n  room: Room | null;\n  isConnecting: boolean;\n  error: Error | null;\n  connect: (roomName: string) => Promise<void>;\n  disconnect: () => void;\n}\n\nconst LiveKitContext = createContext<LiveKitContextType | undefined>(undefined);\n\nexport const useLiveKit = () => {\n  const context = useContext(LiveKitContext);\n  if (!context) {\n    throw new Error('useLiveKit must be used within a LiveKitProvider');\n  }\n  return context;\n};\n\ninterface LiveKitProviderProps {\n  children: React.ReactNode;\n}\n\nexport const LiveKitProvider: React.FC<LiveKitProviderProps> = ({ children }) => {\n  const [room, setRoom] = useState<Room | null>(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const connect = useCallback(async (roomName: string) => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n\n      // Get token from backend\n      const response = await api.post(`/api/livekit/token/${roomName}`);\n      const { token, url } = response.data;\n\n      // Initialize room options\n      const roomOptions: RoomOptions = {\n        adaptiveStream: true,\n        dynacast: true,\n        stopLocalTrackOnUnpublish: true\n      };\n\n      // Create and connect room\n      const newRoom = new Room(roomOptions);\n      await newRoom.connect(url, token);\n\n      setRoom(newRoom);\n    } catch (err) {\n      console.error('Failed to connect to LiveKit room:', err);\n      setError(err as Error);\n      throw err;\n    } finally {\n      setIsConnecting(false);\n    }\n  }, []);\n\n  const disconnect = useCallback(() => {\n    if (room) {\n      room.disconnect();\n      setRoom(null);\n    }\n  }, [room]);\n\n  return (\n    <LiveKitContext.Provider\n      value={{\n        room,\n        isConnecting,\n        error,\n        connect,\n        disconnect\n      }}\n    >\n      {children}\n    </LiveKitContext.Provider>\n  );\n}; "],"names":["window","__NEXT_P","push","__webpack_require__","TalkPage","router","useRouter","reservationId","query","error","setError","useState","isReady","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","jsx","Head","title","div","className","LiveKitProvider","p","message","LiveKitRoom","roomName","onError","console","onDisconnected","log","onConnected","param","room","isConnecting","connect","disconnect","useLiveKit","useEffect","then","catch","err","button","onClick","VideoConference","GridLayout","tracks","useTracks","ParticipantTile","RoomAudioRenderer","ControlBar","LiveKitContext","createContext","undefined","context","useContext","children","setRoom","setIsConnecting","useCallback","token","url","response","api","post","concat","data","newRoom","Room","adaptiveStream","dynacast","stopLocalTrackOnUnpublish","Provider","value"],"sourceRoot":""}