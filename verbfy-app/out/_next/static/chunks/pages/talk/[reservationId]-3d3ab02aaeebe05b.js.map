{"version":3,"file":"static/chunks/pages/talk/[reservationId]-3d3ab02aaeebe05b.js","mappings":"sFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,wBACA,WACA,OAAeC,EAAQ,KACvB,EACA,iMCMA,IAAMC,EAAiBC,CAAAA,EAAAA,EAAAA,aAAAA,EAA8CC,KAAAA,GAExDC,EAAa,KACxB,IAAMC,EAAUC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWL,GAC3B,GAAI,CAACI,EACH,MAAM,MAAU,oDAElB,OAAOA,CACT,EAMaE,EAAkD,OAAC,CAAEC,SAAAA,CAAQ,CAAE,CAAAC,EACpE,CAACC,EAAMC,EAAQ,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAsB,MACxC,CAACC,EAAcC,EAAgB,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC3C,CAACG,EAAOC,EAAS,CAAGJ,CAAAA,EAAAA,EAAAA,QAAAA,EAAuB,MAE3CK,EAAUC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,MAAOC,IACjC,GAAI,CACFL,EAAgB,IAChBE,EAAS,MAIT,GAAM,CAAEI,MAAAA,CAAK,CAAEC,IAAAA,CAAG,CAAE,CAAGC,CADN,MAAMC,EAAAA,EAAGA,CAACC,IAAI,CAAC,sBAA+BC,MAAA,CAATN,GAAAA,EACtBO,IAAI,CAU9BC,EAAU,IAAIC,EAAAA,EAAIA,CAPS,CAC/BC,eAAgB,GAChBC,SAAU,GACVC,0BAA2B,EAC7B,EAIA,OAAMJ,EAAQV,OAAO,CAACI,EAAKD,GAE3BT,EAAQgB,EACV,CAAE,MAAOK,EAAK,CAGZ,MAFAC,QAAQlB,KAAK,CAAC,qCAAsCiB,GACpDhB,EAASgB,GACHA,CACR,QAAU,CACRlB,EAAgB,GAClB,CACF,EAAG,EAAE,EAECoB,EAAahB,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KACzBR,IACFA,EAAKwB,UAAU,GACfvB,EAAQ,MAEZ,EAAG,CAACD,EAAK,EAET,MACE,GAAAyB,EAAAC,GAAA,EAACnC,EAAeoC,QAAQ,EACtBC,MAAO,CACL5B,KAAAA,EACAG,aAAAA,EACAE,MAAAA,EACAE,QAAAA,EACAiB,WAAAA,CACF,WAEC1B,GAGP,WC7DO,IAAM+B,EAA0C,OAAC,CACtDpB,SAAAA,CAAQ,CACRqB,QAAAA,CAAO,CACPC,YAAAA,CAAW,CACXC,eAAAA,CAAc,CACf,CAAAjC,EACO,CAAEC,KAAAA,CAAI,CAAEG,aAAAA,CAAY,CAAEE,MAAAA,CAAK,CAAEE,QAAAA,CAAO,CAAEiB,WAAAA,CAAU,CAAE,CAAG9B,UAqB3D,CAnBAuC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJxB,GACFF,EAAQE,GACLyB,IAAI,CAAC,KACJX,QAAQY,GAAG,CAAC,+BAAgC1B,GAC5CsB,MAAAA,GAAAA,GACF,GACCK,KAAK,CAAC,IACLb,QAAQlB,KAAK,CAAC,uCAAwCiB,GACtDQ,MAAAA,GAAAA,EAAUR,EACZ,GAGG,KACLE,IACAQ,MAAAA,GAAAA,GACF,GACC,CAACvB,EAAUF,EAASiB,EAAYO,EAAaC,EAAgBF,EAAQ,EAEpE3B,GAEA,GAAAsB,EAAAC,GAAA,EAACW,MAAAA,CAAIC,UAAU,mDACb,GAAAb,EAAAc,IAAA,EAACF,MAAAA,CAAIC,UAAU,wBACb,GAAAb,EAAAC,GAAA,EAACW,MAAAA,CAAIC,UAAU,kEACf,GAAAb,EAAAC,GAAA,EAACc,IAAAA,CAAEF,UAAU,gBAAO,+BAMxBjC,EAEA,GAAAoB,EAAAC,GAAA,EAACW,MAAAA,CAAIC,UAAU,mDACb,GAAAb,EAAAc,IAAA,EAACF,MAAAA,CAAIC,UAAU,qCACb,GAAAb,EAAAc,IAAA,EAACC,IAAAA,WAAE,sBAAoBnC,EAAMoC,OAAO,IACpC,GAAAhB,EAAAC,GAAA,EAACgB,SAAAA,CACCC,QAAS,IAAMpC,EAAQE,GACvB6B,UAAU,8EACX,mBAQJtC,EASH,GAAAyB,EAAAC,GAAA,EAACW,MAAAA,CAAIC,UAAU,kBACb,GAAAb,EAAAc,IAAA,EAACK,EAAAA,EAAeA,CAAAA,WACd,GAAAnB,EAAAC,GAAA,EAACmB,EAAAA,CAAUA,CAAAA,CAACC,OAAQC,CAAAA,EAAAA,EAAAA,CAAAA,aAClB,GAAAtB,EAAAC,GAAA,EAACsB,EAAAA,CAAeA,CAAAA,CAAAA,KAElB,GAAAvB,EAAAC,GAAA,EAACuB,EAAAA,CAAiBA,CAAAA,CAAAA,GAClB,GAAAxB,EAAAC,GAAA,EAACwB,EAAAA,EAAUA,CAAAA,CAAAA,QAbb,GAAAzB,EAAAC,GAAA,EAACW,MAAAA,CAAIC,UAAU,mDACb,GAAAb,EAAAC,GAAA,EAACc,IAAAA,UAAE,wBAgBX,ECtFe,SAASW,IACtB,IAAMC,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IACT,CAAEC,cAAAA,CAAa,CAAE,CAAGF,EAAOG,KAAK,CAChC,CAAClD,EAAOC,EAAS,CAAGJ,CAAAA,EAAAA,EAAAA,QAAAA,EAAuB,aAGjD,EAAYsD,OAAO,EAAKF,EAkBtB,GAAA7B,EAAAc,IAAA,EAAAd,EAAAgC,QAAA,YACE,GAAAhC,EAAAC,GAAA,EAACgC,IAAIA,UACH,GAAAjC,EAAAC,GAAA,EAACiC,QAAAA,UAAM,4BAGT,GAAAlC,EAAAC,GAAA,EAACW,MAAAA,CAAIC,UAAU,6BACb,GAAAb,EAAAC,GAAA,EAAC7B,EAAeA,UACbQ,EACC,GAAAoB,EAAAC,GAAA,EAACW,MAAAA,CAAIC,UAAU,mDACb,GAAAb,EAAAc,IAAA,EAACF,MAAAA,CAAIC,UAAU,qCACb,GAAAb,EAAAC,GAAA,EAACc,IAAAA,CAAEF,UAAU,iCAAwB,qBACrC,GAAAb,EAAAC,GAAA,EAACc,IAAAA,CAAEF,UAAU,gBAAQjC,EAAMoC,OAAO,QAItC,GAAAhB,EAAAC,GAAA,EAACG,EAAWA,CACVpB,SAAU6C,EACVxB,QA3BQ,IAClBP,QAAQlB,KAAK,CAAC,cAAeA,GAC7BC,EAASD,EACX,EAyBY2B,eAvBe,KACzBT,QAAQY,GAAG,CAAC,yBACd,WAbI,GAAAV,EAAAC,GAAA,EAACW,MAAAA,CAAIC,UAAU,qDACb,GAAAb,EAAAC,GAAA,EAACW,MAAAA,CAAIC,UAAU,mEAwCvB","sources":["webpack://_N_E/?eeac","webpack://_N_E/./src/context/LiveKitContext.tsx","webpack://_N_E/./src/components/livekit/LiveKitRoom.tsx","webpack://_N_E/./pages/talk/[reservationId].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/talk/[reservationId]\",\n      function () {\n        return require(\"private-next-pages/talk/[reservationId].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/talk/[reservationId]\"])\n      });\n    }\n  ","import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport { Room, RoomOptions } from 'livekit-client';\r\nimport api from '../lib/api';\r\n\r\ninterface LiveKitContextType {\r\n  room: Room | null;\r\n  isConnecting: boolean;\r\n  error: Error | null;\r\n  connect: (roomName: string) => Promise<void>;\r\n  disconnect: () => void;\r\n}\r\n\r\nconst LiveKitContext = createContext<LiveKitContextType | undefined>(undefined);\r\n\r\nexport const useLiveKit = () => {\r\n  const context = useContext(LiveKitContext);\r\n  if (!context) {\r\n    throw new Error('useLiveKit must be used within a LiveKitProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface LiveKitProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const LiveKitProvider: React.FC<LiveKitProviderProps> = ({ children }) => {\r\n  const [room, setRoom] = useState<Room | null>(null);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const connect = useCallback(async (roomName: string) => {\r\n    try {\r\n      setIsConnecting(true);\r\n      setError(null);\r\n\r\n      // Get token from backend\r\n      const response = await api.post(`/api/livekit/token/${roomName}`);\r\n      const { token, url } = response.data;\r\n\r\n      // Initialize room options\r\n      const roomOptions: RoomOptions = {\r\n        adaptiveStream: true,\r\n        dynacast: true,\r\n        stopLocalTrackOnUnpublish: true\r\n      };\r\n\r\n      // Create and connect room\r\n      const newRoom = new Room(roomOptions);\r\n      await newRoom.connect(url, token);\r\n\r\n      setRoom(newRoom);\r\n    } catch (err) {\r\n      console.error('Failed to connect to LiveKit room:', err);\r\n      setError(err as Error);\r\n      throw err;\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  }, []);\r\n\r\n  const disconnect = useCallback(() => {\r\n    if (room) {\r\n      room.disconnect();\r\n      setRoom(null);\r\n    }\r\n  }, [room]);\r\n\r\n  return (\r\n    <LiveKitContext.Provider\r\n      value={{\r\n        room,\r\n        isConnecting,\r\n        error,\r\n        connect,\r\n        disconnect\r\n      }}\r\n    >\r\n      {children}\r\n    </LiveKitContext.Provider>\r\n  );\r\n}; ","import React, { useEffect } from 'react';\r\nimport {\r\n  VideoConference,\r\n  GridLayout,\r\n  ParticipantTile,\r\n  ControlBar,\r\n  useTracks,\r\n  RoomAudioRenderer\r\n} from '@livekit/components-react';\r\nimport { Track } from 'livekit-client';\r\nimport { useLiveKit } from '../../context/LiveKitContext';\r\nimport '@livekit/components-styles';\r\n\r\ninterface LiveKitRoomProps {\r\n  roomName: string;\r\n  onError?: (error: Error) => void;\r\n  onConnected?: () => void;\r\n  onDisconnected?: () => void;\r\n}\r\n\r\nexport const LiveKitRoom: React.FC<LiveKitRoomProps> = ({\r\n  roomName,\r\n  onError,\r\n  onConnected,\r\n  onDisconnected\r\n}) => {\r\n  const { room, isConnecting, error, connect, disconnect } = useLiveKit();\r\n\r\n  useEffect(() => {\r\n    if (roomName) {\r\n      connect(roomName)\r\n        .then(() => {\r\n          console.log('✅ Connected to LiveKit room:', roomName);\r\n          onConnected?.();\r\n        })\r\n        .catch((err) => {\r\n          console.error('❌ Failed to connect to LiveKit room:', err);\r\n          onError?.(err);\r\n        });\r\n    }\r\n\r\n    return () => {\r\n      disconnect();\r\n      onDisconnected?.();\r\n    };\r\n  }, [roomName, connect, disconnect, onConnected, onDisconnected, onError]);\r\n\r\n  if (isConnecting) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\r\n          <p className=\"mt-4\">Connecting to room...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full\">\r\n        <div className=\"text-center text-red-500\">\r\n          <p>Failed to connect: {error.message}</p>\r\n          <button\r\n            onClick={() => connect(roomName)}\r\n            className=\"mt-4 px-4 py-2 bg-primary text-white rounded hover:bg-primary-dark\"\r\n          >\r\n            Try Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!room) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full\">\r\n        <p>Room not connected</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-full\">\r\n      <VideoConference>\r\n        <GridLayout tracks={useTracks()}>\r\n          <ParticipantTile />\r\n        </GridLayout>\r\n        <RoomAudioRenderer />\r\n        <ControlBar />\r\n      </VideoConference>\r\n    </div>\r\n  );\r\n}; ","import React, { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\nimport { useAuthContext } from '@/context/AuthContext';\r\nimport { LiveKitRoom } from '@/components/livekit/LiveKitRoom';\r\nimport { LiveKitProvider } from '@/context/LiveKitContext';\r\n\r\nexport default function TalkPage() {\r\n  const router = useRouter();\r\n  const { reservationId } = router.query;\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  // Wait for router to be ready\r\n  if (!router.isReady || !reservationId) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleError = (error: Error) => {\r\n    console.error('Room error:', error);\r\n    setError(error);\r\n  };\r\n\r\n  const handleDisconnected = () => {\r\n    console.log('Disconnected from room');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Verbfy - Video Lesson</title>\r\n      </Head>\r\n\r\n      <div className=\"h-screen bg-white\">\r\n        <LiveKitProvider>\r\n          {error ? (\r\n            <div className=\"flex items-center justify-center h-full\">\r\n              <div className=\"text-center text-red-500\">\r\n                <p className=\"text-xl font-semibold\">Connection Error</p>\r\n                <p className=\"mt-2\">{error.message}</p>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <LiveKitRoom\r\n              roomName={reservationId as string}\r\n              onError={handleError}\r\n              onDisconnected={handleDisconnected}\r\n            />\r\n          )}\r\n        </LiveKitProvider>\r\n      </div>\r\n    </>\r\n  );\r\n} "],"names":["window","__NEXT_P","push","__webpack_require__","LiveKitContext","createContext","undefined","useLiveKit","context","useContext","LiveKitProvider","children","param","room","setRoom","useState","isConnecting","setIsConnecting","error","setError","connect","useCallback","roomName","token","url","response","api","post","concat","data","newRoom","Room","adaptiveStream","dynacast","stopLocalTrackOnUnpublish","err","console","disconnect","jsx_runtime","jsx","Provider","value","LiveKitRoom","onError","onConnected","onDisconnected","useEffect","then","log","catch","div","className","jsxs","p","message","button","onClick","VideoConference","GridLayout","tracks","useTracks","ParticipantTile","RoomAudioRenderer","ControlBar","TalkPage","router","useRouter","reservationId","query","isReady","Fragment","Head","title"],"sourceRoot":""}