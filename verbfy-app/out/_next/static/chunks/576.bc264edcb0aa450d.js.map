{"version":3,"file":"static/chunks/576.bc264edcb0aa450d.js","mappings":"kOAoBO,IAAMA,EAA0C,OAAC,CACtDC,SAAAA,CAAQ,CACRC,QAAAA,CAAO,CACPC,YAAAA,CAAW,CACXC,eAAAA,CAAc,CACf,CAAAC,EACO,CAAEC,KAAAA,CAAI,CAAEC,aAAAA,CAAY,CAAEC,MAAAA,CAAK,CAAEC,QAAAA,CAAO,CAAEC,WAAAA,CAAU,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,UAqB3D,CAnBAC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJX,GACFQ,EAAQR,GACLY,IAAI,CAAC,KACJC,QAAQC,GAAG,CAAC,+BAAgCd,GAC5CE,MAAAA,GAAAA,GACF,GACCa,KAAK,CAAC,IACLF,QAAQN,KAAK,CAAC,uCAAwCS,GACtDf,MAAAA,GAAAA,EAAUe,EACZ,GAGG,KACLP,IACAN,MAAAA,GAAAA,GACF,GACC,CAACH,EAAUQ,EAASC,EAAYP,EAAaC,EAAgBF,EAAQ,EAEpEK,GAEA,GAAAW,EAAAC,GAAA,EAACC,MAAAA,CAAIC,UAAU,mDACb,GAAAH,EAAAI,IAAA,EAACF,MAAAA,CAAIC,UAAU,wBACb,GAAAH,EAAAC,GAAA,EAACC,MAAAA,CAAIC,UAAU,kEACf,GAAAH,EAAAC,GAAA,EAACI,IAAAA,CAAEF,UAAU,gBAAO,+BAMxBb,EAEA,GAAAU,EAAAC,GAAA,EAACC,MAAAA,CAAIC,UAAU,mDACb,GAAAH,EAAAI,IAAA,EAACF,MAAAA,CAAIC,UAAU,qCACb,GAAAH,EAAAI,IAAA,EAACC,IAAAA,WAAE,sBAAoBf,EAAMgB,OAAO,IACpC,GAAAN,EAAAC,GAAA,EAACM,SAAAA,CACCC,QAAS,IAAMjB,EAAQR,GACvBoB,UAAU,8EACX,mBAQJf,EASH,GAAAY,EAAAC,GAAA,EAACC,MAAAA,CAAIC,UAAU,kBACb,GAAAH,EAAAI,IAAA,EAACK,EAAAA,EAAeA,CAAAA,WACd,GAAAT,EAAAC,GAAA,EAACS,EAAAA,CAAUA,CAAAA,CAACC,OAAQC,CAAAA,EAAAA,EAAAA,CAAAA,aAClB,GAAAZ,EAAAC,GAAA,EAACY,EAAAA,CAAeA,CAAAA,CAAAA,KAElB,GAAAb,EAAAC,GAAA,EAACa,EAAAA,CAAiBA,CAAAA,CAAAA,GAClB,GAAAd,EAAAC,GAAA,EAACc,EAAAA,EAAUA,CAAAA,CAAAA,QAbb,GAAAf,EAAAC,GAAA,EAACC,MAAAA,CAAIC,UAAU,mDACb,GAAAH,EAAAC,GAAA,EAACI,IAAAA,UAAE,wBAgBX,gICjFA,IAAMW,EAAiBC,CAAAA,EAAAA,EAAAA,aAAAA,EAA8CC,KAAAA,GAExDzB,EAAa,KACxB,IAAM0B,EAAUC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWJ,GAC3B,GAAI,CAACG,EACH,MAAM,MAAU,oDAElB,OAAOA,CACT,EAMaE,EAAkD,OAAC,CAAEC,SAAAA,CAAQ,CAAE,CAAAnC,EACpE,CAACC,EAAMmC,EAAQ,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAsB,MACxC,CAACnC,EAAcoC,EAAgB,CAAGD,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC3C,CAAClC,EAAOoC,EAAS,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,EAAuB,MAE3CjC,EAAUoC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,MAAO5C,IACjC,GAAI,CACF0C,EAAgB,IAChBC,EAAS,MAIT,GAAM,CAAEE,MAAAA,CAAK,CAAEC,IAAAA,CAAG,CAAE,CAAGC,CADN,MAAMC,EAAAA,EAAGA,CAACC,IAAI,CAAC,sBAA+BC,MAAA,CAATlD,GAAAA,EACtBmD,IAAI,CAU9BC,EAAU,IAAIC,EAAAA,EAAIA,CAPS,CAC/BC,eAAgB,GAChBC,SAAU,GACVC,0BAA2B,EAC7B,EAIA,OAAMJ,EAAQ5C,OAAO,CAACsC,EAAKD,GAE3BL,EAAQY,EACV,CAAE,MAAOpC,EAAK,CAGZ,MAFAH,QAAQN,KAAK,CAAC,qCAAsCS,GACpD2B,EAAS3B,GACHA,CACR,QAAU,CACR0B,EAAgB,GAClB,CACF,EAAG,EAAE,EAECjC,EAAamC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KACzBvC,IACFA,EAAKI,UAAU,GACf+B,EAAQ,MAEZ,EAAG,CAACnC,EAAK,EAET,MACE,GAAAY,EAAAC,GAAA,EAACe,EAAewB,QAAQ,EACtBC,MAAO,CACLrD,KAAAA,EACAC,aAAAA,EACAC,MAAAA,EACAC,QAAAA,EACAC,WAAAA,CACF,WAEC8B,GAGP","sources":["webpack://_N_E/./src/components/livekit/LiveKitRoom.tsx","webpack://_N_E/./src/context/LiveKitContext.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  VideoConference,\n  GridLayout,\n  ParticipantTile,\n  ControlBar,\n  useTracks,\n  RoomAudioRenderer\n} from '@livekit/components-react';\nimport { Track } from 'livekit-client';\nimport { useLiveKit } from '../../context/LiveKitContext';\nimport '@livekit/components-styles';\n\ninterface LiveKitRoomProps {\n  roomName: string;\n  onError?: (error: Error) => void;\n  onConnected?: () => void;\n  onDisconnected?: () => void;\n}\n\nexport const LiveKitRoom: React.FC<LiveKitRoomProps> = ({\n  roomName,\n  onError,\n  onConnected,\n  onDisconnected\n}) => {\n  const { room, isConnecting, error, connect, disconnect } = useLiveKit();\n\n  useEffect(() => {\n    if (roomName) {\n      connect(roomName)\n        .then(() => {\n          console.log('✅ Connected to LiveKit room:', roomName);\n          onConnected?.();\n        })\n        .catch((err) => {\n          console.error('❌ Failed to connect to LiveKit room:', err);\n          onError?.(err);\n        });\n    }\n\n    return () => {\n      disconnect();\n      onDisconnected?.();\n    };\n  }, [roomName, connect, disconnect, onConnected, onDisconnected, onError]);\n\n  if (isConnecting) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          <p className=\"mt-4\">Connecting to room...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center text-red-500\">\n          <p>Failed to connect: {error.message}</p>\n          <button\n            onClick={() => connect(roomName)}\n            className=\"mt-4 px-4 py-2 bg-primary text-white rounded hover:bg-primary-dark\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!room) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p>Room not connected</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full\">\n      <VideoConference>\n        <GridLayout tracks={useTracks()}>\n          <ParticipantTile />\n        </GridLayout>\n        <RoomAudioRenderer />\n        <ControlBar />\n      </VideoConference>\n    </div>\n  );\n}; ","import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { Room, RoomOptions } from 'livekit-client';\nimport api from '../lib/api';\n\ninterface LiveKitContextType {\n  room: Room | null;\n  isConnecting: boolean;\n  error: Error | null;\n  connect: (roomName: string) => Promise<void>;\n  disconnect: () => void;\n}\n\nconst LiveKitContext = createContext<LiveKitContextType | undefined>(undefined);\n\nexport const useLiveKit = () => {\n  const context = useContext(LiveKitContext);\n  if (!context) {\n    throw new Error('useLiveKit must be used within a LiveKitProvider');\n  }\n  return context;\n};\n\ninterface LiveKitProviderProps {\n  children: React.ReactNode;\n}\n\nexport const LiveKitProvider: React.FC<LiveKitProviderProps> = ({ children }) => {\n  const [room, setRoom] = useState<Room | null>(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const connect = useCallback(async (roomName: string) => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n\n      // Get token from backend\n      const response = await api.post(`/api/livekit/token/${roomName}`);\n      const { token, url } = response.data;\n\n      // Initialize room options\n      const roomOptions: RoomOptions = {\n        adaptiveStream: true,\n        dynacast: true,\n        stopLocalTrackOnUnpublish: true\n      };\n\n      // Create and connect room\n      const newRoom = new Room(roomOptions);\n      await newRoom.connect(url, token);\n\n      setRoom(newRoom);\n    } catch (err) {\n      console.error('Failed to connect to LiveKit room:', err);\n      setError(err as Error);\n      throw err;\n    } finally {\n      setIsConnecting(false);\n    }\n  }, []);\n\n  const disconnect = useCallback(() => {\n    if (room) {\n      room.disconnect();\n      setRoom(null);\n    }\n  }, [room]);\n\n  return (\n    <LiveKitContext.Provider\n      value={{\n        room,\n        isConnecting,\n        error,\n        connect,\n        disconnect\n      }}\n    >\n      {children}\n    </LiveKitContext.Provider>\n  );\n}; "],"names":["LiveKitRoom","roomName","onError","onConnected","onDisconnected","param","room","isConnecting","error","connect","disconnect","useLiveKit","useEffect","then","console","log","catch","err","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","className","jsxs","p","message","button","onClick","VideoConference","GridLayout","tracks","useTracks","ParticipantTile","RoomAudioRenderer","ControlBar","LiveKitContext","createContext","undefined","context","useContext","LiveKitProvider","children","setRoom","useState","setIsConnecting","setError","useCallback","token","url","response","api","post","concat","data","newRoom","Room","adaptiveStream","dynacast","stopLocalTrackOnUnpublish","Provider","value"],"sourceRoot":""}