name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create backend production environment file
        run: |
          cat > backend/.env.production << EOF
          # Database
          MONGO_URI=${{ secrets.MONGO_URI }}
          
          # JWT Secrets
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          
          # Server
          PORT=5000
          NODE_ENV=production
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          BACKEND_URL=${{ secrets.BACKEND_URL }}
          
          # LiveKit
          LIVEKIT_CLOUD_API_KEY=${{ secrets.LIVEKIT_API_KEY }}
          LIVEKIT_CLOUD_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}
          LIVEKIT_CLOUD_URL=${{ secrets.LIVEKIT_CLOUD_URL }}
          
          # OAuth
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          MS_CLIENT_ID=${{ secrets.MS_CLIENT_ID }}
          MS_CLIENT_SECRET=${{ secrets.MS_CLIENT_SECRET }}
          
          # Stripe
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          
          # Email
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          SMTP_FROM="${{ secrets.SMTP_FROM }}"
          
          # AWS
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
          # Monitoring
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          EOF

      - name: Create frontend production environment file
        run: |
          cat > verbfy-app/.env.production << EOF
          # API Configuration
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
          
          # LiveKit
          NEXT_PUBLIC_LIVEKIT_URL=${{ secrets.NEXT_PUBLIC_LIVEKIT_URL }}
          NEXT_PUBLIC_LIVEKIT_CLOUD_URL=${{ secrets.NEXT_PUBLIC_LIVEKIT_CLOUD_URL }}
          
          # Stripe
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          
          # Analytics
          NEXT_PUBLIC_GA_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
          
          # Environment
          NODE_ENV=production
          NEXT_PUBLIC_ENV=production
          EOF

      - name: Build and test
        run: |
          # Install and build backend
          cd backend && npm ci && npm run build && cd ..
          
          # Install and build frontend
          cd verbfy-app && npm ci && npm run build && cd ..

      - name: Validate deployment secrets
        if: success()
        run: |
          if [ -z "${{ secrets.PRODUCTION_HOST }}" ]; then
            echo "Error: PRODUCTION_HOST secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_USER }}" ]; then
            echo "Error: PRODUCTION_USER secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_SSH_KEY }}" ]; then
            echo "Error: PRODUCTION_SSH_KEY secret is not set"
            exit 1
          fi
          echo "All required deployment secrets are configured"

      - name: Deploy to production server
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          timeout: 300s
          command_timeout: 600s
          script: |
            # Set error handling
            set -e
            
            # Navigate to application directory
            cd /opt/verbfy
            
            # Pull latest code
            git pull origin main
            
            # Copy environment files (these should be managed on the server)
            # The actual production secrets should be managed server-side
            
            # Build and deploy with Docker Compose
            docker compose -f docker-compose.production.yml down || true
            docker compose -f docker-compose.production.yml up -d --build
            
            # Clean up old images
            docker system prune -f
            
            # Health check with retries
            echo "Waiting for services to start..."
            sleep 30
            
            # Backend health check
            for i in {1..5}; do
              if curl -f http://localhost:5000/health; then
                echo "Backend health check passed"
                break
              fi
              echo "Backend health check attempt $i failed, retrying..."
              sleep 10
            done
            
            # Frontend health check
            for i in {1..5}; do
              if curl -f http://localhost:3000; then
                echo "Frontend health check passed"
                break
              fi
              echo "Frontend health check attempt $i failed, retrying..."
              sleep 10
            done
            
            echo "Deployment completed successfully"

      - name: Create deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Services Status" >> $GITHUB_STEP_SUMMARY
            echo "- Backend: ✅ Running on port 5000" >> $GITHUB_STEP_SUMMARY
            echo "- Frontend: ✅ Running on port 3000" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify deployment status
        if: always() && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}