name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create backend production environment file
        run: |
          cat > backend/.env.production << EOF
          # Database
          MONGO_URI=${{ secrets.MONGO_URI }}
          
          # JWT Secrets
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          
          # Server
          PORT=5000
          NODE_ENV=production
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          BACKEND_URL=${{ secrets.BACKEND_URL }}
          
          # LiveKit
          LIVEKIT_CLOUD_API_KEY=${{ secrets.LIVEKIT_CLOUD_API_KEY }}
          LIVEKIT_CLOUD_API_SECRET=${{ secrets.LIVEKIT_CLOUD_API_SECRET }}
          LIVEKIT_CLOUD_URL=${{ secrets.LIVEKIT_CLOUD_URL }}
          
          # OAuth
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          MS_CLIENT_ID=${{ secrets.MS_CLIENT_ID }}
          MS_CLIENT_SECRET=${{ secrets.MS_CLIENT_SECRET }}
          
          # Stripe
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          
          # Email
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          SMTP_FROM="${{ secrets.SMTP_FROM }}"
          
          # AWS
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
          # Monitoring
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          EOF

      - name: Create frontend production environment file
        run: |
          cat > verbfy-app/.env.production << EOF
          # API Configuration
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
          
          # LiveKit
          NEXT_PUBLIC_LIVEKIT_URL=${{ secrets.NEXT_PUBLIC_LIVEKIT_URL }}
          NEXT_PUBLIC_LIVEKIT_CLOUD_URL=${{ secrets.NEXT_PUBLIC_LIVEKIT_CLOUD_URL }}
          
          # Stripe
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          
          # Analytics
          NEXT_PUBLIC_GA_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
          
          # Environment
          NODE_ENV=production
          NEXT_PUBLIC_ENV=production
          EOF

      - name: Build and test
        run: |
          # Install and build backend
          cd backend && npm ci && npm run build && cd ..
          
          # Install and build frontend to catch any build errors early
          cd verbfy-app && npm ci && npm run build && cd ..

      - name: Validate deployment secrets
        if: success()
        run: |
          # Check if required secrets are set
          echo "Validating deployment secrets..."
          
          # Note: We can't directly check if secrets exist in GitHub Actions
          # This step will fail during deployment if secrets are missing
          echo "Required secrets will be validated during deployment"
          echo "Make sure the following secrets are configured in repository settings:"
          echo "- PRODUCTION_HOST"
          echo "- PRODUCTION_USER" 
          echo "- PRODUCTION_SSH_KEY"
          echo "- PRODUCTION_PORT (optional, defaults to 22)"

      - name: Deploy to production server
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          timeout: 300s
          command_timeout: 600s
          script: |
            # Set error handling
            set -e
            
            # Navigate to application directory
            cd /opt/verbfy
            
            # Pull latest code
            git pull origin main
            
            # Copy environment files (these should be managed on the server)
            # The actual production secrets should be managed server-side
            
            # Build and deploy with Docker Compose
            docker compose -f docker-compose.hetzner.yml down || true
            docker compose -f docker-compose.hetzner.yml up -d --build
            
            # Clean up old images
            docker system prune -f
            
            # Health check with retries
            echo "Waiting for services to start..."
            sleep 30
            
            # Backend health check
            backend_healthy=false
            for i in {1..10}; do
              if curl -f -s http://localhost:5000/api/health > /dev/null 2>&1; then
                echo "Backend health check passed on attempt $i"
                backend_healthy=true
                break
              fi
              echo "Backend health check attempt $i failed, retrying in 15 seconds..."
              sleep 15
            done
            
            if [ "$backend_healthy" = false ]; then
              echo "Backend health check failed after 10 attempts"
              docker compose -f docker-compose.hetzner.yml logs backend
              exit 1
            fi
            
            # Frontend health check
            frontend_healthy=false
            for i in {1..10}; do
              if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
                echo "Frontend health check passed on attempt $i"
                frontend_healthy=true
                break
              fi
              echo "Frontend health check attempt $i failed, retrying in 15 seconds..."
              sleep 15
            done
            
            if [ "$frontend_healthy" = false ]; then
              echo "Frontend health check failed after 10 attempts"
              docker compose -f docker-compose.hetzner.yml logs frontend
              exit 1
            fi
            
            echo "Deployment completed successfully"

      - name: Create deployment summary
        if: always()
        run: |
          echo "## üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production (Hetzner)" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚úÖ Services Status" >> $GITHUB_STEP_SUMMARY
            echo "- **Backend**: ‚úÖ Healthy (http://localhost:5000/api/health)" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend**: ‚úÖ Healthy (http://localhost:3000)" >> $GITHUB_STEP_SUMMARY
            echo "- **Database**: ‚úÖ Connected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
            echo "- [Production Site](https://verbfy.com)" >> $GITHUB_STEP_SUMMARY
            echo "- [API Health Check](https://api.verbfy.com/api/health)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Deployment failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify deployment status
        if: ${{ always() && env.SLACK_WEBHOOK_URL != '' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Production Deployment ${{ job.status == 'success' && 'Successful' || 'Failed' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment ${{ job.status == 'success' && 'Successful' || 'Failed' }}*\n\n‚Ä¢ *Repository:* ${{ github.repository }}\n‚Ä¢ *Branch:* `${{ github.ref_name }}`\n‚Ä¢ *Commit:* `${{ github.sha }}`\n‚Ä¢ *Triggered by:* ${{ github.actor }}\n‚Ä¢ *Status:* ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}