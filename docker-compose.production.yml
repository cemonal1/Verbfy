version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: verbfy-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: verbfy
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - verbfy-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: verbfy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - verbfy-network

  # LiveKit Server
  livekit-server:
    image: livekit/livekit-server:latest
    container_name: verbfy-livekit
    restart: unless-stopped
    environment:
      LIVEKIT_KEYS: ${LIVEKIT_API_KEY}:${LIVEKIT_API_SECRET}
      LIVEKIT_PORT: 7880
      LIVEKIT_BIND_ADDRESSES: 0.0.0.0
      LIVEKIT_REDIS_ADDRESS: redis:6379
      LIVEKIT_REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
    ports:
      - "7880:7880"
      - "7881:7881"
      - "7882:7882/udp"
    volumes:
      - livekit_data:/tmp
    networks:
      - verbfy-network
    depends_on:
      - redis

  # Backend API
  verbfy-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: verbfy-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/verbfy?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-password}@redis:6379
      LIVEKIT_SELF_URL: wss://livekit.verbfy.com
      LIVEKIT_SELF_API_KEY: ${LIVEKIT_API_KEY}
      LIVEKIT_SELF_API_SECRET: ${LIVEKIT_API_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-https://verbfy.com}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://verbfy.com}
    env_file:
      - ./backend/.env.production
    ports:
      - "5000:5000"
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - verbfy-network
    depends_on:
      - mongodb
      - redis
      - livekit-server

  # Frontend Application
  verbfy-frontend:
    build:
      context: ./verbfy-app
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: verbfy-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.verbfy.com}
      NEXT_PUBLIC_LIVEKIT_URL: ${NEXT_PUBLIC_LIVEKIT_URL:-wss://livekit.verbfy.com}
      NEXT_PUBLIC_LIVEKIT_CLOUD_URL: ${NEXT_PUBLIC_LIVEKIT_CLOUD_URL:-wss://livekit.verbfy.com}
    env_file:
      - ./verbfy-app/.env.production
    ports:
      - "3000:3000"
    volumes:
      - ./verbfy-app/public:/app/public
    networks:
      - verbfy-network
    depends_on:
      - verbfy-backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: verbfy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - verbfy-network
    depends_on:
      - verbfy-frontend
      - verbfy-backend
      - livekit-server

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: verbfy-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/webroot:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME} -d api.${DOMAIN_NAME} -d livekit.${DOMAIN_NAME}
    networks:
      - verbfy-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  livekit_data:
    driver: local

networks:
  verbfy-network:
    driver: bridge 